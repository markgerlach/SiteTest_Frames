using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using System.Text;

using LEADBase;

namespace LEAD
{
	/// <summary>
	/// Class Name: Equipment
	/// Generated by GenClasses v.4.0.0 on 07/28/2017 05:18 AM
	/// </summary>
	#region Equipment Class
	[Serializable]
	public partial class Equipment : LEAD_BaseObject, 
		IClassGenLogXML, IClassGenCopyWithNewID, IClassGenPropertyChanging, INotifyPropertyChanging
	{
		#region Private Properties
		private long _equipID = 0;
		private long _agencyID = 0;
		private string _type = null;
		private string _item = null;
		private int? _year = null;
		private string _make = null;
		private string _model = null;
		private long? _parentEquipID = null;
		private string _color = null;
		private int? _numDoors = null;
		private bool _is4x4 = false;
		private string _lightingSystem = null;
		private string _departmentRadio = null;
		private int? _numSpotLights = null;
		private bool _markedVehicle = false;
		private bool _motorcycle = false;
		private bool _specialtyVehicle = false;
		private string _vehicleID = null;
		private long? _computerEquipID = null;
		private string _serialNum = null;
		private string _licenseNum = null;
		private int? _mileage = null;
		private int? _roundCount = null;
		private string _partNum = null;
		private string _category = null;
		private string _otherID = null;
		private string _status = null;
		private DateTime? _dtStatus = null;
		private long? _contactID = null;
		private string _location = null;
		private long? _teamID = null;
		private string _teamName = null;
		private string _bureau = null;
		private string _division = null;
		private string _funding = null;
		private string _description = null;
		private string _comments = null;
		private long? _vendorContactID = null;
		private string _vendorPartNumber = null;
		private decimal _purchasePrice = 0;
		private decimal _tax = 0;
		private decimal _sh = 0;
		private DateTime? _dtPurchase = null;
		private string _warranty = null;
		private DateTime? _dtReplacement = null;
		private string _vin = null;
		private bool _inactive = false;
		private DateTime _dtAdded = DateTime.Now;
		private string _addedByUser = null;
		private DateTime _dtUpdated = DateTime.Now;
		private string _updatedByUser = null;
		private byte[] _rowversion = null;

		private Equipment _originalValues = null;

		private bool _disposed = false;

		// Child Items
		private EquipmentMaintScheduleCollection _equipmentMaintScheduleCollection = new EquipmentMaintScheduleCollection();
		private EquipmentMovementCollection _equipmentMovementCollection = new EquipmentMovementCollection();
		#endregion Private Properties

		#region Constructors

		/// <summary>
		/// Creates a new Equipment.
		/// </summary>
		public Equipment()
		{
			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}

		/// <summary>
		/// Builds a Equipmentbased on a certain record from the database.
		/// </summary>
		/// <param name="equipID">A primary key used to select the record.</param>
		public Equipment(long equipID)
		{
			this.Get(equipID);

			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}
		#endregion Constructors

		#region Disposal
		/// <summary>
		/// Override of the disposal method
		/// </summary>
		/// <param name="disposing">True if the object is being disposed, otherwise false</param>
		protected override void Dispose(bool disposing)
		{
			if (!this._isDisposable) { return; }

			if (!this._disposed)
			{
				try
				{
					// Set the disposed on this object to true
					this._disposed = true;

					if (disposing)
					{
						// Release the managed resources you added in
						// this derived class here.

						// Dispose of the original values object
						if (_originalValues != null && _originalValues.IsDisposable) { _originalValues.Dispose(); _originalValues = null; }

						// Dispose of the Child Items
						if (_equipmentMaintScheduleCollection != null && _equipmentMaintScheduleCollection.IsDisposable) { _equipmentMaintScheduleCollection.Dispose(); _equipmentMaintScheduleCollection = null; }
						if (_equipmentMovementCollection != null && _equipmentMovementCollection.IsDisposable) { _equipmentMovementCollection.Dispose(); _equipmentMovementCollection = null; }
					}

					// Release the native unmanaged resources you added
					// in this derived class here.
					// <No Unmanaged Resources in this block>
				}
				finally
				{
					// Call Dispose on your base class.
					if (this.IsDisposable) { base.Dispose(disposing); }
				}
			}
		}
		#endregion Disposal
		
		#region Public Properties

		/// <summary>
		/// Property generated from a child table.
		/// </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public EquipmentMaintScheduleCollection Coll_EquipmentMaintSchedule
		{
			get { return _equipmentMaintScheduleCollection; }
			set { _equipmentMaintScheduleCollection = value; }
		}

		/// <summary>
		/// Property generated from a child table.
		/// </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public EquipmentMovementCollection Coll_EquipmentMovement
		{
			get { return _equipmentMovementCollection; }
			set { _equipmentMovementCollection = value; }
		}

		/// <summary>
		/// Property generated from the iEquipID field.
		/// </summary>
		public long EquipID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _equipID;
			}
			set 
			{
				if (_equipID != value)
				{
					bool cancelled = NotifyPropertyChanging("EquipID", _equipID, value);
					if (!cancelled)
					{
						_equipID = value;
						SetModifiedStatus("EquipID");
						NotifyPropertyChanged("EquipID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iAgencyID field.
		/// </summary>
		public long AgencyID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _agencyID;
			}
			set 
			{
				if (_agencyID != value)
				{
					bool cancelled = NotifyPropertyChanging("AgencyID", _agencyID, value);
					if (!cancelled)
					{
						_agencyID = value;
						SetModifiedStatus("AgencyID");
						NotifyPropertyChanged("AgencyID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sType field.
		/// </summary>
		public string Type
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _type;
			}
			set 
			{
				if (_type != value)
				{
					bool cancelled = NotifyPropertyChanging("Type", _type, value);
					if (!cancelled)
					{
						_type = value;
						SetModifiedStatus("Type");
						NotifyPropertyChanged("Type", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sItem field.
		/// </summary>
		public string Item
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _item;
			}
			set 
			{
				if (_item != value)
				{
					bool cancelled = NotifyPropertyChanging("Item", _item, value);
					if (!cancelled)
					{
						_item = value;
						SetModifiedStatus("Item");
						NotifyPropertyChanged("Item", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iYear field.
		/// </summary>
		public int? Year
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _year;
			}
			set 
			{
				if (_year != value)
				{
					bool cancelled = NotifyPropertyChanging("Year", _year, value);
					if (!cancelled)
					{
						_year = value;
						SetModifiedStatus("Year");
						NotifyPropertyChanged("Year", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Year rendered as a string.
		/// </summary>
		public string YearAsString
		{
			get { return _year.ToString(); }
		}

		/// <summary>
		/// Property generated from the sMake field.
		/// </summary>
		public string Make
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _make;
			}
			set 
			{
				if (_make != value)
				{
					bool cancelled = NotifyPropertyChanging("Make", _make, value);
					if (!cancelled)
					{
						_make = value;
						SetModifiedStatus("Make");
						NotifyPropertyChanged("Make", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sModel field.
		/// </summary>
		public string Model
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _model;
			}
			set 
			{
				if (_model != value)
				{
					bool cancelled = NotifyPropertyChanging("Model", _model, value);
					if (!cancelled)
					{
						_model = value;
						SetModifiedStatus("Model");
						NotifyPropertyChanged("Model", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iParentEquipID field.
		/// </summary>
		public long? ParentEquipID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _parentEquipID;
			}
			set 
			{
				if (_parentEquipID != value)
				{
					bool cancelled = NotifyPropertyChanging("ParentEquipID", _parentEquipID, value);
					if (!cancelled)
					{
						_parentEquipID = value;
						SetModifiedStatus("ParentEquipID");
						NotifyPropertyChanged("ParentEquipID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sColor field.
		/// </summary>
		public string Color
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _color;
			}
			set 
			{
				if (_color != value)
				{
					bool cancelled = NotifyPropertyChanging("Color", _color, value);
					if (!cancelled)
					{
						_color = value;
						SetModifiedStatus("Color");
						NotifyPropertyChanged("Color", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iNumDoors field.
		/// </summary>
		public int? NumDoors
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _numDoors;
			}
			set 
			{
				if (_numDoors != value)
				{
					bool cancelled = NotifyPropertyChanging("NumDoors", _numDoors, value);
					if (!cancelled)
					{
						_numDoors = value;
						SetModifiedStatus("NumDoors");
						NotifyPropertyChanged("NumDoors", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of NumDoors rendered as a string.
		/// </summary>
		public string NumDoorsAsString
		{
			get { return _numDoors.ToString(); }
		}

		/// <summary>
		/// Property generated from the b4x4 field.
		/// </summary>
		public bool Is4x4
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _is4x4;
			}
			set 
			{
				if (_is4x4 != value)
				{
					bool cancelled = NotifyPropertyChanging("Is4x4", _is4x4, value);
					if (!cancelled)
					{
						_is4x4 = value;
						SetModifiedStatus("Is4x4");
						NotifyPropertyChanged("Is4x4", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Is4x4 rendered as a string.
		/// </summary>
		public string Is4x4AsString
		{
			get { return _is4x4.ToString(); }
		}

		/// <summary>
		/// Property generated from the sLightingSystem field.
		/// </summary>
		public string LightingSystem
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _lightingSystem;
			}
			set 
			{
				if (_lightingSystem != value)
				{
					bool cancelled = NotifyPropertyChanging("LightingSystem", _lightingSystem, value);
					if (!cancelled)
					{
						_lightingSystem = value;
						SetModifiedStatus("LightingSystem");
						NotifyPropertyChanged("LightingSystem", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sDepartmentRadio field.
		/// </summary>
		public string DepartmentRadio
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _departmentRadio;
			}
			set 
			{
				if (_departmentRadio != value)
				{
					bool cancelled = NotifyPropertyChanging("DepartmentRadio", _departmentRadio, value);
					if (!cancelled)
					{
						_departmentRadio = value;
						SetModifiedStatus("DepartmentRadio");
						NotifyPropertyChanged("DepartmentRadio", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iNumSpotLights field.
		/// </summary>
		public int? NumSpotLights
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _numSpotLights;
			}
			set 
			{
				if (_numSpotLights != value)
				{
					bool cancelled = NotifyPropertyChanging("NumSpotLights", _numSpotLights, value);
					if (!cancelled)
					{
						_numSpotLights = value;
						SetModifiedStatus("NumSpotLights");
						NotifyPropertyChanged("NumSpotLights", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of NumSpotLights rendered as a string.
		/// </summary>
		public string NumSpotLightsAsString
		{
			get { return _numSpotLights.ToString(); }
		}

		/// <summary>
		/// Property generated from the bMarkedVehicle field.
		/// </summary>
		public bool MarkedVehicle
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _markedVehicle;
			}
			set 
			{
				if (_markedVehicle != value)
				{
					bool cancelled = NotifyPropertyChanging("MarkedVehicle", _markedVehicle, value);
					if (!cancelled)
					{
						_markedVehicle = value;
						SetModifiedStatus("MarkedVehicle");
						NotifyPropertyChanged("MarkedVehicle", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of MarkedVehicle rendered as a string.
		/// </summary>
		public string MarkedVehicleAsString
		{
			get { return _markedVehicle.ToString(); }
		}

		/// <summary>
		/// Property generated from the bMotorcycle field.
		/// </summary>
		public bool Motorcycle
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _motorcycle;
			}
			set 
			{
				if (_motorcycle != value)
				{
					bool cancelled = NotifyPropertyChanging("Motorcycle", _motorcycle, value);
					if (!cancelled)
					{
						_motorcycle = value;
						SetModifiedStatus("Motorcycle");
						NotifyPropertyChanged("Motorcycle", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Motorcycle rendered as a string.
		/// </summary>
		public string MotorcycleAsString
		{
			get { return _motorcycle.ToString(); }
		}

		/// <summary>
		/// Property generated from the bSpecialtyVehicle field.
		/// </summary>
		public bool SpecialtyVehicle
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _specialtyVehicle;
			}
			set 
			{
				if (_specialtyVehicle != value)
				{
					bool cancelled = NotifyPropertyChanging("SpecialtyVehicle", _specialtyVehicle, value);
					if (!cancelled)
					{
						_specialtyVehicle = value;
						SetModifiedStatus("SpecialtyVehicle");
						NotifyPropertyChanged("SpecialtyVehicle", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of SpecialtyVehicle rendered as a string.
		/// </summary>
		public string SpecialtyVehicleAsString
		{
			get { return _specialtyVehicle.ToString(); }
		}

		/// <summary>
		/// Property generated from the sVehicleID field.
		/// </summary>
		public string VehicleID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vehicleID;
			}
			set 
			{
				if (_vehicleID != value)
				{
					bool cancelled = NotifyPropertyChanging("VehicleID", _vehicleID, value);
					if (!cancelled)
					{
						_vehicleID = value;
						SetModifiedStatus("VehicleID");
						NotifyPropertyChanged("VehicleID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iComputerEquipID field.
		/// </summary>
		public long? ComputerEquipID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _computerEquipID;
			}
			set 
			{
				if (_computerEquipID != value)
				{
					bool cancelled = NotifyPropertyChanging("ComputerEquipID", _computerEquipID, value);
					if (!cancelled)
					{
						_computerEquipID = value;
						SetModifiedStatus("ComputerEquipID");
						NotifyPropertyChanged("ComputerEquipID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sSerialNum field.
		/// </summary>
		public string SerialNum
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _serialNum;
			}
			set 
			{
				if (_serialNum != value)
				{
					bool cancelled = NotifyPropertyChanging("SerialNum", _serialNum, value);
					if (!cancelled)
					{
						_serialNum = value;
						SetModifiedStatus("SerialNum");
						NotifyPropertyChanged("SerialNum", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sLicenseNum field.
		/// </summary>
		public string LicenseNum
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _licenseNum;
			}
			set 
			{
				if (_licenseNum != value)
				{
					bool cancelled = NotifyPropertyChanging("LicenseNum", _licenseNum, value);
					if (!cancelled)
					{
						_licenseNum = value;
						SetModifiedStatus("LicenseNum");
						NotifyPropertyChanged("LicenseNum", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iMileage field.
		/// </summary>
		public int? Mileage
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _mileage;
			}
			set 
			{
				if (_mileage != value)
				{
					bool cancelled = NotifyPropertyChanging("Mileage", _mileage, value);
					if (!cancelled)
					{
						_mileage = value;
						SetModifiedStatus("Mileage");
						NotifyPropertyChanged("Mileage", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Mileage rendered as a string.
		/// </summary>
		public string MileageAsString
		{
			get { return _mileage.ToString(); }
		}

		/// <summary>
		/// Property generated from the iRoundCount field.
		/// </summary>
		public int? RoundCount
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _roundCount;
			}
			set 
			{
				if (_roundCount != value)
				{
					bool cancelled = NotifyPropertyChanging("RoundCount", _roundCount, value);
					if (!cancelled)
					{
						_roundCount = value;
						SetModifiedStatus("RoundCount");
						NotifyPropertyChanged("RoundCount", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of RoundCount rendered as a string.
		/// </summary>
		public string RoundCountAsString
		{
			get { return _roundCount.ToString(); }
		}

		/// <summary>
		/// Property generated from the sPartNum field.
		/// </summary>
		public string PartNum
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _partNum;
			}
			set 
			{
				if (_partNum != value)
				{
					bool cancelled = NotifyPropertyChanging("PartNum", _partNum, value);
					if (!cancelled)
					{
						_partNum = value;
						SetModifiedStatus("PartNum");
						NotifyPropertyChanged("PartNum", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sCategory field.
		/// </summary>
		public string Category
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _category;
			}
			set 
			{
				if (_category != value)
				{
					bool cancelled = NotifyPropertyChanging("Category", _category, value);
					if (!cancelled)
					{
						_category = value;
						SetModifiedStatus("Category");
						NotifyPropertyChanged("Category", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sOtherID field.
		/// </summary>
		public string OtherID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _otherID;
			}
			set 
			{
				if (_otherID != value)
				{
					bool cancelled = NotifyPropertyChanging("OtherID", _otherID, value);
					if (!cancelled)
					{
						_otherID = value;
						SetModifiedStatus("OtherID");
						NotifyPropertyChanged("OtherID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sStatus field.
		/// </summary>
		public string Status
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _status;
			}
			set 
			{
				if (_status != value)
				{
					bool cancelled = NotifyPropertyChanging("Status", _status, value);
					if (!cancelled)
					{
						_status = value;
						SetModifiedStatus("Status");
						NotifyPropertyChanged("Status", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtStatus field.
		/// </summary>
		public DateTime? DateStatus
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtStatus;
			}
			set 
			{
				if (_dtStatus != value)
				{
					bool cancelled = NotifyPropertyChanging("DateStatus", _dtStatus, value);
					if (!cancelled)
					{
						_dtStatus = value;
						SetModifiedStatus("DateStatus");
						NotifyPropertyChanged("DateStatus", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iContactID field.
		/// </summary>
		public long? ContactID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _contactID;
			}
			set 
			{
				if (_contactID != value)
				{
					bool cancelled = NotifyPropertyChanging("ContactID", _contactID, value);
					if (!cancelled)
					{
						_contactID = value;
						SetModifiedStatus("ContactID");
						NotifyPropertyChanged("ContactID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sLocation field.
		/// </summary>
		public string Location
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _location;
			}
			set 
			{
				if (_location != value)
				{
					bool cancelled = NotifyPropertyChanging("Location", _location, value);
					if (!cancelled)
					{
						_location = value;
						SetModifiedStatus("Location");
						NotifyPropertyChanged("Location", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iTeamID field.
		/// </summary>
		public long? TeamID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _teamID;
			}
			set 
			{
				if (_teamID != value)
				{
					bool cancelled = NotifyPropertyChanging("TeamID", _teamID, value);
					if (!cancelled)
					{
						_teamID = value;
						SetModifiedStatus("TeamID");
						NotifyPropertyChanged("TeamID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sTeamName field.
		/// </summary>
		public string TeamName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _teamName;
			}
			set 
			{
				if (_teamName != value)
				{
					bool cancelled = NotifyPropertyChanging("TeamName", _teamName, value);
					if (!cancelled)
					{
						_teamName = value;
						SetModifiedStatus("TeamName");
						NotifyPropertyChanged("TeamName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sBureau field.
		/// </summary>
		public string Bureau
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _bureau;
			}
			set 
			{
				if (_bureau != value)
				{
					bool cancelled = NotifyPropertyChanging("Bureau", _bureau, value);
					if (!cancelled)
					{
						_bureau = value;
						SetModifiedStatus("Bureau");
						NotifyPropertyChanged("Bureau", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sDivision field.
		/// </summary>
		public string Division
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _division;
			}
			set 
			{
				if (_division != value)
				{
					bool cancelled = NotifyPropertyChanging("Division", _division, value);
					if (!cancelled)
					{
						_division = value;
						SetModifiedStatus("Division");
						NotifyPropertyChanged("Division", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sFunding field.
		/// </summary>
		public string Funding
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _funding;
			}
			set 
			{
				if (_funding != value)
				{
					bool cancelled = NotifyPropertyChanging("Funding", _funding, value);
					if (!cancelled)
					{
						_funding = value;
						SetModifiedStatus("Funding");
						NotifyPropertyChanged("Funding", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sDescription field.
		/// </summary>
		public string Description
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _description;
			}
			set 
			{
				if (_description != value)
				{
					bool cancelled = NotifyPropertyChanging("Description", _description, value);
					if (!cancelled)
					{
						_description = value;
						SetModifiedStatus("Description");
						NotifyPropertyChanged("Description", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sComments field.
		/// </summary>
		public string Comments
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _comments;
			}
			set 
			{
				if (_comments != value)
				{
					bool cancelled = NotifyPropertyChanging("Comments", _comments, value);
					if (!cancelled)
					{
						_comments = value;
						SetModifiedStatus("Comments");
						NotifyPropertyChanged("Comments", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iVendorContactID field.
		/// </summary>
		public long? VendorContactID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vendorContactID;
			}
			set 
			{
				if (_vendorContactID != value)
				{
					bool cancelled = NotifyPropertyChanging("VendorContactID", _vendorContactID, value);
					if (!cancelled)
					{
						_vendorContactID = value;
						SetModifiedStatus("VendorContactID");
						NotifyPropertyChanged("VendorContactID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sVendorPartNumber field.
		/// </summary>
		public string VendorPartNumber
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vendorPartNumber;
			}
			set 
			{
				if (_vendorPartNumber != value)
				{
					bool cancelled = NotifyPropertyChanging("VendorPartNumber", _vendorPartNumber, value);
					if (!cancelled)
					{
						_vendorPartNumber = value;
						SetModifiedStatus("VendorPartNumber");
						NotifyPropertyChanged("VendorPartNumber", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the curPurchasePrice field.
		/// </summary>
		public decimal PurchasePrice
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _purchasePrice;
			}
			set 
			{
				if (_purchasePrice != value)
				{
					bool cancelled = NotifyPropertyChanging("PurchasePrice", _purchasePrice, value);
					if (!cancelled)
					{
						_purchasePrice = value;
						SetModifiedStatus("PurchasePrice");
						NotifyPropertyChanged("PurchasePrice", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of PurchasePrice rendered as a string.
		/// </summary>
		public string PurchasePriceAsString
		{
			get { return _purchasePrice.ToString(); }
		}

		/// <summary>
		/// Property generated from the curTax field.
		/// </summary>
		public decimal Tax
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _tax;
			}
			set 
			{
				if (_tax != value)
				{
					bool cancelled = NotifyPropertyChanging("Tax", _tax, value);
					if (!cancelled)
					{
						_tax = value;
						SetModifiedStatus("Tax");
						NotifyPropertyChanged("Tax", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Tax rendered as a string.
		/// </summary>
		public string TaxAsString
		{
			get { return _tax.ToString(); }
		}

		/// <summary>
		/// Property generated from the curSH field.
		/// </summary>
		public decimal SH
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _sh;
			}
			set 
			{
				if (_sh != value)
				{
					bool cancelled = NotifyPropertyChanging("SH", _sh, value);
					if (!cancelled)
					{
						_sh = value;
						SetModifiedStatus("SH");
						NotifyPropertyChanged("SH", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of SH rendered as a string.
		/// </summary>
		public string SHAsString
		{
			get { return _sh.ToString(); }
		}

		/// <summary>
		/// Property generated from the dtPurchase field.
		/// </summary>
		public DateTime? DatePurchase
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtPurchase;
			}
			set 
			{
				if (_dtPurchase != value)
				{
					bool cancelled = NotifyPropertyChanging("DatePurchase", _dtPurchase, value);
					if (!cancelled)
					{
						_dtPurchase = value;
						SetModifiedStatus("DatePurchase");
						NotifyPropertyChanged("DatePurchase", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sWarranty field.
		/// </summary>
		public string Warranty
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _warranty;
			}
			set 
			{
				if (_warranty != value)
				{
					bool cancelled = NotifyPropertyChanging("Warranty", _warranty, value);
					if (!cancelled)
					{
						_warranty = value;
						SetModifiedStatus("Warranty");
						NotifyPropertyChanged("Warranty", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtReplacement field.
		/// </summary>
		public DateTime? DateReplacement
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtReplacement;
			}
			set 
			{
				if (_dtReplacement != value)
				{
					bool cancelled = NotifyPropertyChanging("DateReplacement", _dtReplacement, value);
					if (!cancelled)
					{
						_dtReplacement = value;
						SetModifiedStatus("DateReplacement");
						NotifyPropertyChanged("DateReplacement", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sVIN field.
		/// </summary>
		public string VIN
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vin;
			}
			set 
			{
				if (_vin != value)
				{
					bool cancelled = NotifyPropertyChanging("VIN", _vin, value);
					if (!cancelled)
					{
						_vin = value;
						SetModifiedStatus("VIN");
						NotifyPropertyChanged("VIN", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bInactive field.
		/// </summary>
		public bool Inactive
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _inactive;
			}
			set 
			{
				if (_inactive != value)
				{
					bool cancelled = NotifyPropertyChanging("Inactive", _inactive, value);
					if (!cancelled)
					{
						_inactive = value;
						SetModifiedStatus("Inactive");
						NotifyPropertyChanged("Inactive", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Inactive rendered as a string.
		/// </summary>
		public string InactiveAsString
		{
			get { return _inactive.ToString(); }
		}

		/// <summary>
		/// Property generated from the dtAdded field.
		/// </summary>
		public DateTime DateAdded
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtAdded;
			}
			set 
			{
				if (_dtAdded != value)
				{
					bool cancelled = NotifyPropertyChanging("DateAdded", _dtAdded, value);
					if (!cancelled)
					{
						_dtAdded = value;
						SetModifiedStatus("DateAdded");
						NotifyPropertyChanged("DateAdded", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sAddedByUser field.
		/// </summary>
		public string AddedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _addedByUser;
			}
			set 
			{
				if (_addedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("AddedByUser", _addedByUser, value);
					if (!cancelled)
					{
						_addedByUser = value;
						SetModifiedStatus("AddedByUser");
						NotifyPropertyChanged("AddedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtUpdated field.
		/// </summary>
		public DateTime DateUpdated
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtUpdated;
			}
			set 
			{
				if (_dtUpdated != value)
				{
					bool cancelled = NotifyPropertyChanging("DateUpdated", _dtUpdated, value);
					if (!cancelled)
					{
						_dtUpdated = value;
						SetModifiedStatus("DateUpdated");
						NotifyPropertyChanged("DateUpdated", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sUpdatedByUser field.
		/// </summary>
		public string UpdatedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _updatedByUser;
			}
			set 
			{
				if (_updatedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("UpdatedByUser", _updatedByUser, value);
					if (!cancelled)
					{
						_updatedByUser = value;
						SetModifiedStatus("UpdatedByUser");
						NotifyPropertyChanged("UpdatedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bRowversion field.
		/// </summary>
		public byte[] Rowversion
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _rowversion;
			}
			set 
			{
				if (_rowversion != value)
				{
					bool cancelled = NotifyPropertyChanging("Rowversion", _rowversion, value);
					if (!cancelled)
					{
						_rowversion = value;
						SetModifiedStatus("Rowversion");
						NotifyPropertyChanged("Rowversion", value);
					}
				}
			}
		}

		/// <summary>
		/// A Equipment with all of this object's original values.
		/// </summary>
		[Newtonsoft.Json.JsonIgnore]
		public Equipment OriginalValues
		{
			get { return _originalValues; }
			set { _originalValues = value; }
		}
		#endregion Public Properties

		#region Public Methods
		/// <summary>
		/// Set the Base Rules on the class.
		/// </summary>
		public void SetBaseRules()
		{
			// Property Required Rules
			this.Rules.Add(new PropertyRequiredCustomRule("EquipID", "The \"Equip ID\" field is required in the Equipment record.", RecordStatus.Modified));
			this.Rules.Add(new PropertyRequiredCustomRule("AgencyID", "The \"Agency ID\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Is4x4", "The \"Is 4x 4\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("MarkedVehicle", "The \"Marked Vehicle\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Motorcycle", "The \"Motorcycle\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("SpecialtyVehicle", "The \"Specialty Vehicle\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("PurchasePrice", "The \"Purchase Price\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Tax", "The \"Tax\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("SH", "The \"SH\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Inactive", "The \"Inactive\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateAdded", "The \"Date Added\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateUpdated", "The \"Date Updated\" field is required in the Equipment record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Rowversion", "The \"Rowversion\" field is required in the Equipment record.", RecordStatus.Modified));

			// Max Length Rules
			this.Rules.Add(new MaxLengthCustomRule("Type", 50, "The maximum length for the \"Type\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Item", 200, "The maximum length for the \"Item\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Make", 100, "The maximum length for the \"Make\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Model", 100, "The maximum length for the \"Model\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Color", 100, "The maximum length for the \"Color\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("LightingSystem", 50, "The maximum length for the \"LightingSystem\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("DepartmentRadio", 50, "The maximum length for the \"DepartmentRadio\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("VehicleID", 50, "The maximum length for the \"VehicleID\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("SerialNum", 100, "The maximum length for the \"SerialNum\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("LicenseNum", 50, "The maximum length for the \"LicenseNum\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("PartNum", 50, "The maximum length for the \"PartNum\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Category", 50, "The maximum length for the \"Category\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("OtherID", 100, "The maximum length for the \"OtherID\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Status", 200, "The maximum length for the \"Status\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Location", 50, "The maximum length for the \"Location\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("TeamName", 200, "The maximum length for the \"TeamName\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Bureau", 100, "The maximum length for the \"Bureau\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Division", 200, "The maximum length for the \"Division\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Funding", 50, "The maximum length for the \"Funding\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("VendorPartNumber", 50, "The maximum length for the \"VendorPartNumber\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Warranty", 300, "The maximum length for the \"Warranty\" field is 300 characters."));
			this.Rules.Add(new MaxLengthCustomRule("VIN", 100, "The maximum length for the \"VIN\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("AddedByUser", 50, "The maximum length for the \"AddedByUser\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("UpdatedByUser", 50, "The maximum length for the \"UpdatedByUser\" field is 50 characters."));

			// Date Range Rules
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateStatus", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateStatus\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateStatus", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateStatus\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DatePurchase", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DatePurchase\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DatePurchase", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DatePurchase\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateReplacement", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateReplacement\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateReplacement", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateReplacement\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateAdded", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateAdded\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateAdded", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateAdded\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateUpdated\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateUpdated\" field."));
		}

		/// <summary>
		/// Returns the broken rules, including any children.
		/// </summary>
		public ClassGenExceptionCollection BrokenRulesIncludingChildren
		{
			get 
			{
				ClassGenExceptionCollection brokenRules = base.BrokenRules;

				brokenRules.AddRange(_equipmentMaintScheduleCollection.BrokenRules);
				brokenRules.AddRange(_equipmentMovementCollection.BrokenRules);

				return brokenRules; 
			}
		}

		/// <summary>
		/// Clone the object as a new instance and pass it back.
		/// </summary>
		/// <returns>A copy of the object.</returns>
		public Equipment Clone()
		{
			Equipment item = base.CloneObjectWithIL<Equipment>(this);
			item.OriginalValues = this.OriginalValues;

			// Do the sub-collections
			#region Sub Collections
			item.Coll_EquipmentMaintSchedule.Clear();		// Clear the collection
			foreach (EquipmentMaintSchedule e in this.Coll_EquipmentMaintSchedule)
			{
				item.Coll_EquipmentMaintSchedule.Add(e);
			}
			item.Coll_EquipmentMovement.Clear();		// Clear the collection
			foreach (EquipmentMovement e in this.Coll_EquipmentMovement)
			{
				item.Coll_EquipmentMovement.Add(e);
			}
			#endregion Sub Collections

			return item;
		}

		/// <summary>
		/// Copy the object - then change the ID field to a new value.
		/// </summary>
		/// <returns>A copy of the object with a new ID.</returns>
		public object CopyWithNewID()
		{
			// Make the copy of the object
			Equipment item = this.Clone();
			
			// Change the ID field
			item.EquipID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			// Do the sub-collections
			#region Sub Collections
			for (int i = item.Coll_EquipmentMaintSchedule.Count - 1; i >= 0; i--)
			{
				item.Coll_EquipmentMaintSchedule[i] = (EquipmentMaintSchedule)item.Coll_EquipmentMaintSchedule[i].CopyWithNewID();
				item.Coll_EquipmentMaintSchedule[i].EquipID = item.EquipID;
			}
			for (int i = item.Coll_EquipmentMovement.Count - 1; i >= 0; i--)
			{
				item.Coll_EquipmentMovement[i] = (EquipmentMovement)item.Coll_EquipmentMovement[i].CopyWithNewID();
				item.Coll_EquipmentMovement[i].EquipID = item.EquipID;
			}
			#endregion Sub Collections

			return item;
		}

		
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				errors.AddRange(this.Get(_equipID));
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject()
		{
			return RefreshObject((int)RefreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (!String.IsNullOrEmpty(this._equipID.ToString()))
			{
				errors.AddRange(this.Get(_equipID));	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Undo any changes that might be done on the object.
		/// </summary>
		public override void UndoChanges()
		{
			// Enumerate the properties
			_equipID = _originalValues.EquipID;
			_agencyID = _originalValues.AgencyID;
			_type = _originalValues.Type;
			_item = _originalValues.Item;
			_year = _originalValues.Year;
			_make = _originalValues.Make;
			_model = _originalValues.Model;
			_parentEquipID = _originalValues.ParentEquipID;
			_color = _originalValues.Color;
			_numDoors = _originalValues.NumDoors;
			_is4x4 = _originalValues.Is4x4;
			_lightingSystem = _originalValues.LightingSystem;
			_departmentRadio = _originalValues.DepartmentRadio;
			_numSpotLights = _originalValues.NumSpotLights;
			_markedVehicle = _originalValues.MarkedVehicle;
			_motorcycle = _originalValues.Motorcycle;
			_specialtyVehicle = _originalValues.SpecialtyVehicle;
			_vehicleID = _originalValues.VehicleID;
			_computerEquipID = _originalValues.ComputerEquipID;
			_serialNum = _originalValues.SerialNum;
			_licenseNum = _originalValues.LicenseNum;
			_mileage = _originalValues.Mileage;
			_roundCount = _originalValues.RoundCount;
			_partNum = _originalValues.PartNum;
			_category = _originalValues.Category;
			_otherID = _originalValues.OtherID;
			_status = _originalValues.Status;
			_dtStatus = _originalValues.DateStatus;
			_contactID = _originalValues.ContactID;
			_location = _originalValues.Location;
			_teamID = _originalValues.TeamID;
			_teamName = _originalValues.TeamName;
			_bureau = _originalValues.Bureau;
			_division = _originalValues.Division;
			_funding = _originalValues.Funding;
			_description = _originalValues.Description;
			_comments = _originalValues.Comments;
			_vendorContactID = _originalValues.VendorContactID;
			_vendorPartNumber = _originalValues.VendorPartNumber;
			_purchasePrice = _originalValues.PurchasePrice;
			_tax = _originalValues.Tax;
			_sh = _originalValues.SH;
			_dtPurchase = _originalValues.DatePurchase;
			_warranty = _originalValues.Warranty;
			_dtReplacement = _originalValues.DateReplacement;
			_vin = _originalValues.VIN;
			_inactive = _originalValues.Inactive;
			_dtAdded = _originalValues.DateAdded;
			_addedByUser = _originalValues.AddedByUser;
			_dtUpdated = _originalValues.DateUpdated;
			_updatedByUser = _originalValues.UpdatedByUser;
			_rowversion = _originalValues.Rowversion;
			
			_changedProps.Clear();		// Clear the changed properties

			this.RecordStatus = _originalValues.RecordStatus;
			this.IsLoaded = _originalValues.IsLoaded;

			// Do the sub-collections
			#region Sub Collections
			this.Coll_EquipmentMaintSchedule.Clear();		// Clear the collection
			foreach (EquipmentMaintSchedule e in _originalValues.Coll_EquipmentMaintSchedule)
			{
				this.Coll_EquipmentMaintSchedule.Add(e);
			}
			this.Coll_EquipmentMovement.Clear();		// Clear the collection
			foreach (EquipmentMovement e in _originalValues.Coll_EquipmentMovement)
			{
				this.Coll_EquipmentMovement.Add(e);
			}
			#endregion Sub Collections
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdate(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate(SqlConnection oConn, SqlTransaction oTrans)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Check to make sure the child collections aren't dirty and we still have a current record status
			if (_recordStatus == RecordStatus.Current)
			{
				if (Coll_EquipmentMaintSchedule.ModifiedRecords.Count > 0 || 
					Coll_EquipmentMaintSchedule.NewRecords.Count > 0 || 
					Coll_EquipmentMaintSchedule.DeletedRecords.Count > 0)
				{
					_recordStatus = RecordStatus.Modified;
				}
				if (Coll_EquipmentMovement.ModifiedRecords.Count > 0 || 
					Coll_EquipmentMovement.NewRecords.Count > 0 || 
					Coll_EquipmentMovement.DeletedRecords.Count > 0)
				{
					_recordStatus = RecordStatus.Modified;
				}
			}
			
			// Check to see if the record is already current - if so, don't do anything.
			if (_recordStatus == RecordStatus.Current) { return errors; }
			
			// Check to see if the record is a delete - if so, delete it from the db.
			if (_recordStatus == RecordStatus.Deleted)
			{
				try
				{
					// Delete the record and all its children
					errors.AddRange(LEAD_BaseObject.DeleteImmediate("tEquipment", "iEquipID", _equipID.ToString(), true));
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				return errors;
			}
			
			// Next, check to see if the record is new.  If so, add it to the system
			if (_recordStatus == RecordStatus.New || _recordStatus == RecordStatus.Modified)
			{
				// Check the Broken Rules collection
				errors.AddRange(BrokenRules);

				// See if you can get an updated timestamp from the table for update
				if (errors.Count == 0 &&
					_recordStatus == RecordStatus.Modified)
				{
					byte[] timeStampFromTable = DAL.GetTimeStampFromTable("tEquipment", "bRowversion",
						"iEquipID = " + this.EquipID + "");
					if (timeStampFromTable != null && 
						DAL.GetValueForSQL(timeStampFromTable) != DAL.GetValueForSQL(_rowversion))
					{
						// Add the error to the error collection
						errors.Add(new ClassGenException("The timestamp fields don't match.", ClassGenExceptionIconType.Critical));
					}
				}

				// If the error collection is not clear, dump out of the function
				if (errors.Count > 0) { return errors; }

				// Set the person who updated/created this record
				_dtUpdated = DAL.GetSQLServerDateTime();
				if (String.IsNullOrEmpty(_addedByUser)) { AddedByUser = Security.CurrentUser.UserName; }
				UpdatedByUser = (!String.IsNullOrEmpty(Security.CurrentUser.UserName) ? Security.CurrentUser.UserName : UpdatedByUser);

				try
				{
					// Do the Exist/Insert check first
					sql = "DECLARE @return_val BIGINT " + 
						"IF NOT EXISTS (SELECT iEquipID FROM tEquipment WHERE iEquipID = @piEquipID) " + 
						"BEGIN" + 
						"    INSERT INTO tEquipment (iAgencyID, sType, sItem, iYear, sMake, sModel, iParentEquipID, sColor, iNumDoors, b4x4, sLightingSystem, sDepartmentRadio, iNumSpotLights, bMarkedVehicle, bMotorcycle, bSpecialtyVehicle, sVehicleID, iComputerEquipID, sSerialNum, sLicenseNum, iMileage, iRoundCount, sPartNum, sCategory, sOtherID, sStatus, dtStatus, iContactID, sLocation, iTeamID, sTeamName, sBureau, sDivision, sFunding, sDescription, sComments, iVendorContactID, sVendorPartNumber, curPurchasePrice, curTax, curSH, dtPurchase, sWarranty, dtReplacement, sVIN, bInactive, sAddedByUser, dtUpdated, sUpdatedByUser) " + 
						"    SELECT @piAgencyID, @psType, @psItem, @piYear, @psMake, @psModel, @piParentEquipID, @psColor, @piNumDoors, @pb4x4, @psLightingSystem, @psDepartmentRadio, @piNumSpotLights, @pbMarkedVehicle, @pbMotorcycle, @pbSpecialtyVehicle, @psVehicleID, @piComputerEquipID, @psSerialNum, @psLicenseNum, @piMileage, @piRoundCount, @psPartNum, @psCategory, @psOtherID, @psStatus, @pdtStatus, @piContactID, @psLocation, @piTeamID, @psTeamName, @psBureau, @psDivision, @psFunding, @psDescription, @psComments, @piVendorContactID, @psVendorPartNumber, @pcurPurchasePrice, @pcurTax, @pcurSH, @pdtPurchase, @psWarranty, @pdtReplacement, @psVIN, @pbInactive, @psAddedByUser, @pdtUpdated, @psUpdatedByUser " + 
						"    SELECT @return_val = SCOPE_IDENTITY() " + 
						"END " + 
						"ELSE " + 
						"BEGIN " + 
						"    UPDATE tEquipment SET " + 
						"        iAgencyID = @piAgencyID" + 
						"        ,b4x4 = @pb4x4" + 
						"        ,bMarkedVehicle = @pbMarkedVehicle" + 
						"        ,bMotorcycle = @pbMotorcycle" + 
						"        ,bSpecialtyVehicle = @pbSpecialtyVehicle" + 
						"        ,curPurchasePrice = @pcurPurchasePrice" + 
						"        ,curTax = @pcurTax" + 
						"        ,curSH = @pcurSH" + 
						"        ,bInactive = @pbInactive" + 
						"        ,dtUpdated = @pdtUpdated" + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Type")) ? "        ,sType = @psType" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Item")) ? "        ,sItem = @psItem" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Year")) ? "        ,iYear = @piYear" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Make")) ? "        ,sMake = @psMake" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Model")) ? "        ,sModel = @psModel" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ParentEquipID")) ? "        ,iParentEquipID = @piParentEquipID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Color")) ? "        ,sColor = @psColor" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NumDoors")) ? "        ,iNumDoors = @piNumDoors" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("LightingSystem")) ? "        ,sLightingSystem = @psLightingSystem" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DepartmentRadio")) ? "        ,sDepartmentRadio = @psDepartmentRadio" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NumSpotLights")) ? "        ,iNumSpotLights = @piNumSpotLights" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VehicleID")) ? "        ,sVehicleID = @psVehicleID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ComputerEquipID")) ? "        ,iComputerEquipID = @piComputerEquipID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("SerialNum")) ? "        ,sSerialNum = @psSerialNum" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("LicenseNum")) ? "        ,sLicenseNum = @psLicenseNum" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Mileage")) ? "        ,iMileage = @piMileage" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("RoundCount")) ? "        ,iRoundCount = @piRoundCount" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("PartNum")) ? "        ,sPartNum = @psPartNum" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Category")) ? "        ,sCategory = @psCategory" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("OtherID")) ? "        ,sOtherID = @psOtherID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Status")) ? "        ,sStatus = @psStatus" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DateStatus")) ? "        ,dtStatus = @pdtStatus" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ContactID")) ? "        ,iContactID = @piContactID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Location")) ? "        ,sLocation = @psLocation" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("TeamID")) ? "        ,iTeamID = @piTeamID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("TeamName")) ? "        ,sTeamName = @psTeamName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Bureau")) ? "        ,sBureau = @psBureau" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Division")) ? "        ,sDivision = @psDivision" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Funding")) ? "        ,sFunding = @psFunding" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Description")) ? "        ,sDescription = @psDescription" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Comments")) ? "        ,sComments = @psComments" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VendorContactID")) ? "        ,iVendorContactID = @piVendorContactID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VendorPartNumber")) ? "        ,sVendorPartNumber = @psVendorPartNumber" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DatePurchase")) ? "        ,dtPurchase = @pdtPurchase" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Warranty")) ? "        ,sWarranty = @psWarranty" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DateReplacement")) ? "        ,dtReplacement = @pdtReplacement" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VIN")) ? "        ,sVIN = @psVIN" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("AddedByUser")) ? "        ,sAddedByUser = @psAddedByUser" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("UpdatedByUser")) ? "        ,sUpdatedByUser = @psUpdatedByUser" : "") + 
						"     WHERE iEquipID = @piEquipID " + 
						"     SELECT @return_val = @piEquipID " + 
						"END; SELECT @return_val AS ret_val, bRowversion FROM tEquipment WHERE iEquipID = @return_val";
					cmd = new SqlCommand(sql);

					cmd.Parameters.Add("@piEquipID", SqlDbType.BigInt).Value = _equipID;
					cmd.Parameters.Add("@piAgencyID", SqlDbType.BigInt).Value = _agencyID;
					cmd.Parameters.Add("@psType", SqlDbType.VarChar, 50).Value = (_type == null ? (object)DBNull.Value : (object)_type);
					cmd.Parameters.Add("@psItem", SqlDbType.VarChar, 200).Value = (_item == null ? (object)DBNull.Value : (object)_item);
					cmd.Parameters.Add("@piYear", SqlDbType.Int).Value = (_year == null ? (object)DBNull.Value : (object)_year);
					cmd.Parameters.Add("@psMake", SqlDbType.VarChar, 100).Value = (_make == null ? (object)DBNull.Value : (object)_make);
					cmd.Parameters.Add("@psModel", SqlDbType.VarChar, 100).Value = (_model == null ? (object)DBNull.Value : (object)_model);
					cmd.Parameters.Add("@piParentEquipID", SqlDbType.BigInt).Value = (_parentEquipID == null ? (object)DBNull.Value : (object)_parentEquipID);
					cmd.Parameters.Add("@psColor", SqlDbType.VarChar, 100).Value = (_color == null ? (object)DBNull.Value : (object)_color);
					cmd.Parameters.Add("@piNumDoors", SqlDbType.Int).Value = (_numDoors == null ? (object)DBNull.Value : (object)_numDoors);
					cmd.Parameters.Add("@pb4x4", SqlDbType.Bit).Value = _is4x4;
					cmd.Parameters.Add("@psLightingSystem", SqlDbType.VarChar, 50).Value = (_lightingSystem == null ? (object)DBNull.Value : (object)_lightingSystem);
					cmd.Parameters.Add("@psDepartmentRadio", SqlDbType.VarChar, 50).Value = (_departmentRadio == null ? (object)DBNull.Value : (object)_departmentRadio);
					cmd.Parameters.Add("@piNumSpotLights", SqlDbType.Int).Value = (_numSpotLights == null ? (object)DBNull.Value : (object)_numSpotLights);
					cmd.Parameters.Add("@pbMarkedVehicle", SqlDbType.Bit).Value = _markedVehicle;
					cmd.Parameters.Add("@pbMotorcycle", SqlDbType.Bit).Value = _motorcycle;
					cmd.Parameters.Add("@pbSpecialtyVehicle", SqlDbType.Bit).Value = _specialtyVehicle;
					cmd.Parameters.Add("@psVehicleID", SqlDbType.VarChar, 50).Value = (_vehicleID == null ? (object)DBNull.Value : (object)_vehicleID);
					cmd.Parameters.Add("@piComputerEquipID", SqlDbType.BigInt).Value = (_computerEquipID == null ? (object)DBNull.Value : (object)_computerEquipID);
					cmd.Parameters.Add("@psSerialNum", SqlDbType.VarChar, 100).Value = (_serialNum == null ? (object)DBNull.Value : (object)_serialNum);
					cmd.Parameters.Add("@psLicenseNum", SqlDbType.VarChar, 50).Value = (_licenseNum == null ? (object)DBNull.Value : (object)_licenseNum);
					cmd.Parameters.Add("@piMileage", SqlDbType.Int).Value = (_mileage == null ? (object)DBNull.Value : (object)_mileage);
					cmd.Parameters.Add("@piRoundCount", SqlDbType.Int).Value = (_roundCount == null ? (object)DBNull.Value : (object)_roundCount);
					cmd.Parameters.Add("@psPartNum", SqlDbType.VarChar, 50).Value = (_partNum == null ? (object)DBNull.Value : (object)_partNum);
					cmd.Parameters.Add("@psCategory", SqlDbType.VarChar, 50).Value = (_category == null ? (object)DBNull.Value : (object)_category);
					cmd.Parameters.Add("@psOtherID", SqlDbType.VarChar, 100).Value = (_otherID == null ? (object)DBNull.Value : (object)_otherID);
					cmd.Parameters.Add("@psStatus", SqlDbType.VarChar, 200).Value = (_status == null ? (object)DBNull.Value : (object)_status);
					cmd.Parameters.Add("@pdtStatus", SqlDbType.DateTime).Value = (_dtStatus == null ? (object)DBNull.Value : (object)_dtStatus);
					cmd.Parameters.Add("@piContactID", SqlDbType.BigInt).Value = (_contactID == null ? (object)DBNull.Value : (object)_contactID);
					cmd.Parameters.Add("@psLocation", SqlDbType.VarChar, 50).Value = (_location == null ? (object)DBNull.Value : (object)_location);
					cmd.Parameters.Add("@piTeamID", SqlDbType.BigInt).Value = (_teamID == null ? (object)DBNull.Value : (object)_teamID);
					cmd.Parameters.Add("@psTeamName", SqlDbType.VarChar, 200).Value = (_teamName == null ? (object)DBNull.Value : (object)_teamName);
					cmd.Parameters.Add("@psBureau", SqlDbType.VarChar, 100).Value = (_bureau == null ? (object)DBNull.Value : (object)_bureau);
					cmd.Parameters.Add("@psDivision", SqlDbType.VarChar, 200).Value = (_division == null ? (object)DBNull.Value : (object)_division);
					cmd.Parameters.Add("@psFunding", SqlDbType.VarChar, 50).Value = (_funding == null ? (object)DBNull.Value : (object)_funding);
					cmd.Parameters.Add("@psDescription", SqlDbType.Text).Value = (_description == null ? (object)DBNull.Value : (object)_description);
					cmd.Parameters.Add("@psComments", SqlDbType.Text).Value = (_comments == null ? (object)DBNull.Value : (object)_comments);
					cmd.Parameters.Add("@piVendorContactID", SqlDbType.BigInt).Value = (_vendorContactID == null ? (object)DBNull.Value : (object)_vendorContactID);
					cmd.Parameters.Add("@psVendorPartNumber", SqlDbType.VarChar, 50).Value = (_vendorPartNumber == null ? (object)DBNull.Value : (object)_vendorPartNumber);
					cmd.Parameters.Add("@pcurPurchasePrice", SqlDbType.Decimal).Value = _purchasePrice;
					cmd.Parameters.Add("@pcurTax", SqlDbType.Decimal).Value = _tax;
					cmd.Parameters.Add("@pcurSH", SqlDbType.Decimal).Value = _sh;
					cmd.Parameters.Add("@pdtPurchase", SqlDbType.DateTime).Value = (_dtPurchase == null ? (object)DBNull.Value : (object)_dtPurchase);
					cmd.Parameters.Add("@psWarranty", SqlDbType.VarChar, 300).Value = (_warranty == null ? (object)DBNull.Value : (object)_warranty);
					cmd.Parameters.Add("@pdtReplacement", SqlDbType.DateTime).Value = (_dtReplacement == null ? (object)DBNull.Value : (object)_dtReplacement);
					cmd.Parameters.Add("@psVIN", SqlDbType.VarChar, 100).Value = (_vin == null ? (object)DBNull.Value : (object)_vin);
					cmd.Parameters.Add("@pbInactive", SqlDbType.Bit).Value = _inactive;
					cmd.Parameters.Add("@psAddedByUser", SqlDbType.VarChar, 50).Value = (_addedByUser == null ? (object)DBNull.Value : (object)_addedByUser);
					cmd.Parameters.Add("@pdtUpdated", SqlDbType.DateTime).Value = _dtUpdated;
					cmd.Parameters.Add("@psUpdatedByUser", SqlDbType.VarChar, 50).Value = (_updatedByUser == null ? (object)DBNull.Value : (object)_updatedByUser);

					cmd.Transaction = oTrans;		// Set the transaction on the command

					dt = DAL.SQLExecDataTable(cmd, oConn);
					foreach (DataRow row in dt.Rows)
					{
						// Get the old key field value to figure out if we need to update it
						long oldRecID = _equipID;

						_equipID = (long)row["ret_val"];
						_rowversion = (byte[])(row["bRowversion"]);

						// Go through the sub collections and update the records
						foreach (EquipmentMaintSchedule e in Coll_EquipmentMaintSchedule) { if (e.EquipID == oldRecID) { e.EquipID = _equipID; } }
						foreach (EquipmentMovement e in Coll_EquipmentMovement) { if (e.EquipID == oldRecID) { e.EquipID = _equipID; } }
					}
					dt.Dispose();		// Kill off the datatable
					
					// Add the update methods for all the sub collections
					#region Sub Collections
					errors.AddRange(Coll_EquipmentMaintSchedule.AddUpdateAll(oConn, oTrans));
					errors.AddRange(Coll_EquipmentMovement.AddUpdateAll(oConn, oTrans));
					#endregion Sub Collections
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				if (errors.CriticalExceptionCount == 0)
				{
					_recordStatus = RecordStatus.Current;		// Set the record status to current after a successful update
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get the record specified on the Key Fields in the table.
		/// </summary>
		/// <param name="equipID">A key field used to find the correct record.</param>
		/// <param name="includeParentPopulation">Whether or not to include values derived from a parent table.</param>
		public ClassGenExceptionCollection Get(long equipID, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlCommand cmd = null;
			string sql = string.Empty;
			DataTable dt = null;
			
			try
			{
				sql = "SELECT [E].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tEquipment [E] " + 
					"WHERE [E].[iEquipID] = @piEquipID " + 
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piEquipID", SqlDbType.BigInt).Value = equipID;
				dt = DAL.SQLExecDataTable(cmd);

				foreach (DataRow row in dt.Rows)
				{
					// Call the get from data row method
					errors.AddRange(this.Get(row, includeParentPopulation));
				}

				dt.Dispose();		// Dispose of the datatable
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified based on the Key Fields in the table
		/// </summary>
		/// <param name="equipID">A key field used to find the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(long equipID)
		{
			return Get(equipID, false);		// Get the item
		}

		/// <summary>
		/// Populate the object using the datarow passed in...
		/// </summary>
		/// <param name="row">The DataRow to populate the object from.</param>
		/// <param name="includeParentPopulation">Whether to include data generated from parent tables.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				// Enumerate through the fields and set up the object
				_recordStatus = RecordStatus.Current;
				_isLoaded = false;
				if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
				{
					_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
				}
				else
				{
					_dateTimeObjectPopulated = DateTime.Now;
				}
				DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
				
				_equipID = long.Parse(row["iEquipID"] != DBNull.Value ? row["iEquipID"].ToString() : "0");
				_agencyID = long.Parse(row["iAgencyID"] != DBNull.Value ? row["iAgencyID"].ToString() : "0");
				_type = (row["sType"] != DBNull.Value ? _type = row["sType"].ToString() : null);
				_item = (row["sItem"] != DBNull.Value ? _item = row["sItem"].ToString() : null);
				_year = (row["iYear"] != DBNull.Value ? _year = int.Parse(row["iYear"].ToString()) : null);
				
				_make = (row["sMake"] != DBNull.Value ? _make = row["sMake"].ToString() : null);
				_model = (row["sModel"] != DBNull.Value ? _model = row["sModel"].ToString() : null);
				_parentEquipID = (row["iParentEquipID"] != DBNull.Value ? _parentEquipID = long.Parse(row["iParentEquipID"].ToString()) : null);
				_color = (row["sColor"] != DBNull.Value ? _color = row["sColor"].ToString() : null);
				_numDoors = (row["iNumDoors"] != DBNull.Value ? _numDoors = int.Parse(row["iNumDoors"].ToString()) : null);
				
				_is4x4 = bool.Parse(row["b4x4"] != DBNull.Value ? row["b4x4"].ToString() : "false");
				_lightingSystem = (row["sLightingSystem"] != DBNull.Value ? _lightingSystem = row["sLightingSystem"].ToString() : null);
				_departmentRadio = (row["sDepartmentRadio"] != DBNull.Value ? _departmentRadio = row["sDepartmentRadio"].ToString() : null);
				_numSpotLights = (row["iNumSpotLights"] != DBNull.Value ? _numSpotLights = int.Parse(row["iNumSpotLights"].ToString()) : null);
				_markedVehicle = bool.Parse(row["bMarkedVehicle"] != DBNull.Value ? row["bMarkedVehicle"].ToString() : "false");
				
				_motorcycle = bool.Parse(row["bMotorcycle"] != DBNull.Value ? row["bMotorcycle"].ToString() : "false");
				_specialtyVehicle = bool.Parse(row["bSpecialtyVehicle"] != DBNull.Value ? row["bSpecialtyVehicle"].ToString() : "false");
				_vehicleID = (row["sVehicleID"] != DBNull.Value ? _vehicleID = row["sVehicleID"].ToString() : null);
				_computerEquipID = (row["iComputerEquipID"] != DBNull.Value ? _computerEquipID = long.Parse(row["iComputerEquipID"].ToString()) : null);
				_serialNum = (row["sSerialNum"] != DBNull.Value ? _serialNum = row["sSerialNum"].ToString() : null);
				
				_licenseNum = (row["sLicenseNum"] != DBNull.Value ? _licenseNum = row["sLicenseNum"].ToString() : null);
				_mileage = (row["iMileage"] != DBNull.Value ? _mileage = int.Parse(row["iMileage"].ToString()) : null);
				_roundCount = (row["iRoundCount"] != DBNull.Value ? _roundCount = int.Parse(row["iRoundCount"].ToString()) : null);
				_partNum = (row["sPartNum"] != DBNull.Value ? _partNum = row["sPartNum"].ToString() : null);
				_category = (row["sCategory"] != DBNull.Value ? _category = row["sCategory"].ToString() : null);
				
				_otherID = (row["sOtherID"] != DBNull.Value ? _otherID = row["sOtherID"].ToString() : null);
				_status = (row["sStatus"] != DBNull.Value ? _status = row["sStatus"].ToString() : null);
				_dtStatus = (row["dtStatus"] != DBNull.Value ? _dtStatus = (DateTime)row["dtStatus"] : null);
				_contactID = (row["iContactID"] != DBNull.Value ? _contactID = long.Parse(row["iContactID"].ToString()) : null);
				_location = (row["sLocation"] != DBNull.Value ? _location = row["sLocation"].ToString() : null);
				
				_teamID = (row["iTeamID"] != DBNull.Value ? _teamID = long.Parse(row["iTeamID"].ToString()) : null);
				_teamName = (row["sTeamName"] != DBNull.Value ? _teamName = row["sTeamName"].ToString() : null);
				_bureau = (row["sBureau"] != DBNull.Value ? _bureau = row["sBureau"].ToString() : null);
				_division = (row["sDivision"] != DBNull.Value ? _division = row["sDivision"].ToString() : null);
				_funding = (row["sFunding"] != DBNull.Value ? _funding = row["sFunding"].ToString() : null);
				
				_description = (row["sDescription"] != DBNull.Value ? _description = row["sDescription"].ToString() : null);
				_comments = (row["sComments"] != DBNull.Value ? _comments = row["sComments"].ToString() : null);
				_vendorContactID = (row["iVendorContactID"] != DBNull.Value ? _vendorContactID = long.Parse(row["iVendorContactID"].ToString()) : null);
				_vendorPartNumber = (row["sVendorPartNumber"] != DBNull.Value ? _vendorPartNumber = row["sVendorPartNumber"].ToString() : null);
				_purchasePrice = decimal.Parse(row["curPurchasePrice"] != DBNull.Value ? row["curPurchasePrice"].ToString() : "0");
				
				_tax = decimal.Parse(row["curTax"] != DBNull.Value ? row["curTax"].ToString() : "0");
				_sh = decimal.Parse(row["curSH"] != DBNull.Value ? row["curSH"].ToString() : "0");
				_dtPurchase = (row["dtPurchase"] != DBNull.Value ? _dtPurchase = (DateTime)row["dtPurchase"] : null);
				_warranty = (row["sWarranty"] != DBNull.Value ? _warranty = row["sWarranty"].ToString() : null);
				_dtReplacement = (row["dtReplacement"] != DBNull.Value ? _dtReplacement = (DateTime)row["dtReplacement"] : null);
				
				_vin = (row["sVIN"] != DBNull.Value ? _vin = row["sVIN"].ToString() : null);
				_inactive = bool.Parse(row["bInactive"] != DBNull.Value ? row["bInactive"].ToString() : "false");
				_dtAdded = (row["dtAdded"] != DBNull.Value ? (DateTime)row["dtAdded"] : new DateTime(1900, 1, 1));
				_addedByUser = (row["sAddedByUser"] != DBNull.Value ? _addedByUser = row["sAddedByUser"].ToString() : null);
				_dtUpdated = (row["dtUpdated"] != DBNull.Value ? (DateTime)row["dtUpdated"] : new DateTime(1900, 1, 1));
				
				_updatedByUser = (row["sUpdatedByUser"] != DBNull.Value ? _updatedByUser = row["sUpdatedByUser"].ToString() : null);
				_rowversion = (byte[])(row["bRowversion"] != DBNull.Value ? (object)row["bRowversion"] : (object)null);

				_isLoaded = true;

				// Make a copy of the object with original values
				_originalValues = this.Clone();
			}
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified from the passed datarow.
		/// </summary>
		/// <param name="row">The DataRow used to determine the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row)
		{
			return Get(row, false);		// Get the item
		}
		
		#region Get Child Collections
		/// <summary>
		/// Get all children for the EquipmentMaintSchedule class.
		/// </summary>
		public void GetChildren_EquipmentMaintSchedule()
		{
			this.Coll_EquipmentMaintSchedule.Clear();		// EquipmentMaintSchedule
			this.Coll_EquipmentMaintSchedule.GetFromDBByEquipID(_equipID);
			foreach (EquipmentMaintSchedule item in this.Coll_EquipmentMaintSchedule)
			{
				item.EquipmentItem = this;
				item.EquipmentItem.IsLoaded = true;
				item.RecordStatus = RecordStatus.Current;
			}
		}

		/// <summary>
		/// Get all children for the EquipmentMovement class.
		/// </summary>
		public void GetChildren_EquipmentMovement()
		{
			this.Coll_EquipmentMovement.Clear();		// EquipmentMovement
			this.Coll_EquipmentMovement.GetFromDBByEquipID(_equipID);
			foreach (EquipmentMovement item in this.Coll_EquipmentMovement)
			{
				item.EquipmentItem = this;
				item.EquipmentItem.IsLoaded = true;
				item.RecordStatus = RecordStatus.Current;
			}
		}
		#endregion Get Child Collections

		#region Child Collections

		/// <summary>
		/// Run this method to delete all the child collections.
		/// </summary>
		/// <returns>The number of records affected by the delete.</returns>
		public ClassGenExceptionCollection DeleteAllChildCollections()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Delete the record
			errors.AddRange(LEAD_BaseObject.DeleteImmediate("tEquipment", "iEquipID", _equipID.ToString(), false));
			
			return errors;
		}
		#endregion Child Collections

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="dt">The datatable to use as a template.</param>
		/// <returns>A new datarow.</returns>
		public DataRow ToDataRow(DataTable dt)
		{
			// Generate and return a data row
			return ToDataRowWithIL<Equipment>(this, dt);
		}

		#endregion Public Methods

		#region Public Static Values

		// Main Class - Equipment

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_EquipID = "EquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AgencyID = "AgencyID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Type = "Type";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Item = "Item";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Year = "Year";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Make = "Make";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Model = "Model";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ParentEquipID = "ParentEquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Color = "Color";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NumDoors = "NumDoors";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Is4x4 = "Is4x4";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_LightingSystem = "LightingSystem";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DepartmentRadio = "DepartmentRadio";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NumSpotLights = "NumSpotLights";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_MarkedVehicle = "MarkedVehicle";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Motorcycle = "Motorcycle";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_SpecialtyVehicle = "SpecialtyVehicle";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VehicleID = "VehicleID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ComputerEquipID = "ComputerEquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_SerialNum = "SerialNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_LicenseNum = "LicenseNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Mileage = "Mileage";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_RoundCount = "RoundCount";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_PartNum = "PartNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Category = "Category";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_OtherID = "OtherID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Status = "Status";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateStatus = "DateStatus";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ContactID = "ContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Location = "Location";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_TeamID = "TeamID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_TeamName = "TeamName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Bureau = "Bureau";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Division = "Division";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Funding = "Funding";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Description = "Description";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Comments = "Comments";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VendorContactID = "VendorContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VendorPartNumber = "VendorPartNumber";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_PurchasePrice = "PurchasePrice";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Tax = "Tax";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_SH = "SH";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DatePurchase = "DatePurchase";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Warranty = "Warranty";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateReplacement = "DateReplacement";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VIN = "VIN";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Inactive = "Inactive";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateAdded = "DateAdded";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AddedByUser = "AddedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateUpdated = "DateUpdated";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_UpdatedByUser = "UpdatedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Rowversion = "Rowversion";

		#endregion Public Static Values

		#region Public Static Methods
		/// <summary>
		/// Get a DB Field name from the field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(EquipmentField field)
		{
			string fldName = string.Empty;

			// Add the elements
			switch (field)
			{
				case EquipmentField.EquipID: fldName = "iEquipID"; break;
				case EquipmentField.AgencyID: fldName = "iAgencyID"; break;
				case EquipmentField.Type: fldName = "sType"; break;
				case EquipmentField.Item: fldName = "sItem"; break;
				case EquipmentField.Year: fldName = "iYear"; break;
				case EquipmentField.Make: fldName = "sMake"; break;
				case EquipmentField.Model: fldName = "sModel"; break;
				case EquipmentField.ParentEquipID: fldName = "iParentEquipID"; break;
				case EquipmentField.Color: fldName = "sColor"; break;
				case EquipmentField.NumDoors: fldName = "iNumDoors"; break;
				case EquipmentField.Is4x4: fldName = "b4x4"; break;
				case EquipmentField.LightingSystem: fldName = "sLightingSystem"; break;
				case EquipmentField.DepartmentRadio: fldName = "sDepartmentRadio"; break;
				case EquipmentField.NumSpotLights: fldName = "iNumSpotLights"; break;
				case EquipmentField.MarkedVehicle: fldName = "bMarkedVehicle"; break;
				case EquipmentField.Motorcycle: fldName = "bMotorcycle"; break;
				case EquipmentField.SpecialtyVehicle: fldName = "bSpecialtyVehicle"; break;
				case EquipmentField.VehicleID: fldName = "sVehicleID"; break;
				case EquipmentField.ComputerEquipID: fldName = "iComputerEquipID"; break;
				case EquipmentField.SerialNum: fldName = "sSerialNum"; break;
				case EquipmentField.LicenseNum: fldName = "sLicenseNum"; break;
				case EquipmentField.Mileage: fldName = "iMileage"; break;
				case EquipmentField.RoundCount: fldName = "iRoundCount"; break;
				case EquipmentField.PartNum: fldName = "sPartNum"; break;
				case EquipmentField.Category: fldName = "sCategory"; break;
				case EquipmentField.OtherID: fldName = "sOtherID"; break;
				case EquipmentField.Status: fldName = "sStatus"; break;
				case EquipmentField.DateStatus: fldName = "dtStatus"; break;
				case EquipmentField.ContactID: fldName = "iContactID"; break;
				case EquipmentField.Location: fldName = "sLocation"; break;
				case EquipmentField.TeamID: fldName = "iTeamID"; break;
				case EquipmentField.TeamName: fldName = "sTeamName"; break;
				case EquipmentField.Bureau: fldName = "sBureau"; break;
				case EquipmentField.Division: fldName = "sDivision"; break;
				case EquipmentField.Funding: fldName = "sFunding"; break;
				case EquipmentField.Description: fldName = "sDescription"; break;
				case EquipmentField.Comments: fldName = "sComments"; break;
				case EquipmentField.VendorContactID: fldName = "iVendorContactID"; break;
				case EquipmentField.VendorPartNumber: fldName = "sVendorPartNumber"; break;
				case EquipmentField.PurchasePrice: fldName = "curPurchasePrice"; break;
				case EquipmentField.Tax: fldName = "curTax"; break;
				case EquipmentField.SH: fldName = "curSH"; break;
				case EquipmentField.DatePurchase: fldName = "dtPurchase"; break;
				case EquipmentField.Warranty: fldName = "sWarranty"; break;
				case EquipmentField.DateReplacement: fldName = "dtReplacement"; break;
				case EquipmentField.VIN: fldName = "sVIN"; break;
				case EquipmentField.Inactive: fldName = "bInactive"; break;
				case EquipmentField.DateAdded: fldName = "dtAdded"; break;
				case EquipmentField.AddedByUser: fldName = "sAddedByUser"; break;
				case EquipmentField.DateUpdated: fldName = "dtUpdated"; break;
				case EquipmentField.UpdatedByUser: fldName = "sUpdatedByUser"; break;
				case EquipmentField.Rowversion: fldName = "bRowversion"; break;
			}

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// Get a field from the DB Field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(string field)
		{
			string fldName = null;

			// Add the elements
			if (field.ToLower() == "iequipid") { fldName = EquipmentField.EquipID.ToString(); }
			else if (field.ToLower() == "iagencyid") { fldName = EquipmentField.AgencyID.ToString(); }
			else if (field.ToLower() == "stype") { fldName = EquipmentField.Type.ToString(); }
			else if (field.ToLower() == "sitem") { fldName = EquipmentField.Item.ToString(); }
			else if (field.ToLower() == "iyear") { fldName = EquipmentField.Year.ToString(); }
			else if (field.ToLower() == "smake") { fldName = EquipmentField.Make.ToString(); }
			else if (field.ToLower() == "smodel") { fldName = EquipmentField.Model.ToString(); }
			else if (field.ToLower() == "iparentequipid") { fldName = EquipmentField.ParentEquipID.ToString(); }
			else if (field.ToLower() == "scolor") { fldName = EquipmentField.Color.ToString(); }
			else if (field.ToLower() == "inumdoors") { fldName = EquipmentField.NumDoors.ToString(); }
			else if (field.ToLower() == "b4x4") { fldName = EquipmentField.Is4x4.ToString(); }
			else if (field.ToLower() == "slightingsystem") { fldName = EquipmentField.LightingSystem.ToString(); }
			else if (field.ToLower() == "sdepartmentradio") { fldName = EquipmentField.DepartmentRadio.ToString(); }
			else if (field.ToLower() == "inumspotlights") { fldName = EquipmentField.NumSpotLights.ToString(); }
			else if (field.ToLower() == "bmarkedvehicle") { fldName = EquipmentField.MarkedVehicle.ToString(); }
			else if (field.ToLower() == "bmotorcycle") { fldName = EquipmentField.Motorcycle.ToString(); }
			else if (field.ToLower() == "bspecialtyvehicle") { fldName = EquipmentField.SpecialtyVehicle.ToString(); }
			else if (field.ToLower() == "svehicleid") { fldName = EquipmentField.VehicleID.ToString(); }
			else if (field.ToLower() == "icomputerequipid") { fldName = EquipmentField.ComputerEquipID.ToString(); }
			else if (field.ToLower() == "sserialnum") { fldName = EquipmentField.SerialNum.ToString(); }
			else if (field.ToLower() == "slicensenum") { fldName = EquipmentField.LicenseNum.ToString(); }
			else if (field.ToLower() == "imileage") { fldName = EquipmentField.Mileage.ToString(); }
			else if (field.ToLower() == "iroundcount") { fldName = EquipmentField.RoundCount.ToString(); }
			else if (field.ToLower() == "spartnum") { fldName = EquipmentField.PartNum.ToString(); }
			else if (field.ToLower() == "scategory") { fldName = EquipmentField.Category.ToString(); }
			else if (field.ToLower() == "sotherid") { fldName = EquipmentField.OtherID.ToString(); }
			else if (field.ToLower() == "sstatus") { fldName = EquipmentField.Status.ToString(); }
			else if (field.ToLower() == "dtstatus") { fldName = EquipmentField.DateStatus.ToString(); }
			else if (field.ToLower() == "icontactid") { fldName = EquipmentField.ContactID.ToString(); }
			else if (field.ToLower() == "slocation") { fldName = EquipmentField.Location.ToString(); }
			else if (field.ToLower() == "iteamid") { fldName = EquipmentField.TeamID.ToString(); }
			else if (field.ToLower() == "steamname") { fldName = EquipmentField.TeamName.ToString(); }
			else if (field.ToLower() == "sbureau") { fldName = EquipmentField.Bureau.ToString(); }
			else if (field.ToLower() == "sdivision") { fldName = EquipmentField.Division.ToString(); }
			else if (field.ToLower() == "sfunding") { fldName = EquipmentField.Funding.ToString(); }
			else if (field.ToLower() == "sdescription") { fldName = EquipmentField.Description.ToString(); }
			else if (field.ToLower() == "scomments") { fldName = EquipmentField.Comments.ToString(); }
			else if (field.ToLower() == "ivendorcontactid") { fldName = EquipmentField.VendorContactID.ToString(); }
			else if (field.ToLower() == "svendorpartnumber") { fldName = EquipmentField.VendorPartNumber.ToString(); }
			else if (field.ToLower() == "curpurchaseprice") { fldName = EquipmentField.PurchasePrice.ToString(); }
			else if (field.ToLower() == "curtax") { fldName = EquipmentField.Tax.ToString(); }
			else if (field.ToLower() == "cursh") { fldName = EquipmentField.SH.ToString(); }
			else if (field.ToLower() == "dtpurchase") { fldName = EquipmentField.DatePurchase.ToString(); }
			else if (field.ToLower() == "swarranty") { fldName = EquipmentField.Warranty.ToString(); }
			else if (field.ToLower() == "dtreplacement") { fldName = EquipmentField.DateReplacement.ToString(); }
			else if (field.ToLower() == "svin") { fldName = EquipmentField.VIN.ToString(); }
			else if (field.ToLower() == "binactive") { fldName = EquipmentField.Inactive.ToString(); }
			else if (field.ToLower() == "dtadded") { fldName = EquipmentField.DateAdded.ToString(); }
			else if (field.ToLower() == "saddedbyuser") { fldName = EquipmentField.AddedByUser.ToString(); }
			else if (field.ToLower() == "dtupdated") { fldName = EquipmentField.DateUpdated.ToString(); }
			else if (field.ToLower() == "supdatedbyuser") { fldName = EquipmentField.UpdatedByUser.ToString(); }
			else if (field.ToLower() == "browversion") { fldName = EquipmentField.Rowversion.ToString(); }

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// The database table name.
		/// </summary>
		public static readonly string DB_TableName = "tEquipment"; 

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(EquipmentField field)
		{
			return GetDistinctFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(EquipmentField field, string whereClause)
		{
			string fldName = GetDBFieldName(field);

			if (String.IsNullOrEmpty(fldName)) { return new List<string>(); }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			List<string> rtv = new List<string>();

			try
			{
				sql = "SELECT DISTINCT LTRIM(RTRIM([" + fldName + "])) " +
						"FROM [tEquipment] " +
						"WHERE [" + fldName + "] IS NOT NULL AND LTRIM(RTRIM([" + fldName + "])) <> '' " + 
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") + 
						"ORDER BY LTRIM(RTRIM([" + fldName + "]))";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (fldName.ToLower().EndsWith("guid"))
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString().ToLower());
					}
				}
				else
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString());
					}
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="fields">The fields to get.</param>
		/// <param name="fieldAliases">The field aliases.</param>
		/// <param name="sortedFields">The sorted fields.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A datatable of values from the collection (sorted by value).</returns>
		public static DataTable GetDistinctFromDBAsDataTable(EquipmentField[] fields, 
			string[] fieldAliases,
			EquipmentField[] sortedFields, 
			string whereClause)
		{
			Dictionary<EquipmentField, string> fieldNames = new Dictionary<EquipmentField, string>();
			StringBuilder sbFields = new StringBuilder();
			StringBuilder sbWhereClause = new StringBuilder();
			int fieldCount = 0;
			foreach (EquipmentField fld in fields)
			{
				if (!fieldNames.ContainsKey(fld))
				{
					fieldNames.Add(fld, GetDBFieldName(fld));
					sbWhereClause.Append((sbWhereClause.ToString().Trim().Length > 0 ? " AND " : " WHERE ") +
						fieldNames[fld] + " IS NOT NULL AND LTRIM(RTRIM(" + fieldNames[fld] + ")) <> '' ");
				}
				if (String.IsNullOrEmpty(fieldNames[fld])) { return null; }
				sbFields.Append((sbFields.ToString().Trim().Length > 0 ? "," : "") + "[" + fieldNames[fld] + "]" + 
					(fieldAliases.Length > fieldCount ? " AS [" + fieldAliases[fieldCount] + "] " : ""));
				fieldCount++;
			}

			Dictionary<EquipmentField, string> sortedFieldNames = new Dictionary<EquipmentField, string>();
			StringBuilder sbSortedFields = new StringBuilder();
			foreach (EquipmentField fld in sortedFields)
			{
				if (!sortedFieldNames.ContainsKey(fld))
				{
					sortedFieldNames.Add(fld, GetDBFieldName(fld));
				}
				if (String.IsNullOrEmpty(sortedFieldNames[fld])) { return null; }
				sbSortedFields.Append((sbSortedFields.ToString().Trim().Length > 0 ? "," : "") + sortedFieldNames[fld]);
			}

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT DISTINCT " + sbFields.ToString() + " " +
						"FROM tEquipment " +
						sbWhereClause.ToString() + " " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						(!String.IsNullOrEmpty(sbSortedFields.ToString()) ? " ORDER BY " + sbSortedFields.ToString() + "" : "");
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return dt;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(EquipmentMinMaxDateField field)
		{
			return GetMinDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(EquipmentMinMaxDateField field, string whereClause)
		{
			EquipmentField fld = (EquipmentField)Enum.Parse(typeof(EquipmentField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tEquipment] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(EquipmentMinMaxDateField field)
		{
			return GetMaxDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(EquipmentMinMaxDateField field, string whereClause)
		{
			EquipmentField fld = (EquipmentField)Enum.Parse(typeof(EquipmentField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tEquipment] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(EquipmentMinMaxNumberField field)
		{
			return GetMinNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(EquipmentMinMaxNumberField field, string whereClause)
		{
			EquipmentField fld = (EquipmentField)Enum.Parse(typeof(EquipmentField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tEquipment] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(EquipmentMinMaxNumberField field)
		{
			return GetMaxNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(EquipmentMinMaxNumberField field, string whereClause)
		{
			EquipmentField fld = (EquipmentField)Enum.Parse(typeof(EquipmentField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tEquipment] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Copy the object - then change the id field to a new value
		/// </summary>
		/// <param name="source">The object to copy.</param>
		/// <returns>A copy of the object, with a new ID.</returns>
		public static Equipment CopyFrom(Equipment source)
		{
			// Make the copy of the object
			Equipment item = source.Clone();
			
			// Change the ID field
			item.EquipID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			// Do the sub-collections
			#region Sub Collections
			for (int i = item.Coll_EquipmentMaintSchedule.Count - 1; i >= 0; i--)
			{
				item.Coll_EquipmentMaintSchedule[i] = (EquipmentMaintSchedule)item.Coll_EquipmentMaintSchedule[i].CopyWithNewID();
				item.Coll_EquipmentMaintSchedule[i].EquipID = item.EquipID;
			}
			for (int i = item.Coll_EquipmentMovement.Count - 1; i >= 0; i--)
			{
				item.Coll_EquipmentMovement[i] = (EquipmentMovement)item.Coll_EquipmentMovement[i].CopyWithNewID();
				item.Coll_EquipmentMovement[i].EquipID = item.EquipID;
			}
			#endregion Sub Collections

			return item;
		}

		/// <summary>
		/// Convert the passed string into a db friendly string (one that 
		/// doesn't include the names in the object, but rather the names 
		/// from the fields from the database).
		/// </summary>
		/// <param name="dbString">The string to process.</param>
		/// <returns>The converted string.</returns>
		public static string ToDBFriendly(string dbString)
		{
			string rtv = dbString;

			rtv = rtv.Replace("[EquipID]", "[iEquipID]");
			rtv = rtv.Replace("[AgencyID]", "[iAgencyID]");
			rtv = rtv.Replace("[Type]", "[sType]");
			rtv = rtv.Replace("[Item]", "[sItem]");
			rtv = rtv.Replace("[Year]", "[iYear]");
			rtv = rtv.Replace("[Make]", "[sMake]");
			rtv = rtv.Replace("[Model]", "[sModel]");
			rtv = rtv.Replace("[ParentEquipID]", "[iParentEquipID]");
			rtv = rtv.Replace("[Color]", "[sColor]");
			rtv = rtv.Replace("[NumDoors]", "[iNumDoors]");
			rtv = rtv.Replace("[Is4x4]", "[b4x4]");
			rtv = rtv.Replace("[LightingSystem]", "[sLightingSystem]");
			rtv = rtv.Replace("[DepartmentRadio]", "[sDepartmentRadio]");
			rtv = rtv.Replace("[NumSpotLights]", "[iNumSpotLights]");
			rtv = rtv.Replace("[MarkedVehicle]", "[bMarkedVehicle]");
			rtv = rtv.Replace("[Motorcycle]", "[bMotorcycle]");
			rtv = rtv.Replace("[SpecialtyVehicle]", "[bSpecialtyVehicle]");
			rtv = rtv.Replace("[VehicleID]", "[sVehicleID]");
			rtv = rtv.Replace("[ComputerEquipID]", "[iComputerEquipID]");
			rtv = rtv.Replace("[SerialNum]", "[sSerialNum]");
			rtv = rtv.Replace("[LicenseNum]", "[sLicenseNum]");
			rtv = rtv.Replace("[Mileage]", "[iMileage]");
			rtv = rtv.Replace("[RoundCount]", "[iRoundCount]");
			rtv = rtv.Replace("[PartNum]", "[sPartNum]");
			rtv = rtv.Replace("[Category]", "[sCategory]");
			rtv = rtv.Replace("[OtherID]", "[sOtherID]");
			rtv = rtv.Replace("[Status]", "[sStatus]");
			rtv = rtv.Replace("[DateStatus]", "[dtStatus]");
			rtv = rtv.Replace("[ContactID]", "[iContactID]");
			rtv = rtv.Replace("[Location]", "[sLocation]");
			rtv = rtv.Replace("[TeamID]", "[iTeamID]");
			rtv = rtv.Replace("[TeamName]", "[sTeamName]");
			rtv = rtv.Replace("[Bureau]", "[sBureau]");
			rtv = rtv.Replace("[Division]", "[sDivision]");
			rtv = rtv.Replace("[Funding]", "[sFunding]");
			rtv = rtv.Replace("[Description]", "[sDescription]");
			rtv = rtv.Replace("[Comments]", "[sComments]");
			rtv = rtv.Replace("[VendorContactID]", "[iVendorContactID]");
			rtv = rtv.Replace("[VendorPartNumber]", "[sVendorPartNumber]");
			rtv = rtv.Replace("[PurchasePrice]", "[curPurchasePrice]");
			rtv = rtv.Replace("[Tax]", "[curTax]");
			rtv = rtv.Replace("[SH]", "[curSH]");
			rtv = rtv.Replace("[DatePurchase]", "[dtPurchase]");
			rtv = rtv.Replace("[Warranty]", "[sWarranty]");
			rtv = rtv.Replace("[DateReplacement]", "[dtReplacement]");
			rtv = rtv.Replace("[VIN]", "[sVIN]");
			rtv = rtv.Replace("[Inactive]", "[bInactive]");
			rtv = rtv.Replace("[DateAdded]", "[dtAdded]");
			rtv = rtv.Replace("[AddedByUser]", "[sAddedByUser]");
			rtv = rtv.Replace("[DateUpdated]", "[dtUpdated]");
			rtv = rtv.Replace("[UpdatedByUser]", "[sUpdatedByUser]");
			rtv = rtv.Replace("[Rowversion]", "[bRowversion]");

			return rtv;
		}

		#region Json.NET Serialization
		/// <summary>
		/// Attempt to serialize the Equipment object to the server
		/// </summary>
		/// <param name="obj">The Equipment object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(Equipment obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the Equipment object from the server
		/// </summary>
		/// <param name="obj">The Equipment object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A Equipment object containing the return from the method</returns>
		public static Equipment DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			Equipment rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<Equipment>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization

		#endregion Public Static Methods

		#region IClassGenPropertyChanging Implementation

		/// <summary>
		/// Occurs when a property is about to change.
		/// </summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>
		/// Occurs when a ClassGen property is about to change.
		/// </summary>
		public event ClassGenPropertyChangingEventHandler ClassGenPropertyChanging;
		private bool NotifyPropertyChanging(string info, object oldValue, object newValue)
		{
			bool cancel = false;
			if (ClassGenPropertyChanging != null)
			{
				ClassGenPropertyChangingEventArgs e = new ClassGenPropertyChangingEventArgs(info, oldValue, newValue);
				ClassGenPropertyChanging(this, e);
				cancel = e.Cancel; 
			}
			if (!cancel && PropertyChanging != null)
			{
				PropertyChangingEventArgs e = new PropertyChangingEventArgs(info);
				PropertyChanging(this, e);
			}
			return cancel;
		}

		#endregion IClassGenPropertyChanging Implementation
		
		#region IClassGenLogXML Implementation
		/// <summary>
		/// Gets the current object as an XML object stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base properties 
		///		created as model base objects (GridCustom0-9, etc.).</param>
		/// <returns>The object as an XML string.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();

			sb.Append("<EquipID>" + System.Security.SecurityElement.Escape(EquipID.ToString()) + "</EquipID>" + Environment.NewLine);
			sb.Append("<AgencyID>" + System.Security.SecurityElement.Escape(AgencyID.ToString()) + "</AgencyID>" + Environment.NewLine);
			sb.Append("<Type>" + System.Security.SecurityElement.Escape(Type) + "</Type>" + Environment.NewLine);
			sb.Append("<Item>" + System.Security.SecurityElement.Escape(Item) + "</Item>" + Environment.NewLine);
			sb.Append("<Year>" + System.Security.SecurityElement.Escape(Year.ToString()) + "</Year>" + Environment.NewLine);
			sb.Append("<Make>" + System.Security.SecurityElement.Escape(Make) + "</Make>" + Environment.NewLine);
			sb.Append("<Model>" + System.Security.SecurityElement.Escape(Model) + "</Model>" + Environment.NewLine);
			sb.Append("<ParentEquipID>" + System.Security.SecurityElement.Escape(ParentEquipID.ToString()) + "</ParentEquipID>" + Environment.NewLine);
			sb.Append("<Color>" + System.Security.SecurityElement.Escape(Color) + "</Color>" + Environment.NewLine);
			sb.Append("<NumDoors>" + System.Security.SecurityElement.Escape(NumDoors.ToString()) + "</NumDoors>" + Environment.NewLine);
			sb.Append("<Is4x4>" + System.Security.SecurityElement.Escape(Is4x4.ToString()) + "</Is4x4>" + Environment.NewLine);
			sb.Append("<LightingSystem>" + System.Security.SecurityElement.Escape(LightingSystem) + "</LightingSystem>" + Environment.NewLine);
			sb.Append("<DepartmentRadio>" + System.Security.SecurityElement.Escape(DepartmentRadio) + "</DepartmentRadio>" + Environment.NewLine);
			sb.Append("<NumSpotLights>" + System.Security.SecurityElement.Escape(NumSpotLights.ToString()) + "</NumSpotLights>" + Environment.NewLine);
			sb.Append("<MarkedVehicle>" + System.Security.SecurityElement.Escape(MarkedVehicle.ToString()) + "</MarkedVehicle>" + Environment.NewLine);
			sb.Append("<Motorcycle>" + System.Security.SecurityElement.Escape(Motorcycle.ToString()) + "</Motorcycle>" + Environment.NewLine);
			sb.Append("<SpecialtyVehicle>" + System.Security.SecurityElement.Escape(SpecialtyVehicle.ToString()) + "</SpecialtyVehicle>" + Environment.NewLine);
			sb.Append("<VehicleID>" + System.Security.SecurityElement.Escape(VehicleID) + "</VehicleID>" + Environment.NewLine);
			sb.Append("<ComputerEquipID>" + System.Security.SecurityElement.Escape(ComputerEquipID.ToString()) + "</ComputerEquipID>" + Environment.NewLine);
			sb.Append("<SerialNum>" + System.Security.SecurityElement.Escape(SerialNum) + "</SerialNum>" + Environment.NewLine);
			sb.Append("<LicenseNum>" + System.Security.SecurityElement.Escape(LicenseNum) + "</LicenseNum>" + Environment.NewLine);
			sb.Append("<Mileage>" + System.Security.SecurityElement.Escape(Mileage.ToString()) + "</Mileage>" + Environment.NewLine);
			sb.Append("<RoundCount>" + System.Security.SecurityElement.Escape(RoundCount.ToString()) + "</RoundCount>" + Environment.NewLine);
			sb.Append("<PartNum>" + System.Security.SecurityElement.Escape(PartNum) + "</PartNum>" + Environment.NewLine);
			sb.Append("<Category>" + System.Security.SecurityElement.Escape(Category) + "</Category>" + Environment.NewLine);
			sb.Append("<OtherID>" + System.Security.SecurityElement.Escape(OtherID) + "</OtherID>" + Environment.NewLine);
			sb.Append("<Status>" + System.Security.SecurityElement.Escape(Status) + "</Status>" + Environment.NewLine);
			if (DateStatus.HasValue)
			{
				sb.Append("<DateStatus>" + DateStatus.Value.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateStatus>" + Environment.NewLine);
			}
			sb.Append("<ContactID>" + System.Security.SecurityElement.Escape(ContactID.ToString()) + "</ContactID>" + Environment.NewLine);
			sb.Append("<Location>" + System.Security.SecurityElement.Escape(Location) + "</Location>" + Environment.NewLine);
			sb.Append("<TeamID>" + System.Security.SecurityElement.Escape(TeamID.ToString()) + "</TeamID>" + Environment.NewLine);
			sb.Append("<TeamName>" + System.Security.SecurityElement.Escape(TeamName) + "</TeamName>" + Environment.NewLine);
			sb.Append("<Bureau>" + System.Security.SecurityElement.Escape(Bureau) + "</Bureau>" + Environment.NewLine);
			sb.Append("<Division>" + System.Security.SecurityElement.Escape(Division) + "</Division>" + Environment.NewLine);
			sb.Append("<Funding>" + System.Security.SecurityElement.Escape(Funding) + "</Funding>" + Environment.NewLine);
			sb.Append("<Description>" + System.Security.SecurityElement.Escape(Description) + "</Description>" + Environment.NewLine);
			sb.Append("<Comments>" + System.Security.SecurityElement.Escape(Comments) + "</Comments>" + Environment.NewLine);
			sb.Append("<VendorContactID>" + System.Security.SecurityElement.Escape(VendorContactID.ToString()) + "</VendorContactID>" + Environment.NewLine);
			sb.Append("<VendorPartNumber>" + System.Security.SecurityElement.Escape(VendorPartNumber) + "</VendorPartNumber>" + Environment.NewLine);
			sb.Append("<PurchasePrice>" + System.Security.SecurityElement.Escape(PurchasePrice.ToString()) + "</PurchasePrice>" + Environment.NewLine);
			sb.Append("<Tax>" + System.Security.SecurityElement.Escape(Tax.ToString()) + "</Tax>" + Environment.NewLine);
			sb.Append("<SH>" + System.Security.SecurityElement.Escape(SH.ToString()) + "</SH>" + Environment.NewLine);
			if (DatePurchase.HasValue)
			{
				sb.Append("<DatePurchase>" + DatePurchase.Value.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DatePurchase>" + Environment.NewLine);
			}
			sb.Append("<Warranty>" + System.Security.SecurityElement.Escape(Warranty) + "</Warranty>" + Environment.NewLine);
			if (DateReplacement.HasValue)
			{
				sb.Append("<DateReplacement>" + DateReplacement.Value.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateReplacement>" + Environment.NewLine);
			}
			sb.Append("<VIN>" + System.Security.SecurityElement.Escape(VIN) + "</VIN>" + Environment.NewLine);
			sb.Append("<Inactive>" + System.Security.SecurityElement.Escape(Inactive.ToString()) + "</Inactive>" + Environment.NewLine);
			sb.Append("<DateAdded>" + DateAdded.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateAdded>" + Environment.NewLine);
			sb.Append("<AddedByUser>" + System.Security.SecurityElement.Escape(AddedByUser) + "</AddedByUser>" + Environment.NewLine);
			sb.Append("<DateUpdated>" + DateUpdated.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateUpdated>" + Environment.NewLine);
			sb.Append("<UpdatedByUser>" + System.Security.SecurityElement.Escape(UpdatedByUser) + "</UpdatedByUser>" + Environment.NewLine);

			if (includeBaseProperties)
			{
				sb.Append("<RecordStatus>" + this.RecordStatus.ToString() + "</RecordStatus>" + Environment.NewLine);
				sb.Append("<CheckedInGrid>" + this.CheckedInGrid.ToString() + "</CheckedInGrid>" + Environment.NewLine);
				sb.Append("<IsDisposable>" + this.IsDisposable.ToString() + "</IsDisposable>" + Environment.NewLine);

				sb.Append("<GridCustom_0>" + System.Security.SecurityElement.Escape(this.GridCustom_0) + "</GridCustom_0>" + Environment.NewLine);
				sb.Append("<GridCustom_1>" + System.Security.SecurityElement.Escape(this.GridCustom_1) + "</GridCustom_1>" + Environment.NewLine);
				sb.Append("<GridCustom_2>" + System.Security.SecurityElement.Escape(this.GridCustom_2) + "</GridCustom_2>" + Environment.NewLine);
				sb.Append("<GridCustom_3>" + System.Security.SecurityElement.Escape(this.GridCustom_3) + "</GridCustom_3>" + Environment.NewLine);
				sb.Append("<GridCustom_4>" + System.Security.SecurityElement.Escape(this.GridCustom_4) + "</GridCustom_4>" + Environment.NewLine);
				sb.Append("<GridCustom_5>" + System.Security.SecurityElement.Escape(this.GridCustom_5) + "</GridCustom_5>" + Environment.NewLine);
				sb.Append("<GridCustom_6>" + System.Security.SecurityElement.Escape(this.GridCustom_6) + "</GridCustom_6>" + Environment.NewLine);
				sb.Append("<GridCustom_7>" + System.Security.SecurityElement.Escape(this.GridCustom_7) + "</GridCustom_7>" + Environment.NewLine);
				sb.Append("<GridCustom_8>" + System.Security.SecurityElement.Escape(this.GridCustom_8) + "</GridCustom_8>" + Environment.NewLine);
				sb.Append("<GridCustom_9>" + System.Security.SecurityElement.Escape(this.GridCustom_9) + "</GridCustom_9>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<Equipment>" + Environment.NewLine);
				sb.Append("</Equipment>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Get the current object as an XML object stream with all base properties included.
		/// </summary>
		/// <returns>The object as an XML string with all base properties included.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the changed elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <returns>A string value containing the XML list.</returns>
		public string GetChangedElementsAsXML()
		{
			StringBuilder sb = new StringBuilder();

			// Get the original values in relation to the new ones
			if (_originalValues.EquipID != EquipID)
			{
				sb.Append("\t<EquipID>");
				sb.Append("<OldValue>" + _originalValues.EquipID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + EquipID.ToString() + "</NewValue>");
				sb.Append("</EquipID>" + Environment.NewLine);
			}
			if (_originalValues.AgencyID != AgencyID)
			{
				sb.Append("\t<AgencyID>");
				sb.Append("<OldValue>" + _originalValues.AgencyID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + AgencyID.ToString() + "</NewValue>");
				sb.Append("</AgencyID>" + Environment.NewLine);
			}
			if (_originalValues.Type != Type)
			{
				sb.Append("\t<Type>");
				sb.Append("<OldValue>" + _originalValues.Type + "</OldValue>");
				sb.Append("<NewValue>" + Type + "</NewValue>");
				sb.Append("</Type>" + Environment.NewLine);
			}
			if (_originalValues.Item != Item)
			{
				sb.Append("\t<Item>");
				sb.Append("<OldValue>" + _originalValues.Item + "</OldValue>");
				sb.Append("<NewValue>" + Item + "</NewValue>");
				sb.Append("</Item>" + Environment.NewLine);
			}
			if (_originalValues.Year != Year)
			{
				sb.Append("\t<Year>");
				sb.Append("<OldValue>" + _originalValues.Year.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Year.ToString() + "</NewValue>");
				sb.Append("</Year>" + Environment.NewLine);
			}
			if (_originalValues.Make != Make)
			{
				sb.Append("\t<Make>");
				sb.Append("<OldValue>" + _originalValues.Make + "</OldValue>");
				sb.Append("<NewValue>" + Make + "</NewValue>");
				sb.Append("</Make>" + Environment.NewLine);
			}
			if (_originalValues.Model != Model)
			{
				sb.Append("\t<Model>");
				sb.Append("<OldValue>" + _originalValues.Model + "</OldValue>");
				sb.Append("<NewValue>" + Model + "</NewValue>");
				sb.Append("</Model>" + Environment.NewLine);
			}
			if (_originalValues.ParentEquipID != ParentEquipID)
			{
				sb.Append("\t<ParentEquipID>");
				sb.Append("<OldValue>" + _originalValues.ParentEquipID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + ParentEquipID.ToString() + "</NewValue>");
				sb.Append("</ParentEquipID>" + Environment.NewLine);
			}
			if (_originalValues.Color != Color)
			{
				sb.Append("\t<Color>");
				sb.Append("<OldValue>" + _originalValues.Color + "</OldValue>");
				sb.Append("<NewValue>" + Color + "</NewValue>");
				sb.Append("</Color>" + Environment.NewLine);
			}
			if (_originalValues.NumDoors != NumDoors)
			{
				sb.Append("\t<NumDoors>");
				sb.Append("<OldValue>" + _originalValues.NumDoors.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + NumDoors.ToString() + "</NewValue>");
				sb.Append("</NumDoors>" + Environment.NewLine);
			}
			if (_originalValues.Is4x4 != Is4x4)
			{
				sb.Append("\t<Is4x4>");
				sb.Append("<OldValue>" + _originalValues.Is4x4.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Is4x4.ToString() + "</NewValue>");
				sb.Append("</Is4x4>" + Environment.NewLine);
			}
			if (_originalValues.LightingSystem != LightingSystem)
			{
				sb.Append("\t<LightingSystem>");
				sb.Append("<OldValue>" + _originalValues.LightingSystem + "</OldValue>");
				sb.Append("<NewValue>" + LightingSystem + "</NewValue>");
				sb.Append("</LightingSystem>" + Environment.NewLine);
			}
			if (_originalValues.DepartmentRadio != DepartmentRadio)
			{
				sb.Append("\t<DepartmentRadio>");
				sb.Append("<OldValue>" + _originalValues.DepartmentRadio + "</OldValue>");
				sb.Append("<NewValue>" + DepartmentRadio + "</NewValue>");
				sb.Append("</DepartmentRadio>" + Environment.NewLine);
			}
			if (_originalValues.NumSpotLights != NumSpotLights)
			{
				sb.Append("\t<NumSpotLights>");
				sb.Append("<OldValue>" + _originalValues.NumSpotLights.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + NumSpotLights.ToString() + "</NewValue>");
				sb.Append("</NumSpotLights>" + Environment.NewLine);
			}
			if (_originalValues.MarkedVehicle != MarkedVehicle)
			{
				sb.Append("\t<MarkedVehicle>");
				sb.Append("<OldValue>" + _originalValues.MarkedVehicle.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + MarkedVehicle.ToString() + "</NewValue>");
				sb.Append("</MarkedVehicle>" + Environment.NewLine);
			}
			if (_originalValues.Motorcycle != Motorcycle)
			{
				sb.Append("\t<Motorcycle>");
				sb.Append("<OldValue>" + _originalValues.Motorcycle.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Motorcycle.ToString() + "</NewValue>");
				sb.Append("</Motorcycle>" + Environment.NewLine);
			}
			if (_originalValues.SpecialtyVehicle != SpecialtyVehicle)
			{
				sb.Append("\t<SpecialtyVehicle>");
				sb.Append("<OldValue>" + _originalValues.SpecialtyVehicle.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + SpecialtyVehicle.ToString() + "</NewValue>");
				sb.Append("</SpecialtyVehicle>" + Environment.NewLine);
			}
			if (_originalValues.VehicleID != VehicleID)
			{
				sb.Append("\t<VehicleID>");
				sb.Append("<OldValue>" + _originalValues.VehicleID + "</OldValue>");
				sb.Append("<NewValue>" + VehicleID + "</NewValue>");
				sb.Append("</VehicleID>" + Environment.NewLine);
			}
			if (_originalValues.ComputerEquipID != ComputerEquipID)
			{
				sb.Append("\t<ComputerEquipID>");
				sb.Append("<OldValue>" + _originalValues.ComputerEquipID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + ComputerEquipID.ToString() + "</NewValue>");
				sb.Append("</ComputerEquipID>" + Environment.NewLine);
			}
			if (_originalValues.SerialNum != SerialNum)
			{
				sb.Append("\t<SerialNum>");
				sb.Append("<OldValue>" + _originalValues.SerialNum + "</OldValue>");
				sb.Append("<NewValue>" + SerialNum + "</NewValue>");
				sb.Append("</SerialNum>" + Environment.NewLine);
			}
			if (_originalValues.LicenseNum != LicenseNum)
			{
				sb.Append("\t<LicenseNum>");
				sb.Append("<OldValue>" + _originalValues.LicenseNum + "</OldValue>");
				sb.Append("<NewValue>" + LicenseNum + "</NewValue>");
				sb.Append("</LicenseNum>" + Environment.NewLine);
			}
			if (_originalValues.Mileage != Mileage)
			{
				sb.Append("\t<Mileage>");
				sb.Append("<OldValue>" + _originalValues.Mileage.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Mileage.ToString() + "</NewValue>");
				sb.Append("</Mileage>" + Environment.NewLine);
			}
			if (_originalValues.RoundCount != RoundCount)
			{
				sb.Append("\t<RoundCount>");
				sb.Append("<OldValue>" + _originalValues.RoundCount.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + RoundCount.ToString() + "</NewValue>");
				sb.Append("</RoundCount>" + Environment.NewLine);
			}
			if (_originalValues.PartNum != PartNum)
			{
				sb.Append("\t<PartNum>");
				sb.Append("<OldValue>" + _originalValues.PartNum + "</OldValue>");
				sb.Append("<NewValue>" + PartNum + "</NewValue>");
				sb.Append("</PartNum>" + Environment.NewLine);
			}
			if (_originalValues.Category != Category)
			{
				sb.Append("\t<Category>");
				sb.Append("<OldValue>" + _originalValues.Category + "</OldValue>");
				sb.Append("<NewValue>" + Category + "</NewValue>");
				sb.Append("</Category>" + Environment.NewLine);
			}
			if (_originalValues.OtherID != OtherID)
			{
				sb.Append("\t<OtherID>");
				sb.Append("<OldValue>" + _originalValues.OtherID + "</OldValue>");
				sb.Append("<NewValue>" + OtherID + "</NewValue>");
				sb.Append("</OtherID>" + Environment.NewLine);
			}
			if (_originalValues.Status != Status)
			{
				sb.Append("\t<Status>");
				sb.Append("<OldValue>" + _originalValues.Status + "</OldValue>");
				sb.Append("<NewValue>" + Status + "</NewValue>");
				sb.Append("</Status>" + Environment.NewLine);
			}
			if (_originalValues.DateStatus != DateStatus)
			{
				sb.Append("\t<DateStatus>");
				sb.Append("<OldValue>" + _originalValues.DateStatus.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateStatus.ToString() + "</NewValue>");
				sb.Append("</DateStatus>" + Environment.NewLine);
			}
			if (_originalValues.ContactID != ContactID)
			{
				sb.Append("\t<ContactID>");
				sb.Append("<OldValue>" + _originalValues.ContactID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + ContactID.ToString() + "</NewValue>");
				sb.Append("</ContactID>" + Environment.NewLine);
			}
			if (_originalValues.Location != Location)
			{
				sb.Append("\t<Location>");
				sb.Append("<OldValue>" + _originalValues.Location + "</OldValue>");
				sb.Append("<NewValue>" + Location + "</NewValue>");
				sb.Append("</Location>" + Environment.NewLine);
			}
			if (_originalValues.TeamID != TeamID)
			{
				sb.Append("\t<TeamID>");
				sb.Append("<OldValue>" + _originalValues.TeamID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + TeamID.ToString() + "</NewValue>");
				sb.Append("</TeamID>" + Environment.NewLine);
			}
			if (_originalValues.TeamName != TeamName)
			{
				sb.Append("\t<TeamName>");
				sb.Append("<OldValue>" + _originalValues.TeamName + "</OldValue>");
				sb.Append("<NewValue>" + TeamName + "</NewValue>");
				sb.Append("</TeamName>" + Environment.NewLine);
			}
			if (_originalValues.Bureau != Bureau)
			{
				sb.Append("\t<Bureau>");
				sb.Append("<OldValue>" + _originalValues.Bureau + "</OldValue>");
				sb.Append("<NewValue>" + Bureau + "</NewValue>");
				sb.Append("</Bureau>" + Environment.NewLine);
			}
			if (_originalValues.Division != Division)
			{
				sb.Append("\t<Division>");
				sb.Append("<OldValue>" + _originalValues.Division + "</OldValue>");
				sb.Append("<NewValue>" + Division + "</NewValue>");
				sb.Append("</Division>" + Environment.NewLine);
			}
			if (_originalValues.Funding != Funding)
			{
				sb.Append("\t<Funding>");
				sb.Append("<OldValue>" + _originalValues.Funding + "</OldValue>");
				sb.Append("<NewValue>" + Funding + "</NewValue>");
				sb.Append("</Funding>" + Environment.NewLine);
			}
			if (_originalValues.Description != Description)
			{
				sb.Append("\t<Description>");
				sb.Append("<OldValue>" + _originalValues.Description + "</OldValue>");
				sb.Append("<NewValue>" + Description + "</NewValue>");
				sb.Append("</Description>" + Environment.NewLine);
			}
			if (_originalValues.Comments != Comments)
			{
				sb.Append("\t<Comments>");
				sb.Append("<OldValue>" + _originalValues.Comments + "</OldValue>");
				sb.Append("<NewValue>" + Comments + "</NewValue>");
				sb.Append("</Comments>" + Environment.NewLine);
			}
			if (_originalValues.VendorContactID != VendorContactID)
			{
				sb.Append("\t<VendorContactID>");
				sb.Append("<OldValue>" + _originalValues.VendorContactID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + VendorContactID.ToString() + "</NewValue>");
				sb.Append("</VendorContactID>" + Environment.NewLine);
			}
			if (_originalValues.VendorPartNumber != VendorPartNumber)
			{
				sb.Append("\t<VendorPartNumber>");
				sb.Append("<OldValue>" + _originalValues.VendorPartNumber + "</OldValue>");
				sb.Append("<NewValue>" + VendorPartNumber + "</NewValue>");
				sb.Append("</VendorPartNumber>" + Environment.NewLine);
			}
			if (_originalValues.PurchasePrice != PurchasePrice)
			{
				sb.Append("\t<PurchasePrice>");
				sb.Append("<OldValue>" + _originalValues.PurchasePrice.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + PurchasePrice.ToString() + "</NewValue>");
				sb.Append("</PurchasePrice>" + Environment.NewLine);
			}
			if (_originalValues.Tax != Tax)
			{
				sb.Append("\t<Tax>");
				sb.Append("<OldValue>" + _originalValues.Tax.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Tax.ToString() + "</NewValue>");
				sb.Append("</Tax>" + Environment.NewLine);
			}
			if (_originalValues.SH != SH)
			{
				sb.Append("\t<SH>");
				sb.Append("<OldValue>" + _originalValues.SH.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + SH.ToString() + "</NewValue>");
				sb.Append("</SH>" + Environment.NewLine);
			}
			if (_originalValues.DatePurchase != DatePurchase)
			{
				sb.Append("\t<DatePurchase>");
				sb.Append("<OldValue>" + _originalValues.DatePurchase.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DatePurchase.ToString() + "</NewValue>");
				sb.Append("</DatePurchase>" + Environment.NewLine);
			}
			if (_originalValues.Warranty != Warranty)
			{
				sb.Append("\t<Warranty>");
				sb.Append("<OldValue>" + _originalValues.Warranty + "</OldValue>");
				sb.Append("<NewValue>" + Warranty + "</NewValue>");
				sb.Append("</Warranty>" + Environment.NewLine);
			}
			if (_originalValues.DateReplacement != DateReplacement)
			{
				sb.Append("\t<DateReplacement>");
				sb.Append("<OldValue>" + _originalValues.DateReplacement.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateReplacement.ToString() + "</NewValue>");
				sb.Append("</DateReplacement>" + Environment.NewLine);
			}
			if (_originalValues.VIN != VIN)
			{
				sb.Append("\t<VIN>");
				sb.Append("<OldValue>" + _originalValues.VIN + "</OldValue>");
				sb.Append("<NewValue>" + VIN + "</NewValue>");
				sb.Append("</VIN>" + Environment.NewLine);
			}
			if (_originalValues.Inactive != Inactive)
			{
				sb.Append("\t<Inactive>");
				sb.Append("<OldValue>" + _originalValues.Inactive.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Inactive.ToString() + "</NewValue>");
				sb.Append("</Inactive>" + Environment.NewLine);
			}
			if (_originalValues.DateAdded != DateAdded)
			{
				sb.Append("\t<DateAdded>");
				sb.Append("<OldValue>" + _originalValues.DateAdded.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateAdded.ToString() + "</NewValue>");
				sb.Append("</DateAdded>" + Environment.NewLine);
			}
			if (_originalValues.AddedByUser != AddedByUser)
			{
				sb.Append("\t<AddedByUser>");
				sb.Append("<OldValue>" + _originalValues.AddedByUser + "</OldValue>");
				sb.Append("<NewValue>" + AddedByUser + "</NewValue>");
				sb.Append("</AddedByUser>" + Environment.NewLine);
			}
			if (_originalValues.DateUpdated != DateUpdated)
			{
				sb.Append("\t<DateUpdated>");
				sb.Append("<OldValue>" + _originalValues.DateUpdated.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateUpdated.ToString() + "</NewValue>");
				sb.Append("</DateUpdated>" + Environment.NewLine);
			}
			if (_originalValues.UpdatedByUser != UpdatedByUser)
			{
				sb.Append("\t<UpdatedByUser>");
				sb.Append("<OldValue>" + _originalValues.UpdatedByUser + "</OldValue>");
				sb.Append("<NewValue>" + UpdatedByUser + "</NewValue>");
				sb.Append("</UpdatedByUser>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<Equipment>" + Environment.NewLine);
				sb.Append("</Equipment>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Generates a new Equipment object from an XML description.
		/// </summary>
		/// <param name="xml">The string of XML to load from.</param>
		/// <returns>A new Equipment object.</returns>
		public static Equipment LoadFromXML(string xml)
		{
			Equipment item = new Equipment();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			bool propSet = false;
			doc.LoadXml(xml);

			foreach (System.Xml.XmlNode child in doc.ChildNodes[0].ChildNodes)
			{
				if (!propSet) { propSet = true; }
				switch (child.Name)
				{
					case "EquipID": item.EquipID = long.Parse(child.InnerText); break;
					case "AgencyID": item.AgencyID = long.Parse(child.InnerText); break;
					case "Type": item.Type = child.InnerText; break;
					case "Item": item.Item = child.InnerText; break;
					case "Year": item.Year = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;

					case "Make": item.Make = child.InnerText; break;
					case "Model": item.Model = child.InnerText; break;
					case "ParentEquipID": item.ParentEquipID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "Color": item.Color = child.InnerText; break;
					case "NumDoors": item.NumDoors = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;

					case "Is4x4": item.Is4x4 = bool.Parse(child.InnerText); break;
					case "LightingSystem": item.LightingSystem = child.InnerText; break;
					case "DepartmentRadio": item.DepartmentRadio = child.InnerText; break;
					case "NumSpotLights": item.NumSpotLights = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "MarkedVehicle": item.MarkedVehicle = bool.Parse(child.InnerText); break;

					case "Motorcycle": item.Motorcycle = bool.Parse(child.InnerText); break;
					case "SpecialtyVehicle": item.SpecialtyVehicle = bool.Parse(child.InnerText); break;
					case "VehicleID": item.VehicleID = child.InnerText; break;
					case "ComputerEquipID": item.ComputerEquipID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "SerialNum": item.SerialNum = child.InnerText; break;

					case "LicenseNum": item.LicenseNum = child.InnerText; break;
					case "Mileage": item.Mileage = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "RoundCount": item.RoundCount = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "PartNum": item.PartNum = child.InnerText; break;
					case "Category": item.Category = child.InnerText; break;

					case "OtherID": item.OtherID = child.InnerText; break;
					case "Status": item.Status = child.InnerText; break;
					case "DateStatus": item.DateStatus = (!String.IsNullOrEmpty(child.InnerText) ? DateTime.Parse(child.InnerText) : (DateTime?)null); break;
					case "ContactID": item.ContactID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "Location": item.Location = child.InnerText; break;

					case "TeamID": item.TeamID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "TeamName": item.TeamName = child.InnerText; break;
					case "Bureau": item.Bureau = child.InnerText; break;
					case "Division": item.Division = child.InnerText; break;
					case "Funding": item.Funding = child.InnerText; break;

					case "Description": item.Description = child.InnerText; break;
					case "Comments": item.Comments = child.InnerText; break;
					case "VendorContactID": item.VendorContactID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "VendorPartNumber": item.VendorPartNumber = child.InnerText; break;
					case "PurchasePrice": item.PurchasePrice = decimal.Parse(child.InnerText); break;

					case "Tax": item.Tax = decimal.Parse(child.InnerText); break;
					case "SH": item.SH = decimal.Parse(child.InnerText); break;
					case "DatePurchase": item.DatePurchase = (!String.IsNullOrEmpty(child.InnerText) ? DateTime.Parse(child.InnerText) : (DateTime?)null); break;
					case "Warranty": item.Warranty = child.InnerText; break;
					case "DateReplacement": item.DateReplacement = (!String.IsNullOrEmpty(child.InnerText) ? DateTime.Parse(child.InnerText) : (DateTime?)null); break;

					case "VIN": item.VIN = child.InnerText; break;
					case "Inactive": item.Inactive = bool.Parse(child.InnerText); break;
					case "DateAdded": item.DateAdded = DateTime.Parse(child.InnerText); break;
					case "AddedByUser": item.AddedByUser = child.InnerText; break;
					case "DateUpdated": item.DateUpdated = DateTime.Parse(child.InnerText); break;

					case "UpdatedByUser": item.UpdatedByUser = child.InnerText; break;
					case "RecordStatus": item.RecordStatus = (RecordStatus)Enum.Parse(typeof(RecordStatus), child.InnerText, true); break;
					case "CheckedInGrid": item.CheckedInGrid = bool.Parse(child.InnerText); break;
					case "IsDisposable": item.IsDisposable = bool.Parse(child.InnerText); break;
					case "GridCustom_0": item.GridCustom_0 = child.InnerText; break;

					case "GridCustom_1": item.GridCustom_1 = child.InnerText; break;
					case "GridCustom_2": item.GridCustom_2 = child.InnerText; break;
					case "GridCustom_3": item.GridCustom_3 = child.InnerText; break;
					case "GridCustom_4": item.GridCustom_4 = child.InnerText; break;
					case "GridCustom_5": item.GridCustom_5 = child.InnerText; break;

					case "GridCustom_6": item.GridCustom_6 = child.InnerText; break;
					case "GridCustom_7": item.GridCustom_7 = child.InnerText; break;
					case "GridCustom_8": item.GridCustom_8 = child.InnerText; break;
					case "GridCustom_9": item.GridCustom_9 = child.InnerText; break;
				}
			}
			return (propSet ? item : null);
		}
		#endregion IClassGenLogXML Implementation
	}
	#endregion Equipment Class

	#region EquipmentField Enum
	/// <summary>
	/// Enum for each field type in the element.
	/// </summary>
	public enum EquipmentField
	{
		/// <summary>
		/// The EquipID element.
		/// </summary>
		EquipID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The Type element.
		/// </summary>
		Type,
		/// <summary>
		/// The Item element.
		/// </summary>
		Item,
		/// <summary>
		/// The Year element.
		/// </summary>
		Year,
		/// <summary>
		/// The Make element.
		/// </summary>
		Make,
		/// <summary>
		/// The Model element.
		/// </summary>
		Model,
		/// <summary>
		/// The ParentEquipID element.
		/// </summary>
		ParentEquipID,
		/// <summary>
		/// The Color element.
		/// </summary>
		Color,
		/// <summary>
		/// The NumDoors element.
		/// </summary>
		NumDoors,
		/// <summary>
		/// The Is4x4 element.
		/// </summary>
		Is4x4,
		/// <summary>
		/// The LightingSystem element.
		/// </summary>
		LightingSystem,
		/// <summary>
		/// The DepartmentRadio element.
		/// </summary>
		DepartmentRadio,
		/// <summary>
		/// The NumSpotLights element.
		/// </summary>
		NumSpotLights,
		/// <summary>
		/// The MarkedVehicle element.
		/// </summary>
		MarkedVehicle,
		/// <summary>
		/// The Motorcycle element.
		/// </summary>
		Motorcycle,
		/// <summary>
		/// The SpecialtyVehicle element.
		/// </summary>
		SpecialtyVehicle,
		/// <summary>
		/// The VehicleID element.
		/// </summary>
		VehicleID,
		/// <summary>
		/// The ComputerEquipID element.
		/// </summary>
		ComputerEquipID,
		/// <summary>
		/// The SerialNum element.
		/// </summary>
		SerialNum,
		/// <summary>
		/// The LicenseNum element.
		/// </summary>
		LicenseNum,
		/// <summary>
		/// The Mileage element.
		/// </summary>
		Mileage,
		/// <summary>
		/// The RoundCount element.
		/// </summary>
		RoundCount,
		/// <summary>
		/// The PartNum element.
		/// </summary>
		PartNum,
		/// <summary>
		/// The Category element.
		/// </summary>
		Category,
		/// <summary>
		/// The OtherID element.
		/// </summary>
		OtherID,
		/// <summary>
		/// The Status element.
		/// </summary>
		Status,
		/// <summary>
		/// The DateStatus element.
		/// </summary>
		DateStatus,
		/// <summary>
		/// The ContactID element.
		/// </summary>
		ContactID,
		/// <summary>
		/// The Location element.
		/// </summary>
		Location,
		/// <summary>
		/// The TeamID element.
		/// </summary>
		TeamID,
		/// <summary>
		/// The TeamName element.
		/// </summary>
		TeamName,
		/// <summary>
		/// The Bureau element.
		/// </summary>
		Bureau,
		/// <summary>
		/// The Division element.
		/// </summary>
		Division,
		/// <summary>
		/// The Funding element.
		/// </summary>
		Funding,
		/// <summary>
		/// The Description element.
		/// </summary>
		Description,
		/// <summary>
		/// The Comments element.
		/// </summary>
		Comments,
		/// <summary>
		/// The VendorContactID element.
		/// </summary>
		VendorContactID,
		/// <summary>
		/// The VendorPartNumber element.
		/// </summary>
		VendorPartNumber,
		/// <summary>
		/// The PurchasePrice element.
		/// </summary>
		PurchasePrice,
		/// <summary>
		/// The Tax element.
		/// </summary>
		Tax,
		/// <summary>
		/// The SH element.
		/// </summary>
		SH,
		/// <summary>
		/// The DatePurchase element.
		/// </summary>
		DatePurchase,
		/// <summary>
		/// The Warranty element.
		/// </summary>
		Warranty,
		/// <summary>
		/// The DateReplacement element.
		/// </summary>
		DateReplacement,
		/// <summary>
		/// The VIN element.
		/// </summary>
		VIN,
		/// <summary>
		/// The Inactive element.
		/// </summary>
		Inactive,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The AddedByUser element.
		/// </summary>
		AddedByUser,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
		/// <summary>
		/// The UpdatedByUser element.
		/// </summary>
		UpdatedByUser,
		/// <summary>
		/// The Rowversion element.
		/// </summary>
		Rowversion,
	}
	#endregion EquipmentField Enum

	#region EquipmentMinMaxDateField Enum
	/// <summary>
	/// Enum for each DateTime field in the element that can have a minimum or maximum.
	/// </summary>
	public enum EquipmentMinMaxDateField
	{
		/// <summary>
		/// The DateStatus element.
		/// </summary>
		DateStatus,
		/// <summary>
		/// The DatePurchase element.
		/// </summary>
		DatePurchase,
		/// <summary>
		/// The DateReplacement element.
		/// </summary>
		DateReplacement,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
	}
	#endregion EquipmentMinMaxDateField Enum

	#region EquipmentMinMaxNumberField Enum
	/// <summary>
	/// Enum for each numerical field in the element that can have a minimum or maximum.
	/// </summary>
	public enum EquipmentMinMaxNumberField
	{
		/// <summary>
		/// The EquipID element.
		/// </summary>
		EquipID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The Year element.
		/// </summary>
		Year,
		/// <summary>
		/// The ParentEquipID element.
		/// </summary>
		ParentEquipID,
		/// <summary>
		/// The NumDoors element.
		/// </summary>
		NumDoors,
		/// <summary>
		/// The NumSpotLights element.
		/// </summary>
		NumSpotLights,
		/// <summary>
		/// The ComputerEquipID element.
		/// </summary>
		ComputerEquipID,
		/// <summary>
		/// The Mileage element.
		/// </summary>
		Mileage,
		/// <summary>
		/// The RoundCount element.
		/// </summary>
		RoundCount,
		/// <summary>
		/// The ContactID element.
		/// </summary>
		ContactID,
		/// <summary>
		/// The TeamID element.
		/// </summary>
		TeamID,
		/// <summary>
		/// The VendorContactID element.
		/// </summary>
		VendorContactID,
		/// <summary>
		/// The PurchasePrice element.
		/// </summary>
		PurchasePrice,
		/// <summary>
		/// The Tax element.
		/// </summary>
		Tax,
		/// <summary>
		/// The SH element.
		/// </summary>
		SH,
	}
	#endregion EquipmentMinMaxNumberField Enum

	#region Equipment Collection
	/// <summary>
	/// A collection for Equipment objects.
	/// </summary>
	/// <remarks>
	/// This collection class is the primary way to work with Equipment objects.
	/// Most of the functionality is in this class, including the methods for creating Equipment objects from a database.
	/// </remarks>
	[Serializable]
	public partial class EquipmentCollection : ClassGenBindingList<Equipment, long>, IDisposable, 
		IClassGenLogXMLCollection, IClassGenClassGenerated, IClassGenClassUpdatable
	{
		#region Constructors
		/// <summary>
		/// Create an empty collection.
		/// </summary>
		public EquipmentCollection() 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "EquipID";

			_rules = new ClassGenRules(this);			// Set the base collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		public EquipmentCollection(string whereClause) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "EquipID";

			_rules = new ClassGenRules(this);			// Set the base collection
			this.GetFromDB(whereClause);			// Populate the collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		/// <param name="getChildren">True if the collection should populate all child collections as well.</param>
		public EquipmentCollection(string whereClause, bool getChildren) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "EquipID";

			_rules = new ClassGenRules(this);				// Set the base collection
			this.GetFromDB(whereClause, getChildren);		// Populate the collection
		}
		#endregion Constructors

		#region Public Properties
		/// <summary>
		/// Get a single record from the collection (not from the DB) that matches the ID.
		/// </summary>
		/// <param name="equipID">A key field used to find the correct record.</param>
		/// <returns>The Equipment object that matches the given value.</returns>
		public Equipment Get(long equipID)
		{
			Equipment val = null;
			if (KeyedCollection.ContainsKey(equipID)) { val = KeyedCollection[equipID]; }
			return val;
		}

		// Override the methods needed to do the collection thing
		#region Common Methods Override


		/// <summary>
		/// Get the next new id from the localized collection as a long.
		/// </summary>
		/// <returns>The next ID in the negative sequence of numbers.</returns>
		public long GetNextNewID()
		{
			long rtv = 0;

			// Get the next number in sequence
			for (long i = -9223372036854775808; i <= 0; i++)
			{
				if (!KeyedCollection.ContainsKey(i))
				{
					rtv = i;
					break;
				}
			}

			return rtv;		// Return the value
		}
		#endregion Common Methods Override


		/// <summary>
		/// A collection of all the active records from the collection (the ones without a status of "Deleted").
		/// </summary>
		public new EquipmentCollection ActiveRecords
		{
			get
			{
				return (EquipmentCollection)base.ActiveRecords;
			}
		}

		/// <summary>
		/// A collection of all the deleted records from the collection (the ones with a status of "Deleted").
		/// </summary>
		public EquipmentCollection DeletedRecords
		{
			get
			{
				return (EquipmentCollection)GetRecordsBasedOnStatus(RecordStatus.Deleted);
			}
		}

		/// <summary>
		/// A collection of all the modified records from the collection (the ones with a status of "Modified").
		/// </summary>
		public EquipmentCollection ModifiedRecords
		{
			get
			{
				return (EquipmentCollection)GetRecordsBasedOnStatus(RecordStatus.Modified);
			}
		}

		/// <summary>
		/// A collection of all the new records from the collection (the ones with a status of "New").
		/// </summary>
		public EquipmentCollection NewRecords
		{
			get
			{
				return (EquipmentCollection)GetRecordsBasedOnStatus(RecordStatus.New);
			}
		}

		#endregion Public Properties

		#region Collection Get Methods
		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(ref long dbCount)
		{
			dbCount = EquipmentCollection.GetCountFromDB();
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = EquipmentCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = EquipmentCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Get all items from the database.
		/// Gets and populates all children objects as well.
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDBWithChildren()
		{
			this.GetCollectionConfig.WhereClause = string.Empty;
			this.GetCollectionConfig.GetChildren = true;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB() 
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			SqlParameter param = null;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			
			// Reset the IsLoaded Variable before we load the collection
			this._isLoaded = false;
			
			// See if we're supposed to get this thing paged
			if (this.GetCollectionConfig.PageRecords)
			{
				_backgroundWorker = new BackgroundWorker();
				_backgroundWorker.WorkerReportsProgress = true;
				_backgroundWorker.WorkerSupportsCancellation = true;
				_backgroundWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(_backgroundWorker_RunWorkerCompleted);
				_backgroundWorker.ProgressChanged += new ProgressChangedEventHandler(_backgroundWorker_ProgressChanged);
				_backgroundWorker.DoWork += new DoWorkEventHandler(_backgroundWorker_DoWork);
				_backgroundWorker.RunWorkerAsync();
				return errors;
			}

			try
			{
				sql = "SELECT " + (this.GetCollectionConfig.TopRecords > -1 ? "TOP " + this.GetCollectionConfig.TopRecords.ToString() + " " : "") +
					" [E].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tEquipment [E] " + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? "WHERE " + this.GetCollectionConfig.WhereClause : "") + 
					"";
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause)
				{
					sql += (!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " AND" : " WHERE") +
						" dtUpdated > @pdtUpdated";
					param = new SqlParameter("@pdtUpdated", SqlDbType.DateTime);
					param.Value = _dateTimeObjectPopulated;
				}
				if (this.GetCollectionConfig.TopRecords > -1 &&
					!String.IsNullOrEmpty(this.GetCollectionConfig.TopSort))
				{
					sql += " ORDER BY " + this.GetCollectionConfig.TopSort;
				}
				cmd = new SqlCommand(sql);
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { cmd.Parameters.Add(param); }

				this.OnMasterPopulate("Equipment", "Retrieving Full List Of Equipments", string.Empty);
				dt = DAL.SQLExecDataTable(cmd);

				int count = 0;
				if (!this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { this.Clear(); }
				foreach (DataRow row in dt.Rows)
				{
					// Enumerate through the fields and set up the object
					if (count == 0)
					{
						if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
						{
							_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
						}
						else
						{
							_dateTimeObjectPopulated = DateTime.Now;
						}
						DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
					}

					this.OnDetailPopulate("Equipment", 
						"Populating Equipment: " + (++count).ToString("###,###,###,##0") + " of " + dt.Rows.Count.ToString("###,###,###,##0"), 
						string.Empty, 
						dt.Rows.Count, 
						count);

					#region Fields
					Equipment item = new Equipment();
					item.Get(row);

					// Check to make sure this collection doesn't already contain this item
					if (this.Contains(item.EquipID)) { this.Remove(item.EquipID); }

					this.Add(item);
					#endregion Fields
				}
				
				dt.Dispose();		// Dispose of the datatable

				this._isLoaded = true;				// Set the IsLoaded Property
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <param name="whereClause">The SQL Where clause to use to get the total count.</param>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB(string whereClause)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			int rtv = 0;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT COUNT(*) " +
						"FROM tEquipment " +
						(!String.IsNullOrEmpty(whereClause) ? "WHERE " + whereClause : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count > 0 &&
					dt.Rows[0][0] != DBNull.Value)
				{
					rtv = (int)dt.Rows[0][0];
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB()
		{
			return GetCountFromDB(string.Empty);		// Return the base method
		}
		#endregion Collection Get Methods

		#region Collection Put Methods
		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		public ClassGenExceptionCollection AddUpdateAll()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdateAll(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		/// <param name="oConn">The connection object</param>
		/// <param name="oTrans">The transaction object</param>
		public ClassGenExceptionCollection AddUpdateAll(SqlConnection oConn, SqlTransaction oTrans)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			if (this.Count == 0) { return errors; }

			ClassGenExceptionCollection itemErrors = new ClassGenExceptionCollection();
			int addUpdateAffected = 0, deleteAffected = 0;

			try
			{
				// Delete Method
				for (int i = this.Count - 1; i >= 0; i--)
				{
					this.OnDetailDelete("Equipment",
						"Deleting Equipment: " + (this.Count - i + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						this.Count - i + 1);
					Equipment item = this[i];
					if (item.RecordStatus == RecordStatus.Deleted)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0)
						{
							deleteAffected++;
							this.RemoveAt(i);		// Remove the item from the collection
						}
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = i + 1;
								err.RecordKey = item.EquipID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
				}

				// Update Method
				int count = 0;
				foreach (Equipment item in this)
				{
					this.OnDetailUpdate("Equipment",
						"Updating Equipment: " + (count + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						count + 1);
					if (item.RecordStatus == RecordStatus.Modified ||
						item.RecordStatus == RecordStatus.New)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0) { addUpdateAffected++; }
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = count + 1;
								err.RecordKey = item.EquipID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
					count++;
				}


				// Add how many records were affected by the update
				errors.Add(new ClassGenException(addUpdateAffected.ToString("###,##0") +
					" Records affected by the update.", ClassGenExceptionIconType.System, addUpdateAffected.ToString()));
				errors[errors.Count - 1].Number = addUpdateAffected;
				errors.Add(new ClassGenException(deleteAffected.ToString("###,##0") +
					" Records affected by the delete.", ClassGenExceptionIconType.System, deleteAffected.ToString()));
				errors[errors.Count - 1].Number = deleteAffected;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}
		#endregion Collection Put Methods

		#region Clone/Copy Methods
		/// <summary>
		/// Create an exact copy of all the elements in the collection.
		/// </summary>
		/// <returns>The cloned collection.</returns>
		public new EquipmentCollection Clone()
		{
			EquipmentCollection newColl = new EquipmentCollection();
			newColl.AddRange(base.Clone());
			return newColl;
		}

		/// <summary>
		/// Copy the objects in the collection, creating a new ID for each one of them in the process.
		/// </summary>
		/// <returns>A new EquipmentCollection.</returns>
		public new EquipmentCollection CopyWithNewIDs()
		{
			return (EquipmentCollection)base.CopyWithNewIDs();
		}
		#endregion Clone/Copy Methods

		#region GetDistinct Method(s)
		/// <summary>
		/// Get a distinct list of values based on the elements in the collection.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public List<string> GetDistinctFromCollection(LEAD.EquipmentField field)
		{
			if (this.Count == 0) { return new List<string>(); }
			SortedList<string, string> vals = new SortedList<string, string>();

			// Add the elements
			switch (field)
			{
				case LEAD.EquipmentField.EquipID:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.EquipID.ToString()) && 
							!vals.ContainsKey(item.EquipID.ToString().Trim())) { vals.Add(item.EquipID.ToString().Trim(), item.EquipID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.AgencyID:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.AgencyID.ToString()) && 
							!vals.ContainsKey(item.AgencyID.ToString().Trim())) { vals.Add(item.AgencyID.ToString().Trim(), item.AgencyID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.Type:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Type) && 
							!vals.ContainsKey(item.Type.Trim())) { vals.Add(item.Type.Trim(), item.Type.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Item:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Item) && 
							!vals.ContainsKey(item.Item.Trim())) { vals.Add(item.Item.Trim(), item.Item.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Year:
					foreach (Equipment item in this)
					{
						if (item.Year != null &&
							!String.IsNullOrEmpty(item.Year.ToString()) && 
							!vals.ContainsKey(item.Year.ToString().Trim())) { vals.Add(item.Year.ToString().Trim(), item.Year.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.Make:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Make) && 
							!vals.ContainsKey(item.Make.Trim())) { vals.Add(item.Make.Trim(), item.Make.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Model:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Model) && 
							!vals.ContainsKey(item.Model.Trim())) { vals.Add(item.Model.Trim(), item.Model.Trim()); }
					}
					break;
				case LEAD.EquipmentField.ParentEquipID:
					foreach (Equipment item in this)
					{
						if (item.ParentEquipID != null &&
							!String.IsNullOrEmpty(item.ParentEquipID.ToString()) && 
							!vals.ContainsKey(item.ParentEquipID.ToString().Trim())) { vals.Add(item.ParentEquipID.ToString().Trim(), item.ParentEquipID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.Color:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Color) && 
							!vals.ContainsKey(item.Color.Trim())) { vals.Add(item.Color.Trim(), item.Color.Trim()); }
					}
					break;
				case LEAD.EquipmentField.NumDoors:
					foreach (Equipment item in this)
					{
						if (item.NumDoors != null &&
							!String.IsNullOrEmpty(item.NumDoors.ToString()) && 
							!vals.ContainsKey(item.NumDoors.ToString().Trim())) { vals.Add(item.NumDoors.ToString().Trim(), item.NumDoors.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.LightingSystem:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.LightingSystem) && 
							!vals.ContainsKey(item.LightingSystem.Trim())) { vals.Add(item.LightingSystem.Trim(), item.LightingSystem.Trim()); }
					}
					break;
				case LEAD.EquipmentField.DepartmentRadio:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.DepartmentRadio) && 
							!vals.ContainsKey(item.DepartmentRadio.Trim())) { vals.Add(item.DepartmentRadio.Trim(), item.DepartmentRadio.Trim()); }
					}
					break;
				case LEAD.EquipmentField.NumSpotLights:
					foreach (Equipment item in this)
					{
						if (item.NumSpotLights != null &&
							!String.IsNullOrEmpty(item.NumSpotLights.ToString()) && 
							!vals.ContainsKey(item.NumSpotLights.ToString().Trim())) { vals.Add(item.NumSpotLights.ToString().Trim(), item.NumSpotLights.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.VehicleID:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.VehicleID) && 
							!vals.ContainsKey(item.VehicleID.Trim())) { vals.Add(item.VehicleID.Trim(), item.VehicleID.Trim()); }
					}
					break;
				case LEAD.EquipmentField.ComputerEquipID:
					foreach (Equipment item in this)
					{
						if (item.ComputerEquipID != null &&
							!String.IsNullOrEmpty(item.ComputerEquipID.ToString()) && 
							!vals.ContainsKey(item.ComputerEquipID.ToString().Trim())) { vals.Add(item.ComputerEquipID.ToString().Trim(), item.ComputerEquipID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.SerialNum:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.SerialNum) && 
							!vals.ContainsKey(item.SerialNum.Trim())) { vals.Add(item.SerialNum.Trim(), item.SerialNum.Trim()); }
					}
					break;
				case LEAD.EquipmentField.LicenseNum:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.LicenseNum) && 
							!vals.ContainsKey(item.LicenseNum.Trim())) { vals.Add(item.LicenseNum.Trim(), item.LicenseNum.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Mileage:
					foreach (Equipment item in this)
					{
						if (item.Mileage != null &&
							!String.IsNullOrEmpty(item.Mileage.ToString()) && 
							!vals.ContainsKey(item.Mileage.ToString().Trim())) { vals.Add(item.Mileage.ToString().Trim(), item.Mileage.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.RoundCount:
					foreach (Equipment item in this)
					{
						if (item.RoundCount != null &&
							!String.IsNullOrEmpty(item.RoundCount.ToString()) && 
							!vals.ContainsKey(item.RoundCount.ToString().Trim())) { vals.Add(item.RoundCount.ToString().Trim(), item.RoundCount.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.PartNum:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.PartNum) && 
							!vals.ContainsKey(item.PartNum.Trim())) { vals.Add(item.PartNum.Trim(), item.PartNum.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Category:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Category) && 
							!vals.ContainsKey(item.Category.Trim())) { vals.Add(item.Category.Trim(), item.Category.Trim()); }
					}
					break;
				case LEAD.EquipmentField.OtherID:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.OtherID) && 
							!vals.ContainsKey(item.OtherID.Trim())) { vals.Add(item.OtherID.Trim(), item.OtherID.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Status:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Status) && 
							!vals.ContainsKey(item.Status.Trim())) { vals.Add(item.Status.Trim(), item.Status.Trim()); }
					}
					break;
				case LEAD.EquipmentField.ContactID:
					foreach (Equipment item in this)
					{
						if (item.ContactID != null &&
							!String.IsNullOrEmpty(item.ContactID.ToString()) && 
							!vals.ContainsKey(item.ContactID.ToString().Trim())) { vals.Add(item.ContactID.ToString().Trim(), item.ContactID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.Location:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Location) && 
							!vals.ContainsKey(item.Location.Trim())) { vals.Add(item.Location.Trim(), item.Location.Trim()); }
					}
					break;
				case LEAD.EquipmentField.TeamID:
					foreach (Equipment item in this)
					{
						if (item.TeamID != null &&
							!String.IsNullOrEmpty(item.TeamID.ToString()) && 
							!vals.ContainsKey(item.TeamID.ToString().Trim())) { vals.Add(item.TeamID.ToString().Trim(), item.TeamID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.TeamName:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.TeamName) && 
							!vals.ContainsKey(item.TeamName.Trim())) { vals.Add(item.TeamName.Trim(), item.TeamName.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Bureau:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Bureau) && 
							!vals.ContainsKey(item.Bureau.Trim())) { vals.Add(item.Bureau.Trim(), item.Bureau.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Division:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Division) && 
							!vals.ContainsKey(item.Division.Trim())) { vals.Add(item.Division.Trim(), item.Division.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Funding:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Funding) && 
							!vals.ContainsKey(item.Funding.Trim())) { vals.Add(item.Funding.Trim(), item.Funding.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Description:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Description) && 
							!vals.ContainsKey(item.Description.Trim())) { vals.Add(item.Description.Trim(), item.Description.Trim()); }
					}
					break;
				case LEAD.EquipmentField.Comments:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Comments) && 
							!vals.ContainsKey(item.Comments.Trim())) { vals.Add(item.Comments.Trim(), item.Comments.Trim()); }
					}
					break;
				case LEAD.EquipmentField.VendorContactID:
					foreach (Equipment item in this)
					{
						if (item.VendorContactID != null &&
							!String.IsNullOrEmpty(item.VendorContactID.ToString()) && 
							!vals.ContainsKey(item.VendorContactID.ToString().Trim())) { vals.Add(item.VendorContactID.ToString().Trim(), item.VendorContactID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.VendorPartNumber:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.VendorPartNumber) && 
							!vals.ContainsKey(item.VendorPartNumber.Trim())) { vals.Add(item.VendorPartNumber.Trim(), item.VendorPartNumber.Trim()); }
					}
					break;
				case LEAD.EquipmentField.PurchasePrice:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.PurchasePrice.ToString()) && 
							!vals.ContainsKey(item.PurchasePrice.ToString().Trim())) { vals.Add(item.PurchasePrice.ToString().Trim(), item.PurchasePrice.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.Tax:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Tax.ToString()) && 
							!vals.ContainsKey(item.Tax.ToString().Trim())) { vals.Add(item.Tax.ToString().Trim(), item.Tax.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.SH:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.SH.ToString()) && 
							!vals.ContainsKey(item.SH.ToString().Trim())) { vals.Add(item.SH.ToString().Trim(), item.SH.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentField.Warranty:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.Warranty) && 
							!vals.ContainsKey(item.Warranty.Trim())) { vals.Add(item.Warranty.Trim(), item.Warranty.Trim()); }
					}
					break;
				case LEAD.EquipmentField.VIN:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.VIN) && 
							!vals.ContainsKey(item.VIN.Trim())) { vals.Add(item.VIN.Trim(), item.VIN.Trim()); }
					}
					break;
				case LEAD.EquipmentField.AddedByUser:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.AddedByUser) && 
							!vals.ContainsKey(item.AddedByUser.Trim())) { vals.Add(item.AddedByUser.Trim(), item.AddedByUser.Trim()); }
					}
					break;
				case LEAD.EquipmentField.UpdatedByUser:
					foreach (Equipment item in this)
					{
						if (!String.IsNullOrEmpty(item.UpdatedByUser) && 
							!vals.ContainsKey(item.UpdatedByUser.Trim())) { vals.Add(item.UpdatedByUser.Trim(), item.UpdatedByUser.Trim()); }
					}
					break;
			}

			List<string> rtv = new List<string>();
			rtv.AddRange(vals.Keys);
			return rtv;
		}
		#endregion GetDistinct Method(s)

		#region Random Methods
		#region GetLocalChildren Methods
		/// <summary>
		/// Get all the local children (not from the DB) that are of type EquipmentMaintSchedule
		/// </summary>
		/// <returns>A EquipmentMaintScheduleCollection containing all the local children.</returns>
		public EquipmentMaintScheduleCollection GetLocalChildren_EquipmentMaintSchedule()
		{
			EquipmentMaintScheduleCollection rtv = new EquipmentMaintScheduleCollection();

			foreach (Equipment parent in this)
			{
				foreach (EquipmentMaintSchedule child in parent.Coll_EquipmentMaintSchedule)
				{
					rtv.Add(child);
				}
			}

			return rtv;
		}

		/// <summary>
		/// Get all the local children (not from the DB) that are of type EquipmentMovement
		/// </summary>
		/// <returns>A EquipmentMovementCollection containing all the local children.</returns>
		public EquipmentMovementCollection GetLocalChildren_EquipmentMovement()
		{
			EquipmentMovementCollection rtv = new EquipmentMovementCollection();

			foreach (Equipment parent in this)
			{
				foreach (EquipmentMovement child in parent.Coll_EquipmentMovement)
				{
					rtv.Add(child);
				}
			}

			return rtv;
		}
		#endregion GetLocalChildren Methods

		/// <summary>
		/// A collection of all broken rules associated with the collection.
		/// (Includes all the child classes validation as well.)
		/// </summary>
		public ClassGenExceptionCollection BrokenRules
		{
			get 
			{
				ClassGenExceptionCollection exceptions = new ClassGenExceptionCollection();
				foreach (Equipment item in this.ActiveRecords)
				{
					ClassGenExceptionCollection exCollection = item.BrokenRules;
					if (exCollection.Count > 0)
					{
						foreach (ClassGenException ex in exCollection)
						{
							ex.RecordIndex = (this.IndexOf(item)) + 1;
							ex.RecordKey = item.EquipID.ToString();
						}
						exceptions.AddRange(exCollection);
					}
				}

				exceptions.AddRange(_rules.BrokenRules);

				return exceptions;
			}
		}

		/// <summary>
		/// Gets all the records that don't have a deleted status in the collection
		/// </summary>
		/// <returns>A EquipmentCollection of current records.</returns>
		public EquipmentCollection GetCurrent()
		{
			return this.ActiveRecords;
		}

		/// <summary>
		/// Checks to see if the element exists in the collection.
		/// </summary>
		/// <param name="equipID">A key field used to find the correct record.</param>
		/// <returns>A boolean indicating whether the element exists in the collection.</returns>
		public bool Exists(long equipID)
		{
			return (this.Exists(new Predicate<Equipment>(delegate (Equipment obj) 
				{ return obj.EquipID == equipID; })));
		}

		/// <summary>
		/// Removes the element from the collection based on the argument passed.
		/// </summary>
		/// <param name="equipID">A key field used to find the correct record.</param>
		public void Remove(long equipID)
		{
			for (int i = this.Count - 1; i >= 0; i--)
			{
				if (this[i].EquipID == equipID)
				{
					this.RemoveAt(i);
				}
			}
		}
		
		#region Refresh Collection Methods
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		public ClassGenExceptionCollection RefreshCollection(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = true;
				errors.AddRange(this.GetFromDB());
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshCollection()
		{
			return RefreshCollection((int)_refreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (_isLoaded)
			{
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
				errors.AddRange(this.GetFromDB());	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}
		#endregion Refresh Collection Methods
		#endregion Random Methods

		#region DataTable Methods
		/// <summary>
		/// Converts the object to a datatable. 
		/// Does not include deleted records. 
		/// </summary>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable()
		{
			return ToDataTable(false);
		}

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="includeDeleted">Whether to include deleted records in the datatable.</param>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable(bool includeDeleted)
		{
			// Generate the datatable object first
			DataTable dt = this.ToEmptyDataTable();

			// Now, go through and build the data table with actual rows
			int count = 0;
			foreach (Equipment item in this)
			{
				if (item.RecordStatus == RecordStatus.Current ||
					item.RecordStatus == RecordStatus.Modified ||
					item.RecordStatus == RecordStatus.New ||
					(item.RecordStatus == RecordStatus.Deleted && includeDeleted))
				{
					dt.Rows.Add(item.ToDataRow(dt));
					this.OnDataTablePopulate(string.Empty, string.Empty, string.Empty, this.Count, count + 1);
				}
				count++;
			}
			
			// Return the data table
			return dt;
		}

		/// <summary>
		/// Creates an empty datatable with the object's structure.
		/// </summary>
		/// <returns>An empty DataTable with the object's structure.</returns>
		public DataTable ToEmptyDataTable()
		{
			// Return the data table
			return EmptyDataTableWithIL<Equipment>();
		}

		/// <summary>
		/// Event Handler to deal with populating the information
		/// </summary>
		public delegate void DataTablePopulateEventHandler(object sender, PopulateUpdateDelete_EventArgs e);
		/// <summary>
		/// Occurs when this class populates a DataTable with a row of its data.
		/// </summary>
		public event DataTablePopulateEventHandler DataTablePopulate;
		/// <summary>
		/// Calls the DataTable.Populate event.
		/// </summary>
		/// <param name="name">The name of the record in the DataRow.</param>
		/// <param name="description">A description of the record.</param>
		/// <param name="errors">The names of any exceptions that cropped up.</param>
		/// <param name="totalCount">The total number of rows in the DataTable.</param>
		/// <param name="currentIndex">The current Index the iterator has reached.</param>
		protected void OnDataTablePopulate(string name, string description, string errors, int totalCount, int currentIndex)
		{
			if (DataTablePopulate != null)
			{
				PopulateUpdateDelete_EventArgs e = new PopulateUpdateDelete_EventArgs(name, description, errors, totalCount, currentIndex);
				DataTablePopulate(this, e);
			}
		}
		#endregion DataTable Methods

		#region Static Methods
		/// <summary>
		/// Delete records from the table based on a given criteria.
		/// </summary>
		/// <remarks>
		/// The Where clause cannot be empty.
		/// To delete all the records from the table, use the LEADBaseObject.DeleteAll() method, instead.
		/// </remarks>
		/// <param name="whereClause">The SQL where clause to use on the system.</param>
		/// <param name="errors">A ClassGenExceptionCollection to add any exception reports to.</param>
		/// <returns>The number of records affected by the delete.</returns>
		public static int Delete(string whereClause, ref ClassGenExceptionCollection errors)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			int recsAffected = 0;

			if (String.IsNullOrEmpty(whereClause))
			{
				errors.Add(new ClassGenException("The where clause cannot be empty.  " + 
					"If you want to delete all records in the table, please call " + 
					"the LEADBaseObject.DeleteAll() method.", ClassGenExceptionIconType.Critical));
				return -1;
			}

			try
			{
				sql = "DELETE FROM tEquipment " +
					"WHERE " + whereClause.Trim();
				cmd = new SqlCommand(sql);
				recsAffected = DAL.SQLExecNonQuery(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return recsAffected;
		}
		#endregion Static Methods

		#region Json.NET Serialization Methods
		/// <summary>
		/// Attempt to serialize the EquipmentCollection object to the server
		/// </summary>
		/// <param name="obj">The EquipmentCollection object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(EquipmentCollection obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the EquipmentCollection object from the server
		/// </summary>
		/// <param name="obj">The EquipmentCollection object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A EquipmentCollection object containing the return from the method</returns>
		public static EquipmentCollection DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			EquipmentCollection rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<EquipmentCollection>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization Methods

		#region DataSet Methods
		/// <summary>
		/// Converts the collection to a Dataset and passes it back.
		/// All records with a deleted status are removed from the collection before being passed back.
		/// </summary>
		/// <returns>The collection converted to a DataSet object.</returns>
		public DataSet ToDataSet()
		{
			return ToDataSet(false);
		}

		/// <summary>
		/// Converts the collection to a Dataset and passes it back.
		/// </summary>
		/// <param name="includeDeleted">False to remove all records marked for deletion before converting.</param>
		/// <returns>The collection converted to a DataSet object.</returns>
		public DataSet ToDataSet(bool includeDeleted)
		{
			// Create the DataSet you're going to send back
			DataSet ds = new DataSet();
			
			// Get the base datatable
			DataTable dt = this.ToDataTable(includeDeleted);
			ds.Tables.Add(dt);
			
			// Now get all the sub objects and link them in
			DataRow newRow = dt.NewRow();
			
			EquipmentMaintScheduleCollection Coll_EquipmentMaintSchedule = new EquipmentMaintScheduleCollection();
			DataTable dtEquipmentMaintSchedule = Coll_EquipmentMaintSchedule.ToEmptyDataTable();
			
			EquipmentMovementCollection Coll_EquipmentMovement = new EquipmentMovementCollection();
			DataTable dtEquipmentMovement = Coll_EquipmentMovement.ToEmptyDataTable();
			
			foreach (Equipment item in this)
			{
				// EquipmentMaintSchedule
				dt = item.Coll_EquipmentMaintSchedule.ToDataTable(includeDeleted);
				foreach (DataRow row in dt.Rows)
				{
					newRow = dtEquipmentMaintSchedule.NewRow();
					foreach (DataColumn col in dtEquipmentMaintSchedule.Columns)
					{
						 newRow[col.ColumnName] = row[col.ColumnName];
					}
					dtEquipmentMaintSchedule.Rows.Add(newRow);
				}
				
				// EquipmentMovement
				dt = item.Coll_EquipmentMovement.ToDataTable(includeDeleted);
				foreach (DataRow row in dt.Rows)
				{
					newRow = dtEquipmentMovement.NewRow();
					foreach (DataColumn col in dtEquipmentMovement.Columns)
					{
						 newRow[col.ColumnName] = row[col.ColumnName];
					}
					dtEquipmentMovement.Rows.Add(newRow);
				}
			}
			
			// Add the datatables to the dataset
			ds.Tables.Add(dtEquipmentMaintSchedule);
			ds.Relations.Add("Equipment_EquipmentMaintSchedule", ds.Tables[0].Columns["EquipID"], ds.Tables[ds.Tables.Count - 1].Columns["EquipID"]);
			
			ds.Tables.Add(dtEquipmentMovement);
			ds.Relations.Add("Equipment_EquipmentMovement", ds.Tables[0].Columns["EquipID"], ds.Tables[ds.Tables.Count - 1].Columns["EquipID"]);
			

			// Send back the dataset
			return ds;
		}
		#endregion DataSet Methods

		#region Threaded Get
		private void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			_asyncConnection = DAL.OpenConnection();

			// Create the temp table on the connection
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			sql = 
				"IF object_id('tempdb..#Equipment') IS NOT NULL  DROP TABLE #Equipment; " + 
					"CREATE TABLE #Equipment (iEquipID bigint, iItemIndex INT IDENTITY(1,1) PRIMARY KEY CLUSTERED);  " + 
					"INSERT INTO #Equipment (iEquipID) SELECT iEquipID FROM tEquipment" + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " WHERE " + this.GetCollectionConfig.WhereClause : "") + ";  " + 
					"SELECT COUNT(*) AS iCount FROM #Equipment "; 
			cmd = new SqlCommand(sql);
			dt = DAL.SQLExecDataTable(cmd, _asyncConnection);

			int totalCount = int.Parse(dt.Rows[0][0].ToString());		// Get the count of records in the table

			BackgroundWorker worker = sender as BackgroundWorker;
			GetAsync(worker, e, _asyncConnection, totalCount, this.GetCollectionConfig.PageSize);		// Start the work
		}

		private void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
		{
			if (e.UserState != null)
			{
				EquipmentCollection_GetAsyncObject obj = (EquipmentCollection_GetAsyncObject)e.UserState;
				this.OnGetThreadedProgress(obj.CurrentIndex, obj.TotalCount, obj.EquipmentCollection);
			}
		}

		private void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
		{
			DAL.CloseConnection(_asyncConnection);		// Close the connection
			this.OnGetThreadedCompleted();
			this.IsLoaded = true;		// Set the IsLoaded flag
		}

		/// <summary>
		/// The method that actually does the async Get
		/// </summary>
		private void GetAsync(BackgroundWorker worker, 
			DoWorkEventArgs e, 
			SqlConnection oConn, 
			int totalCount,
			int pageSize)
		{
			int currentIndex = 0, pageStart = 0, pageEnd = 0;
			decimal totalMilleseconds = 0;

			DateTime lastGetStart = DateTime.Now;

			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			EquipmentCollection coll = new EquipmentCollection();
			Equipment item = new Equipment();

			if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be

			// Run the method as long as we have records
			while (currentIndex < totalCount)
			{
				sql = string.Empty;  cmd = null;  dt = new DataTable();

				pageStart = currentIndex + 1;
				pageEnd = pageStart - 1 + pageSize;

				sql = "SELECT [E].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tEquipment [E] " + 
					"INNER JOIN #Equipment TEMP ON [E].[iEquipID] = [TEMP].[iEquipID] " +
					"WHERE TEMP.iItemIndex BETWEEN @piStart AND @piEnd " +
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piStart", SqlDbType.Int).Value = pageStart;
				cmd.Parameters.Add("@piEnd", SqlDbType.Int).Value = pageEnd;
				lastGetStart = DateTime.Now;
				dt = DAL.SQLExecDataTable(cmd, oConn);

				// Populate the local Equipment collection
				coll = new EquipmentCollection();
				foreach (DataRow row in dt.Rows)
				{
					item = new Equipment();
					item.Get(row);
					coll.Add(item);
				}

				currentIndex += dt.Rows.Count;		// The current Index count of where we are in the set

				// Report the progress
				EquipmentCollection_GetAsyncObject obj = new EquipmentCollection_GetAsyncObject(currentIndex,
					totalCount, 
					coll);
				worker.ReportProgress((int)(currentIndex / totalCount), obj);

				// Reset the page size based on the number of records pulled back
				totalMilleseconds = (decimal)((TimeSpan)DateTime.Now.Subtract(lastGetStart)).TotalMilliseconds;
				if ((totalMilleseconds < 300 ||
					totalMilleseconds > 700) &&
					totalMilleseconds > 0)
				{
					// Redo the math on the page size to get it within 500 milleseconds
					pageSize = ((500 * pageSize) / (int)totalMilleseconds);
				}

				if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be
			}
		}

		// Events to raise as part of population thread
		/// <summary>
		/// The delegate for the GetThreadedProgress event.
		/// </summary>
		public delegate void GetThreadedProgressEventHandler(object sender, Equipment_GetCollection_EventArgs e);
		/// <summary>
		/// Occurs when the main thread calls an asynchronous thread to check on its progress getting data from a database.
		/// </summary>
		public event GetThreadedProgressEventHandler GetThreadedProgress;
		/// <summary>
		/// Calls the GetThreadedProgress event.
		/// </summary>
		public void OnGetThreadedProgress(int currentIndex, int totalCount, EquipmentCollection coll)
		{
			if (GetThreadedProgress != null)
			{
				// Add the items found in the collection to the current set
				foreach (Equipment a in coll)
				{
					this.Add(a);		// Add the Equipment
				}

				Equipment_GetCollection_EventArgs e = new Equipment_GetCollection_EventArgs(currentIndex, totalCount, coll);
				GetThreadedProgress(this, e);
			}
		}

		/// <summary>
		/// The delegate for the GetThreadedCompleted event.
		/// </summary>
		public delegate void GetThreadedCompletedEventHandler(object sender, EventArgs e);
		/// <summary>
		/// Occurs when an asynchronous thread finishes getting data from a database.
		/// </summary>
		public event GetThreadedCompletedEventHandler GetThreadedCompleted;
		/// <summary>
		/// Calls the GetThreadedCompleted event.
		/// </summary>
		public void OnGetThreadedCompleted()
		{
			if (GetThreadedCompleted != null)
			{
				EventArgs e = new EventArgs();
				GetThreadedCompleted(this, e);
			}
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(int pageSize, string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		public void GetFromDBThreaded(int pageSize)
		{
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		public void GetFromDBThreaded()
		{
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Stop the Background worker from getting anymore
		/// </summary>
		public void GetFromDBThreadedStop()
		{
			_backgroundWorker.CancelAsync();
		}
		#endregion Threaded Get

		#region IClassGenLogXMLCollection Implementation
		/// <summary>
		/// Get the collection as an XML Stream with all base model properties included.
		/// </summary>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the collection as an XML Stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base model properties.</param>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();
			foreach (Equipment item in this)
			{
				sb.Append(item.GetAsXML(includeBaseProperties));
			}

			// Include the header/footer for the stream
			sb.Insert(0, "<EquipmentCollection>" + Environment.NewLine);
			sb.Append("</EquipmentCollection>" + Environment.NewLine);

			return sb.ToString();
		}

		/// <summary>
		/// Get the read elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <param name="newElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "new".</param>
		/// <param name="readElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "read".</param>
		/// <param name="changedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "changed".</param>
		/// <param name="deletedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "deleted".</param>
		public void GetXMLChanges(ref List<string> newElements,
			ref List<string> readElements,
			ref List<string> changedElements,
			ref List<string> deletedElements)
		{
			StringBuilder sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);

			// Clear out the collections
			newElements = new List<string>();
			readElements = new List<string>();
			changedElements = new List<string>();
			deletedElements = new List<string>();

			// Go through the records and take care of them
			foreach (Equipment item in this)
			{
				switch (item.RecordStatus)
				{
					case RecordStatus.Current:
						// Don't forget the to string
						sbRead.Append("<Equipment>" + Environment.NewLine);
						sbRead.Append("\t<EquipID>" + item.EquipID.ToString() + "</EquipID>" + Environment.NewLine);
						sbRead.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbRead.Append("\t<Type>" + (item.Type != null ? item.Type : "NULL") + "</Type>" + Environment.NewLine);
						sbRead.Append("\t<Item>" + (item.Item != null ? item.Item : "NULL") + "</Item>" + Environment.NewLine);
						sbRead.Append("\t<Year>" + (item.Year != null ? item.Year.ToString() : "NULL") + "</Year>" + Environment.NewLine);
						sbRead.Append("</Equipment>" + Environment.NewLine);

						if (sbRead.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging) 
						{ 
							readElements.Add(sbRead.ToString());
							sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader); 
						}
						break;

					case RecordStatus.Deleted:
						sbDeleted.Append("<Equipment>" + Environment.NewLine);
						sbDeleted.Append("\t<EquipID>" + item.EquipID.ToString() + "</EquipID>" + Environment.NewLine);
						sbDeleted.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbDeleted.Append("\t<Type>" + (item.Type != null ? item.Type : "NULL") + "</Type>" + Environment.NewLine);
						sbDeleted.Append("\t<Item>" + (item.Item != null ? item.Item : "NULL") + "</Item>" + Environment.NewLine);
						sbDeleted.Append("\t<Year>" + (item.Year != null ? item.Year.ToString() : "NULL") + "</Year>" + Environment.NewLine);
						sbDeleted.Append("</Equipment>" + Environment.NewLine);

						if (sbDeleted.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							deletedElements.Add(sbDeleted.ToString());
							sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.New:
						sbNew.Append("<Equipment>" + Environment.NewLine);
						sbNew.Append("\t<EquipID>" + item.EquipID.ToString() + "</EquipID>" + Environment.NewLine);
						sbNew.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbNew.Append("\t<Type>" + (item.Type != null ? item.Type : "NULL") + "</Type>" + Environment.NewLine);
						sbNew.Append("\t<Item>" + (item.Item != null ? item.Item : "NULL") + "</Item>" + Environment.NewLine);
						sbNew.Append("\t<Year>" + (item.Year != null ? item.Year.ToString() : "NULL") + "</Year>" + Environment.NewLine);
						sbNew.Append("</Equipment>" + Environment.NewLine);

						if (sbNew.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							newElements.Add(sbNew.ToString());
							sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.Modified:
						sbChanged.Append(item.GetChangedElementsAsXML() + Environment.NewLine);

						if (sbChanged.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							changedElements.Add(sbChanged.ToString());
							sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

				}
			}

			// Add the final strings to the list
			newElements.Add(sbNew.ToString());
			readElements.Add(sbRead.ToString());
			deletedElements.Add(sbDeleted.ToString());
			changedElements.Add(sbChanged.ToString());
		}

		/// <summary>
		/// Load the XML into a collection based on what's passed in.
		/// </summary>
		/// <param name="xml">The XML to process.</param>
		/// <returns>The completed EquipmentCollection object.</returns>
		public static EquipmentCollection LoadFromXML(string xml)
		{
			EquipmentCollection coll = new EquipmentCollection();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.LoadXml(xml);
			// <EquipmentCollection>
			foreach (System.Xml.XmlNode nodeMain in doc.ChildNodes)
			{
				// <Equipment>
				foreach (System.Xml.XmlNode node in nodeMain.ChildNodes)
				{
					// These are the elements <DetailGUID>, <UserName>, etc.
					Equipment item = Equipment.LoadFromXML(node.OuterXml);
					if (item != null) { coll.Add(item); }
				}
			}
			return coll;
		}
		#endregion IClassGenLogXMLCollection Implementation
		
		#region Mathematical Functions

		/// <summary>
		/// The number of records that have a Year value.
		/// </summary>
		public decimal CountOfYear
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average Year.
		/// </summary>
		public decimal AvgOfYear
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Year", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's Year.
		/// </summary>
		public decimal SumOfYear
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Year", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest Year present in the collection.
		/// </summary>
		public decimal MinOfYear
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Year", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest Year present in the collection.
		/// </summary>
		public decimal MaxOfYear
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Year", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a NumDoors value.
		/// </summary>
		public decimal CountOfNumDoors
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average NumDoors.
		/// </summary>
		public decimal AvgOfNumDoors
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumDoors", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's NumDoors.
		/// </summary>
		public decimal SumOfNumDoors
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumDoors", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest NumDoors present in the collection.
		/// </summary>
		public decimal MinOfNumDoors
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumDoors", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest NumDoors present in the collection.
		/// </summary>
		public decimal MaxOfNumDoors
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumDoors", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a NumSpotLights value.
		/// </summary>
		public decimal CountOfNumSpotLights
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average NumSpotLights.
		/// </summary>
		public decimal AvgOfNumSpotLights
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumSpotLights", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's NumSpotLights.
		/// </summary>
		public decimal SumOfNumSpotLights
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumSpotLights", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest NumSpotLights present in the collection.
		/// </summary>
		public decimal MinOfNumSpotLights
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumSpotLights", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest NumSpotLights present in the collection.
		/// </summary>
		public decimal MaxOfNumSpotLights
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "NumSpotLights", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a Mileage value.
		/// </summary>
		public decimal CountOfMileage
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average Mileage.
		/// </summary>
		public decimal AvgOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's Mileage.
		/// </summary>
		public decimal SumOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest Mileage present in the collection.
		/// </summary>
		public decimal MinOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest Mileage present in the collection.
		/// </summary>
		public decimal MaxOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a RoundCount value.
		/// </summary>
		public decimal CountOfRoundCount
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average RoundCount.
		/// </summary>
		public decimal AvgOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's RoundCount.
		/// </summary>
		public decimal SumOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest RoundCount present in the collection.
		/// </summary>
		public decimal MinOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest RoundCount present in the collection.
		/// </summary>
		public decimal MaxOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The earliest DateStatus present in the collection.
		/// </summary>
		public DateTime? MinOfDateStatus
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateStatus; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateStatus < rtv) { rtv = item.DateStatus; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateStatus present in the collection.
		/// </summary>
		public DateTime? MaxOfDateStatus
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateStatus; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateStatus > rtv) { rtv = item.DateStatus; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The number of records that have a PurchasePrice value.
		/// </summary>
		public decimal CountOfPurchasePrice
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average PurchasePrice.
		/// </summary>
		public decimal AvgOfPurchasePrice
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "PurchasePrice", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's PurchasePrice.
		/// </summary>
		public decimal SumOfPurchasePrice
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "PurchasePrice", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest PurchasePrice present in the collection.
		/// </summary>
		public decimal MinOfPurchasePrice
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "PurchasePrice", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest PurchasePrice present in the collection.
		/// </summary>
		public decimal MaxOfPurchasePrice
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "PurchasePrice", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a Tax value.
		/// </summary>
		public decimal CountOfTax
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average Tax.
		/// </summary>
		public decimal AvgOfTax
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Tax", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's Tax.
		/// </summary>
		public decimal SumOfTax
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Tax", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest Tax present in the collection.
		/// </summary>
		public decimal MinOfTax
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Tax", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest Tax present in the collection.
		/// </summary>
		public decimal MaxOfTax
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Tax", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a SH value.
		/// </summary>
		public decimal CountOfSH
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average SH.
		/// </summary>
		public decimal AvgOfSH
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SH", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's SH.
		/// </summary>
		public decimal SumOfSH
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SH", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest SH present in the collection.
		/// </summary>
		public decimal MinOfSH
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SH", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest SH present in the collection.
		/// </summary>
		public decimal MaxOfSH
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SH", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The earliest DatePurchase present in the collection.
		/// </summary>
		public DateTime? MinOfDatePurchase
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DatePurchase; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DatePurchase < rtv) { rtv = item.DatePurchase; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DatePurchase present in the collection.
		/// </summary>
		public DateTime? MaxOfDatePurchase
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DatePurchase; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DatePurchase > rtv) { rtv = item.DatePurchase; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateReplacement present in the collection.
		/// </summary>
		public DateTime? MinOfDateReplacement
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateReplacement; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateReplacement < rtv) { rtv = item.DateReplacement; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateReplacement present in the collection.
		/// </summary>
		public DateTime? MaxOfDateReplacement
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateReplacement; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateReplacement > rtv) { rtv = item.DateReplacement; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateAdded present in the collection.
		/// </summary>
		public DateTime? MinOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateAdded < rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateAdded present in the collection.
		/// </summary>
		public DateTime? MaxOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateAdded > rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MinOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateUpdated < rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MaxOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (Equipment item in this)
				{
					if (item.DateUpdated > rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		#endregion Mathematical Functions

		#region Collection Disposal
		/// <summary>
		/// Implement IDisposable.
		/// Do not make this method virtual.
		/// A derived class should not be able to override this method.
		/// </summary>
		public void Dispose()
		{
			if (!this.IsDisposable) { return; }

			Dispose(true);

			// Take yourself off the Finalization queue 
			// to prevent finalization code for this object
			// from executing a second time.
			GC.SuppressFinalize(this);
		}

		/// <summary>
		/// Dispose(bool disposing) executes in two distinct scenarios.
		/// If disposing equals true, the method has been called directly
		/// or indirectly by a user's code. Managed and unmanaged resources
		/// can be disposed.
		/// If disposing equals false, the method has been called by the 
		/// runtime from inside the finalizer and you should not reference 
		/// other objects. Only unmanaged resources can be disposed.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (!this.IsDisposable) { return; }

			// Check to see if Dispose has already been called.
			if (!this._disposed)
			{
				// Set the disposed on this object to true
				this._disposed = true;

				// If disposing equals true, dispose all managed 
				// and unmanaged resources.
				if (disposing)
				{
					// Dispose managed resources.
					if (_backgroundWorker != null) { _backgroundWorker.Dispose(); _backgroundWorker = null; } 
					GetCollectionConfig = null;
					if (_rules != null) { _rules.Clear(); _rules = null; }
					if (_asyncConnection != null) { _asyncConnection.Dispose(); _asyncConnection = null; }

					// Go through and properly dispose of each object
					foreach (Equipment item in this)
					{
						if (item.IsDisposable) { item.Dispose(); }
					}

					// Deal with the keyed collections
					KeyedCollection = new Dictionary<long, Equipment>();

					// Clear out the collection
					this.Clear();
				}
				// Release unmanaged resources. If disposing is false, 
				// only the following code is executed.
				// <Enter Disposal here> 
				// Note that this is not thread safe.
				// Another thread could start disposing the object
				// after the managed resources are disposed,
				// but before the disposed flag is set to true.
				// If thread safety is necessary, it must be
				// implemented by the client.
			}
		}

		/// <summary>
		/// Use C# destructor syntax for finalization code.
		/// This destructor will run only if the Dispose method 
		/// does not get called.
		/// It gives your base class the opportunity to finalize.
		/// Do not provide destructors in types derived from this class.
		/// </summary>
		~EquipmentCollection()
		{
			if (!this.IsDisposable) { return; }

			// Do not re-create Dispose clean-up code here.
			// Calling Dispose(false) is optimal in terms of
			// readability and maintainability.
			Dispose(false);
		}
		#endregion Collection Disposal
	}
	#endregion Equipment Collection

	#region Event Handler for Async Object
	/// <summary>
	/// Custom class for Equipment event args such as population
	/// </summary>
	[Serializable]
	public class Equipment_GetCollection_EventArgs : EventArgs
	{
		private int _totalCount = 0;
		private int _currentIndex = 0;
		private EquipmentCollection _coll = new EquipmentCollection();

		/// <summary>
		/// Creates a new Equipment_GetCollection_EventArgs with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record being populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public Equipment_GetCollection_EventArgs(int currentIndex, int totalCount, EquipmentCollection coll)
		{
			_totalCount = totalCount;
			_currentIndex = currentIndex;
			_coll = coll;
		}

		/// <summary>
		/// Creates a new empty Equipment_GetCollection_EventArgs.
		/// </summary>
		public Equipment_GetCollection_EventArgs()
		{
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public EquipmentCollection EquipmentCollection
		{
			get { return _coll; }
		}
	}
	#endregion Event Handler for Async Object

	#region Async Object for the Threaded Get
	/// <summary>
	/// An object to populate a EquipmentCollection asynchronously.
	/// </summary>
	public class EquipmentCollection_GetAsyncObject
	{
		private int _currentIndex = 0;
		private int _totalCount = 0;
		private EquipmentCollection _coll = new EquipmentCollection();

		/// <summary>
		/// Creates a new Equipment_GetAsyncObject with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record to be populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public EquipmentCollection_GetAsyncObject(int currentIndex, int totalCount, EquipmentCollection coll)
		{
			_currentIndex = currentIndex;
			_totalCount = totalCount;
			_coll = coll;
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public EquipmentCollection EquipmentCollection
		{
			get { return _coll; }
		}
	}
	#endregion Async Object for the Threaded Get

}

