using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using System.Text;

using LEADBase;

namespace LEAD
{
	/// <summary>
	/// Class Name: Contact
	/// Generated by GenClasses v.4.0.0 on 07/28/2017 05:18 AM
	/// </summary>
	#region Contact Class
	[Serializable]
	public partial class Contact : LEAD_BaseObject, 
		IClassGenLogXML, IClassGenCopyWithNewID, IClassGenPropertyChanging, INotifyPropertyChanging
	{
		#region Private Properties
		private long _contactID = 0;
		private long _agencyID = 0;
		private string _currentStatus = string.Empty;
		private string _lastName = null;
		private string _firstName = null;
		private string _middleName = null;
		private string _maidenName = null;
		private string _companyName = null;
		private string _spouseName = null;
		private string _email = null;
		private string _ssn = null;
		private string _postid = null;
		private string _gender = null;
		private string _ethnicity = null;
		private DateTime? _dtDOB = null;
		private string _dlnum = null;
		private DateTime? _dtDLExpires = null;
		private int? _height = null;
		private int? _weight = null;
		private string _hairColor = null;
		private string _eyeColor = null;
		private bool _peaceOfficer = false;
		private bool _requiredToQualifyWithFirearm = false;
		private string _traineeStatus = null;
		private string _timeBase = null;
		private string _maritalStatus = null;
		private string _vendorSupplierNum = null;
		private string _vendorContactName = null;
		private string _vendorContactPhone = null;
		private bool _inactive = false;
		private DateTime _dtAdded = DateTime.Now;
		private string _addedByUser = null;
		private DateTime _dtUpdated = DateTime.Now;
		private string _updatedByUser = null;
		private byte[] _rowversion = null;

		private Contact _originalValues = null;

		private bool _disposed = false;

		// Parent Items
		private Agency _agencyItem = null;

		// Child Items
		private ContactAddressCollection _contactAddressCollection = new ContactAddressCollection();
		private ContactLanguageCollection _contactLanguageCollection = new ContactLanguageCollection();
		private ContactPhoneCollection _contactPhoneCollection = new ContactPhoneCollection();
		#endregion Private Properties

		#region Constructors

		/// <summary>
		/// Creates a new Contact.
		/// </summary>
		public Contact()
		{
			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}

		/// <summary>
		/// Builds a Contactbased on a certain record from the database.
		/// </summary>
		/// <param name="contactID">A primary key used to select the record.</param>
		public Contact(long contactID)
		{
			this.Get(contactID);

			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}
		#endregion Constructors

		#region Disposal
		/// <summary>
		/// Override of the disposal method
		/// </summary>
		/// <param name="disposing">True if the object is being disposed, otherwise false</param>
		protected override void Dispose(bool disposing)
		{
			if (!this._isDisposable) { return; }

			if (!this._disposed)
			{
				try
				{
					// Set the disposed on this object to true
					this._disposed = true;

					if (disposing)
					{
						// Release the managed resources you added in
						// this derived class here.

						// Dispose of the original values object
						if (_originalValues != null && _originalValues.IsDisposable) { _originalValues.Dispose(); _originalValues = null; }

						// Dispose of the Parent Items
						if (AgencyItem != null && AgencyItem.IsDisposable) { AgencyItem.Dispose(); AgencyItem = null; }

						// Dispose of the Child Items
						if (_contactAddressCollection != null && _contactAddressCollection.IsDisposable) { _contactAddressCollection.Dispose(); _contactAddressCollection = null; }
						if (_contactLanguageCollection != null && _contactLanguageCollection.IsDisposable) { _contactLanguageCollection.Dispose(); _contactLanguageCollection = null; }
						if (_contactPhoneCollection != null && _contactPhoneCollection.IsDisposable) { _contactPhoneCollection.Dispose(); _contactPhoneCollection = null; }
					}

					// Release the native unmanaged resources you added
					// in this derived class here.
					// <No Unmanaged Resources in this block>
				}
				finally
				{
					// Call Dispose on your base class.
					if (this.IsDisposable) { base.Dispose(disposing); }
				}
			}
		}
		#endregion Disposal
		
		#region Public Properties

		/// <summary>
		/// Property generated from a child table.
		/// </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ContactAddressCollection Coll_ContactAddress
		{
			get { return _contactAddressCollection; }
			set { _contactAddressCollection = value; }
		}

		/// <summary>
		/// Property generated from a child table.
		/// </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ContactLanguageCollection Coll_ContactLanguage
		{
			get { return _contactLanguageCollection; }
			set { _contactLanguageCollection = value; }
		}

		/// <summary>
		/// Property generated from a child table.
		/// </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ContactPhoneCollection Coll_ContactPhone
		{
			get { return _contactPhoneCollection; }
			set { _contactPhoneCollection = value; }
		}

		/// <summary>
		/// Property generated from the iContactID field.
		/// </summary>
		public long ContactID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _contactID;
			}
			set 
			{
				if (_contactID != value)
				{
					bool cancelled = NotifyPropertyChanging("ContactID", _contactID, value);
					if (!cancelled)
					{
						_contactID = value;
						SetModifiedStatus("ContactID");
						NotifyPropertyChanged("ContactID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iAgencyID field.
		/// </summary>
		public long AgencyID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _agencyID;
			}
			set 
			{
				if (_agencyID != value)
				{
					bool cancelled = NotifyPropertyChanging("AgencyID", _agencyID, value);
					if (!cancelled)
					{
						_agencyID = value;
						SetModifiedStatus("AgencyID");
						NotifyPropertyChanged("AgencyID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sCurrentStatus field.
		/// </summary>
		public string CurrentStatus
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _currentStatus;
			}
			set 
			{
				if (_currentStatus != value)
				{
					bool cancelled = NotifyPropertyChanging("CurrentStatus", _currentStatus, value);
					if (!cancelled)
					{
						_currentStatus = value;
						SetModifiedStatus("CurrentStatus");
						NotifyPropertyChanged("CurrentStatus", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sLastName field.
		/// </summary>
		public string LastName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _lastName;
			}
			set 
			{
				if (_lastName != value)
				{
					bool cancelled = NotifyPropertyChanging("LastName", _lastName, value);
					if (!cancelled)
					{
						_lastName = value;
						SetModifiedStatus("LastName");
						NotifyPropertyChanged("LastName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sFirstName field.
		/// </summary>
		public string FirstName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _firstName;
			}
			set 
			{
				if (_firstName != value)
				{
					bool cancelled = NotifyPropertyChanging("FirstName", _firstName, value);
					if (!cancelled)
					{
						_firstName = value;
						SetModifiedStatus("FirstName");
						NotifyPropertyChanged("FirstName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sMiddleName field.
		/// </summary>
		public string MiddleName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _middleName;
			}
			set 
			{
				if (_middleName != value)
				{
					bool cancelled = NotifyPropertyChanging("MiddleName", _middleName, value);
					if (!cancelled)
					{
						_middleName = value;
						SetModifiedStatus("MiddleName");
						NotifyPropertyChanged("MiddleName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sMaidenName field.
		/// </summary>
		public string MaidenName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _maidenName;
			}
			set 
			{
				if (_maidenName != value)
				{
					bool cancelled = NotifyPropertyChanging("MaidenName", _maidenName, value);
					if (!cancelled)
					{
						_maidenName = value;
						SetModifiedStatus("MaidenName");
						NotifyPropertyChanged("MaidenName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sCompanyName field.
		/// </summary>
		public string CompanyName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _companyName;
			}
			set 
			{
				if (_companyName != value)
				{
					bool cancelled = NotifyPropertyChanging("CompanyName", _companyName, value);
					if (!cancelled)
					{
						_companyName = value;
						SetModifiedStatus("CompanyName");
						NotifyPropertyChanged("CompanyName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sSpouseName field.
		/// </summary>
		public string SpouseName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _spouseName;
			}
			set 
			{
				if (_spouseName != value)
				{
					bool cancelled = NotifyPropertyChanging("SpouseName", _spouseName, value);
					if (!cancelled)
					{
						_spouseName = value;
						SetModifiedStatus("SpouseName");
						NotifyPropertyChanged("SpouseName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sEMail field.
		/// </summary>
		public string EMail
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _email;
			}
			set 
			{
				if (_email != value)
				{
					bool cancelled = NotifyPropertyChanging("EMail", _email, value);
					if (!cancelled)
					{
						_email = value;
						SetModifiedStatus("EMail");
						NotifyPropertyChanged("EMail", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sSSN field.
		/// </summary>
		public string SSN
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _ssn;
			}
			set 
			{
				if (_ssn != value)
				{
					bool cancelled = NotifyPropertyChanging("SSN", _ssn, value);
					if (!cancelled)
					{
						_ssn = value;
						SetModifiedStatus("SSN");
						NotifyPropertyChanged("SSN", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sPOSTID field.
		/// </summary>
		public string POSTID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _postid;
			}
			set 
			{
				if (_postid != value)
				{
					bool cancelled = NotifyPropertyChanging("POSTID", _postid, value);
					if (!cancelled)
					{
						_postid = value;
						SetModifiedStatus("POSTID");
						NotifyPropertyChanged("POSTID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sGender field.
		/// </summary>
		public string Gender
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _gender;
			}
			set 
			{
				if (_gender != value)
				{
					bool cancelled = NotifyPropertyChanging("Gender", _gender, value);
					if (!cancelled)
					{
						_gender = value;
						SetModifiedStatus("Gender");
						NotifyPropertyChanged("Gender", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sEthnicity field.
		/// </summary>
		public string Ethnicity
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _ethnicity;
			}
			set 
			{
				if (_ethnicity != value)
				{
					bool cancelled = NotifyPropertyChanging("Ethnicity", _ethnicity, value);
					if (!cancelled)
					{
						_ethnicity = value;
						SetModifiedStatus("Ethnicity");
						NotifyPropertyChanged("Ethnicity", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtDOB field.
		/// </summary>
		public DateTime? DateDOB
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtDOB;
			}
			set 
			{
				if (_dtDOB != value)
				{
					bool cancelled = NotifyPropertyChanging("DateDOB", _dtDOB, value);
					if (!cancelled)
					{
						_dtDOB = value;
						SetModifiedStatus("DateDOB");
						NotifyPropertyChanged("DateDOB", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sDLNum field.
		/// </summary>
		public string DLNum
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dlnum;
			}
			set 
			{
				if (_dlnum != value)
				{
					bool cancelled = NotifyPropertyChanging("DLNum", _dlnum, value);
					if (!cancelled)
					{
						_dlnum = value;
						SetModifiedStatus("DLNum");
						NotifyPropertyChanged("DLNum", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtDLExpires field.
		/// </summary>
		public DateTime? DateDLExpires
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtDLExpires;
			}
			set 
			{
				if (_dtDLExpires != value)
				{
					bool cancelled = NotifyPropertyChanging("DateDLExpires", _dtDLExpires, value);
					if (!cancelled)
					{
						_dtDLExpires = value;
						SetModifiedStatus("DateDLExpires");
						NotifyPropertyChanged("DateDLExpires", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iHeight field.
		/// </summary>
		public int? Height
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _height;
			}
			set 
			{
				if (_height != value)
				{
					bool cancelled = NotifyPropertyChanging("Height", _height, value);
					if (!cancelled)
					{
						_height = value;
						SetModifiedStatus("Height");
						NotifyPropertyChanged("Height", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Height rendered as a string.
		/// </summary>
		public string HeightAsString
		{
			get { return _height.ToString(); }
		}

		/// <summary>
		/// Property generated from the iWeight field.
		/// </summary>
		public int? Weight
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _weight;
			}
			set 
			{
				if (_weight != value)
				{
					bool cancelled = NotifyPropertyChanging("Weight", _weight, value);
					if (!cancelled)
					{
						_weight = value;
						SetModifiedStatus("Weight");
						NotifyPropertyChanged("Weight", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Weight rendered as a string.
		/// </summary>
		public string WeightAsString
		{
			get { return _weight.ToString(); }
		}

		/// <summary>
		/// Property generated from the sHairColor field.
		/// </summary>
		public string HairColor
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _hairColor;
			}
			set 
			{
				if (_hairColor != value)
				{
					bool cancelled = NotifyPropertyChanging("HairColor", _hairColor, value);
					if (!cancelled)
					{
						_hairColor = value;
						SetModifiedStatus("HairColor");
						NotifyPropertyChanged("HairColor", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sEyeColor field.
		/// </summary>
		public string EyeColor
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _eyeColor;
			}
			set 
			{
				if (_eyeColor != value)
				{
					bool cancelled = NotifyPropertyChanging("EyeColor", _eyeColor, value);
					if (!cancelled)
					{
						_eyeColor = value;
						SetModifiedStatus("EyeColor");
						NotifyPropertyChanged("EyeColor", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bPeaceOfficer field.
		/// </summary>
		public bool PeaceOfficer
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _peaceOfficer;
			}
			set 
			{
				if (_peaceOfficer != value)
				{
					bool cancelled = NotifyPropertyChanging("PeaceOfficer", _peaceOfficer, value);
					if (!cancelled)
					{
						_peaceOfficer = value;
						SetModifiedStatus("PeaceOfficer");
						NotifyPropertyChanged("PeaceOfficer", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of PeaceOfficer rendered as a string.
		/// </summary>
		public string PeaceOfficerAsString
		{
			get { return _peaceOfficer.ToString(); }
		}

		/// <summary>
		/// Property generated from the bRequiredToQualifyWithFirearm field.
		/// </summary>
		public bool RequiredToQualifyWithFirearm
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _requiredToQualifyWithFirearm;
			}
			set 
			{
				if (_requiredToQualifyWithFirearm != value)
				{
					bool cancelled = NotifyPropertyChanging("RequiredToQualifyWithFirearm", _requiredToQualifyWithFirearm, value);
					if (!cancelled)
					{
						_requiredToQualifyWithFirearm = value;
						SetModifiedStatus("RequiredToQualifyWithFirearm");
						NotifyPropertyChanged("RequiredToQualifyWithFirearm", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of RequiredToQualifyWithFirearm rendered as a string.
		/// </summary>
		public string RequiredToQualifyWithFirearmAsString
		{
			get { return _requiredToQualifyWithFirearm.ToString(); }
		}

		/// <summary>
		/// Property generated from the sTraineeStatus field.
		/// </summary>
		public string TraineeStatus
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _traineeStatus;
			}
			set 
			{
				if (_traineeStatus != value)
				{
					bool cancelled = NotifyPropertyChanging("TraineeStatus", _traineeStatus, value);
					if (!cancelled)
					{
						_traineeStatus = value;
						SetModifiedStatus("TraineeStatus");
						NotifyPropertyChanged("TraineeStatus", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sTimeBase field.
		/// </summary>
		public string TimeBase
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _timeBase;
			}
			set 
			{
				if (_timeBase != value)
				{
					bool cancelled = NotifyPropertyChanging("TimeBase", _timeBase, value);
					if (!cancelled)
					{
						_timeBase = value;
						SetModifiedStatus("TimeBase");
						NotifyPropertyChanged("TimeBase", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sMaritalStatus field.
		/// </summary>
		public string MaritalStatus
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _maritalStatus;
			}
			set 
			{
				if (_maritalStatus != value)
				{
					bool cancelled = NotifyPropertyChanging("MaritalStatus", _maritalStatus, value);
					if (!cancelled)
					{
						_maritalStatus = value;
						SetModifiedStatus("MaritalStatus");
						NotifyPropertyChanged("MaritalStatus", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sVendorSupplierNum field.
		/// </summary>
		public string VendorSupplierNum
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vendorSupplierNum;
			}
			set 
			{
				if (_vendorSupplierNum != value)
				{
					bool cancelled = NotifyPropertyChanging("VendorSupplierNum", _vendorSupplierNum, value);
					if (!cancelled)
					{
						_vendorSupplierNum = value;
						SetModifiedStatus("VendorSupplierNum");
						NotifyPropertyChanged("VendorSupplierNum", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sVendorContactName field.
		/// </summary>
		public string VendorContactName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vendorContactName;
			}
			set 
			{
				if (_vendorContactName != value)
				{
					bool cancelled = NotifyPropertyChanging("VendorContactName", _vendorContactName, value);
					if (!cancelled)
					{
						_vendorContactName = value;
						SetModifiedStatus("VendorContactName");
						NotifyPropertyChanged("VendorContactName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sVendorContactPhone field.
		/// </summary>
		public string VendorContactPhone
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _vendorContactPhone;
			}
			set 
			{
				if (_vendorContactPhone != value)
				{
					bool cancelled = NotifyPropertyChanging("VendorContactPhone", _vendorContactPhone, value);
					if (!cancelled)
					{
						_vendorContactPhone = value;
						SetModifiedStatus("VendorContactPhone");
						NotifyPropertyChanged("VendorContactPhone", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bInactive field.
		/// </summary>
		public bool Inactive
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _inactive;
			}
			set 
			{
				if (_inactive != value)
				{
					bool cancelled = NotifyPropertyChanging("Inactive", _inactive, value);
					if (!cancelled)
					{
						_inactive = value;
						SetModifiedStatus("Inactive");
						NotifyPropertyChanged("Inactive", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Inactive rendered as a string.
		/// </summary>
		public string InactiveAsString
		{
			get { return _inactive.ToString(); }
		}

		/// <summary>
		/// Property generated from the dtAdded field.
		/// </summary>
		public DateTime DateAdded
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtAdded;
			}
			set 
			{
				if (_dtAdded != value)
				{
					bool cancelled = NotifyPropertyChanging("DateAdded", _dtAdded, value);
					if (!cancelled)
					{
						_dtAdded = value;
						SetModifiedStatus("DateAdded");
						NotifyPropertyChanged("DateAdded", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sAddedByUser field.
		/// </summary>
		public string AddedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _addedByUser;
			}
			set 
			{
				if (_addedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("AddedByUser", _addedByUser, value);
					if (!cancelled)
					{
						_addedByUser = value;
						SetModifiedStatus("AddedByUser");
						NotifyPropertyChanged("AddedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtUpdated field.
		/// </summary>
		public DateTime DateUpdated
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtUpdated;
			}
			set 
			{
				if (_dtUpdated != value)
				{
					bool cancelled = NotifyPropertyChanging("DateUpdated", _dtUpdated, value);
					if (!cancelled)
					{
						_dtUpdated = value;
						SetModifiedStatus("DateUpdated");
						NotifyPropertyChanged("DateUpdated", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sUpdatedByUser field.
		/// </summary>
		public string UpdatedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _updatedByUser;
			}
			set 
			{
				if (_updatedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("UpdatedByUser", _updatedByUser, value);
					if (!cancelled)
					{
						_updatedByUser = value;
						SetModifiedStatus("UpdatedByUser");
						NotifyPropertyChanged("UpdatedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bRowversion field.
		/// </summary>
		public byte[] Rowversion
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _rowversion;
			}
			set 
			{
				if (_rowversion != value)
				{
					bool cancelled = NotifyPropertyChanging("Rowversion", _rowversion, value);
					if (!cancelled)
					{
						_rowversion = value;
						SetModifiedStatus("Rowversion");
						NotifyPropertyChanged("Rowversion", value);
					}
				}
			}
		}
		/// <summary>
		/// The parent Agency object.
		/// </summary>

		// Parent Variables
		public Agency AgencyItem
		{
			get { return _agencyItem; }
			set { _agencyItem = value; }
		}

		/// <summary>
		/// A Contact with all of this object's original values.
		/// </summary>
		[Newtonsoft.Json.JsonIgnore]
		public Contact OriginalValues
		{
			get { return _originalValues; }
			set { _originalValues = value; }
		}

		#region Parent Class Variables

		/// <summary>
		/// The parent object's AgencyKey property.
		/// </summary>
		public string Agency_AgencyKey
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.AgencyKey;
			}
		}
		/// <summary>
		/// The parent object's Inactive property.
		/// </summary>
		public bool Agency_Inactive
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.Inactive;
			}
		}

		/// <summary>
		/// The parent object's Inactive property, rendered as a string.
		/// </summary>
		public string Agency_InactiveAsString
		{
			get { return Agency_Inactive.ToString(); }
		}
		/// <summary>
		/// The parent object's DateAdded property.
		/// </summary>
		public DateTime Agency_DateAdded
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.DateAdded;
			}
		}
		/// <summary>
		/// The parent object's AddedByUser property.
		/// </summary>
		public string Agency_AddedByUser
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.AddedByUser;
			}
		}
		/// <summary>
		/// The parent object's DateUpdated property.
		/// </summary>
		public DateTime Agency_DateUpdated
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.DateUpdated;
			}
		}
		/// <summary>
		/// The parent object's UpdatedByUser property.
		/// </summary>
		public string Agency_UpdatedByUser
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.UpdatedByUser;
			}
		}
		/// <summary>
		/// The parent object's Rowversion property.
		/// </summary>
		public byte[] Agency_Rowversion
		{
			get 
			{
				if (AgencyItem == null) { AgencyItem = new Agency(); }
				if (!AgencyItem.IsLoaded &&
					!String.IsNullOrEmpty(_agencyID.ToString())) { AgencyItem.Get(_agencyID); }
				return AgencyItem.Rowversion;
			}
		}
		#endregion Parent Class Variables

		#endregion Public Properties

		#region Public Methods
		/// <summary>
		/// Set the Base Rules on the class.
		/// </summary>
		public void SetBaseRules()
		{
			// Property Required Rules
			this.Rules.Add(new PropertyRequiredCustomRule("ContactID", "The \"Contact ID\" field is required in the Contact record.", RecordStatus.Modified));
			this.Rules.Add(new PropertyRequiredCustomRule("AgencyID", "The \"Agency ID\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("CurrentStatus", "The \"Current Status\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("PeaceOfficer", "The \"Peace Officer\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("RequiredToQualifyWithFirearm", "The \"Required To Qualify With Firearm\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Inactive", "The \"Inactive\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateAdded", "The \"Date Added\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateUpdated", "The \"Date Updated\" field is required in the Contact record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Rowversion", "The \"Rowversion\" field is required in the Contact record.", RecordStatus.Modified));

			// Max Length Rules
			this.Rules.Add(new MaxLengthCustomRule("CurrentStatus", 50, "The maximum length for the \"CurrentStatus\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("LastName", 100, "The maximum length for the \"LastName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("FirstName", 100, "The maximum length for the \"FirstName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("MiddleName", 100, "The maximum length for the \"MiddleName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("MaidenName", 100, "The maximum length for the \"MaidenName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("CompanyName", 100, "The maximum length for the \"CompanyName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("SpouseName", 100, "The maximum length for the \"SpouseName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("EMail", 100, "The maximum length for the \"EMail\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("SSN", 100, "The maximum length for the \"SSN\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("POSTID", 50, "The maximum length for the \"POSTID\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Gender", 10, "The maximum length for the \"Gender\" field is 10 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Ethnicity", 50, "The maximum length for the \"Ethnicity\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("DLNum", 50, "The maximum length for the \"DLNum\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("HairColor", 50, "The maximum length for the \"HairColor\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("EyeColor", 50, "The maximum length for the \"EyeColor\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("TraineeStatus", 50, "The maximum length for the \"TraineeStatus\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("TimeBase", 50, "The maximum length for the \"TimeBase\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("MaritalStatus", 20, "The maximum length for the \"MaritalStatus\" field is 20 characters."));
			this.Rules.Add(new MaxLengthCustomRule("VendorSupplierNum", 50, "The maximum length for the \"VendorSupplierNum\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("VendorContactName", 100, "The maximum length for the \"VendorContactName\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("VendorContactPhone", 50, "The maximum length for the \"VendorContactPhone\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("AddedByUser", 50, "The maximum length for the \"AddedByUser\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("UpdatedByUser", 50, "The maximum length for the \"UpdatedByUser\" field is 50 characters."));

			// Date Range Rules
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateDOB", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateDOB\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateDOB", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateDOB\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateDLExpires", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateDLExpires\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateDLExpires", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateDLExpires\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateAdded", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateAdded\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateAdded", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateAdded\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateUpdated\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateUpdated\" field."));
		}

		/// <summary>
		/// Returns the broken rules, including any children.
		/// </summary>
		public ClassGenExceptionCollection BrokenRulesIncludingChildren
		{
			get 
			{
				ClassGenExceptionCollection brokenRules = base.BrokenRules;

				brokenRules.AddRange(_contactAddressCollection.BrokenRules);
				brokenRules.AddRange(_contactLanguageCollection.BrokenRules);
				brokenRules.AddRange(_contactPhoneCollection.BrokenRules);

				return brokenRules; 
			}
		}

		/// <summary>
		/// Clone the object as a new instance and pass it back.
		/// </summary>
		/// <returns>A copy of the object.</returns>
		public Contact Clone()
		{
			Contact item = base.CloneObjectWithIL<Contact>(this);
			item.OriginalValues = this.OriginalValues;

			// Do the sub-collections
			#region Sub Collections
			item.Coll_ContactAddress.Clear();		// Clear the collection
			foreach (ContactAddress c in this.Coll_ContactAddress)
			{
				item.Coll_ContactAddress.Add(c);
			}
			item.Coll_ContactLanguage.Clear();		// Clear the collection
			foreach (ContactLanguage c in this.Coll_ContactLanguage)
			{
				item.Coll_ContactLanguage.Add(c);
			}
			item.Coll_ContactPhone.Clear();		// Clear the collection
			foreach (ContactPhone c in this.Coll_ContactPhone)
			{
				item.Coll_ContactPhone.Add(c);
			}
			#endregion Sub Collections

			return item;
		}

		/// <summary>
		/// Copy the object - then change the ID field to a new value.
		/// </summary>
		/// <returns>A copy of the object with a new ID.</returns>
		public object CopyWithNewID()
		{
			// Make the copy of the object
			Contact item = this.Clone();
			
			// Change the ID field
			item.ContactID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			// Do the sub-collections
			#region Sub Collections
			for (int i = item.Coll_ContactAddress.Count - 1; i >= 0; i--)
			{
				item.Coll_ContactAddress[i] = (ContactAddress)item.Coll_ContactAddress[i].CopyWithNewID();
				item.Coll_ContactAddress[i].ContactID = item.ContactID;
			}
			for (int i = item.Coll_ContactLanguage.Count - 1; i >= 0; i--)
			{
				item.Coll_ContactLanguage[i] = (ContactLanguage)item.Coll_ContactLanguage[i].CopyWithNewID();
				item.Coll_ContactLanguage[i].ContactID = item.ContactID;
			}
			for (int i = item.Coll_ContactPhone.Count - 1; i >= 0; i--)
			{
				item.Coll_ContactPhone[i] = (ContactPhone)item.Coll_ContactPhone[i].CopyWithNewID();
				item.Coll_ContactPhone[i].ContactID = item.ContactID;
			}
			#endregion Sub Collections

			return item;
		}

		
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				errors.AddRange(this.Get(_contactID));
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject()
		{
			return RefreshObject((int)RefreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (!String.IsNullOrEmpty(this._contactID.ToString()))
			{
				errors.AddRange(this.Get(_contactID));	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Undo any changes that might be done on the object.
		/// </summary>
		public override void UndoChanges()
		{
			// Enumerate the properties
			_contactID = _originalValues.ContactID;
			_agencyID = _originalValues.AgencyID;
			_currentStatus = _originalValues.CurrentStatus;
			_lastName = _originalValues.LastName;
			_firstName = _originalValues.FirstName;
			_middleName = _originalValues.MiddleName;
			_maidenName = _originalValues.MaidenName;
			_companyName = _originalValues.CompanyName;
			_spouseName = _originalValues.SpouseName;
			_email = _originalValues.EMail;
			_ssn = _originalValues.SSN;
			_postid = _originalValues.POSTID;
			_gender = _originalValues.Gender;
			_ethnicity = _originalValues.Ethnicity;
			_dtDOB = _originalValues.DateDOB;
			_dlnum = _originalValues.DLNum;
			_dtDLExpires = _originalValues.DateDLExpires;
			_height = _originalValues.Height;
			_weight = _originalValues.Weight;
			_hairColor = _originalValues.HairColor;
			_eyeColor = _originalValues.EyeColor;
			_peaceOfficer = _originalValues.PeaceOfficer;
			_requiredToQualifyWithFirearm = _originalValues.RequiredToQualifyWithFirearm;
			_traineeStatus = _originalValues.TraineeStatus;
			_timeBase = _originalValues.TimeBase;
			_maritalStatus = _originalValues.MaritalStatus;
			_vendorSupplierNum = _originalValues.VendorSupplierNum;
			_vendorContactName = _originalValues.VendorContactName;
			_vendorContactPhone = _originalValues.VendorContactPhone;
			_inactive = _originalValues.Inactive;
			_dtAdded = _originalValues.DateAdded;
			_addedByUser = _originalValues.AddedByUser;
			_dtUpdated = _originalValues.DateUpdated;
			_updatedByUser = _originalValues.UpdatedByUser;
			_rowversion = _originalValues.Rowversion;
			

			this.AgencyItem = _originalValues.AgencyItem;
			_changedProps.Clear();		// Clear the changed properties

			this.RecordStatus = _originalValues.RecordStatus;
			this.IsLoaded = _originalValues.IsLoaded;

			// Do the sub-collections
			#region Sub Collections
			this.Coll_ContactAddress.Clear();		// Clear the collection
			foreach (ContactAddress c in _originalValues.Coll_ContactAddress)
			{
				this.Coll_ContactAddress.Add(c);
			}
			this.Coll_ContactLanguage.Clear();		// Clear the collection
			foreach (ContactLanguage c in _originalValues.Coll_ContactLanguage)
			{
				this.Coll_ContactLanguage.Add(c);
			}
			this.Coll_ContactPhone.Clear();		// Clear the collection
			foreach (ContactPhone c in _originalValues.Coll_ContactPhone)
			{
				this.Coll_ContactPhone.Add(c);
			}
			#endregion Sub Collections
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdate(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate(SqlConnection oConn, SqlTransaction oTrans)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Check to make sure the child collections aren't dirty and we still have a current record status
			if (_recordStatus == RecordStatus.Current)
			{
				if (Coll_ContactAddress.ModifiedRecords.Count > 0 || 
					Coll_ContactAddress.NewRecords.Count > 0 || 
					Coll_ContactAddress.DeletedRecords.Count > 0)
				{
					_recordStatus = RecordStatus.Modified;
				}
				if (Coll_ContactLanguage.ModifiedRecords.Count > 0 || 
					Coll_ContactLanguage.NewRecords.Count > 0 || 
					Coll_ContactLanguage.DeletedRecords.Count > 0)
				{
					_recordStatus = RecordStatus.Modified;
				}
				if (Coll_ContactPhone.ModifiedRecords.Count > 0 || 
					Coll_ContactPhone.NewRecords.Count > 0 || 
					Coll_ContactPhone.DeletedRecords.Count > 0)
				{
					_recordStatus = RecordStatus.Modified;
				}
			}
			
			// Check to see if the record is already current - if so, don't do anything.
			if (_recordStatus == RecordStatus.Current) { return errors; }
			
			// Check to see if the record is a delete - if so, delete it from the db.
			if (_recordStatus == RecordStatus.Deleted)
			{
				try
				{
					// Delete the record and all its children
					errors.AddRange(LEAD_BaseObject.DeleteImmediate("tContact", "iContactID", _contactID.ToString(), true));
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				return errors;
			}
			
			// Next, check to see if the record is new.  If so, add it to the system
			if (_recordStatus == RecordStatus.New || _recordStatus == RecordStatus.Modified)
			{
				// Check the Broken Rules collection
				errors.AddRange(BrokenRules);

				// See if you can get an updated timestamp from the table for update
				if (errors.Count == 0 &&
					_recordStatus == RecordStatus.Modified)
				{
					byte[] timeStampFromTable = DAL.GetTimeStampFromTable("tContact", "bRowversion",
						"iContactID = " + this.ContactID + "");
					if (timeStampFromTable != null && 
						DAL.GetValueForSQL(timeStampFromTable) != DAL.GetValueForSQL(_rowversion))
					{
						// Add the error to the error collection
						errors.Add(new ClassGenException("The timestamp fields don't match.", ClassGenExceptionIconType.Critical));
					}
				}

				// If the error collection is not clear, dump out of the function
				if (errors.Count > 0) { return errors; }

				// Set the person who updated/created this record
				_dtUpdated = DAL.GetSQLServerDateTime();
				if (String.IsNullOrEmpty(_addedByUser)) { AddedByUser = Security.CurrentUser.UserName; }
				UpdatedByUser = (!String.IsNullOrEmpty(Security.CurrentUser.UserName) ? Security.CurrentUser.UserName : UpdatedByUser);

				try
				{
					// Do the Exist/Insert check first
					sql = "DECLARE @return_val BIGINT " + 
						"IF NOT EXISTS (SELECT iContactID FROM tContact WHERE iContactID = @piContactID) " + 
						"BEGIN" + 
						"    INSERT INTO tContact (iAgencyID, sCurrentStatus, sLastName, sFirstName, sMiddleName, sMaidenName, sCompanyName, sSpouseName, sEMail, sSSN, sPOSTID, sGender, sEthnicity, dtDOB, sDLNum, dtDLExpires, iHeight, iWeight, sHairColor, sEyeColor, bPeaceOfficer, bRequiredToQualifyWithFirearm, sTraineeStatus, sTimeBase, sMaritalStatus, sVendorSupplierNum, sVendorContactName, sVendorContactPhone, bInactive, sAddedByUser, dtUpdated, sUpdatedByUser) " + 
						"    SELECT @piAgencyID, @psCurrentStatus, @psLastName, @psFirstName, @psMiddleName, @psMaidenName, @psCompanyName, @psSpouseName, @psEMail, @psSSN, @psPOSTID, @psGender, @psEthnicity, @pdtDOB, @psDLNum, @pdtDLExpires, @piHeight, @piWeight, @psHairColor, @psEyeColor, @pbPeaceOfficer, @pbRequiredToQualifyWithFirearm, @psTraineeStatus, @psTimeBase, @psMaritalStatus, @psVendorSupplierNum, @psVendorContactName, @psVendorContactPhone, @pbInactive, @psAddedByUser, @pdtUpdated, @psUpdatedByUser " + 
						"    SELECT @return_val = SCOPE_IDENTITY() " + 
						"END " + 
						"ELSE " + 
						"BEGIN " + 
						"    UPDATE tContact SET " + 
						"        iAgencyID = @piAgencyID" + 
						"        ,sCurrentStatus = @psCurrentStatus" + 
						"        ,bPeaceOfficer = @pbPeaceOfficer" + 
						"        ,bRequiredToQualifyWithFirearm = @pbRequiredToQualifyWithFirearm" + 
						"        ,bInactive = @pbInactive" + 
						"        ,dtUpdated = @pdtUpdated" + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("LastName")) ? "        ,sLastName = @psLastName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("FirstName")) ? "        ,sFirstName = @psFirstName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("MiddleName")) ? "        ,sMiddleName = @psMiddleName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("MaidenName")) ? "        ,sMaidenName = @psMaidenName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("CompanyName")) ? "        ,sCompanyName = @psCompanyName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("SpouseName")) ? "        ,sSpouseName = @psSpouseName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("EMail")) ? "        ,sEMail = @psEMail" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("SSN")) ? "        ,sSSN = @psSSN" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("POSTID")) ? "        ,sPOSTID = @psPOSTID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Gender")) ? "        ,sGender = @psGender" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Ethnicity")) ? "        ,sEthnicity = @psEthnicity" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DateDOB")) ? "        ,dtDOB = @pdtDOB" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DLNum")) ? "        ,sDLNum = @psDLNum" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("DateDLExpires")) ? "        ,dtDLExpires = @pdtDLExpires" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Height")) ? "        ,iHeight = @piHeight" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Weight")) ? "        ,iWeight = @piWeight" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("HairColor")) ? "        ,sHairColor = @psHairColor" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("EyeColor")) ? "        ,sEyeColor = @psEyeColor" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("TraineeStatus")) ? "        ,sTraineeStatus = @psTraineeStatus" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("TimeBase")) ? "        ,sTimeBase = @psTimeBase" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("MaritalStatus")) ? "        ,sMaritalStatus = @psMaritalStatus" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VendorSupplierNum")) ? "        ,sVendorSupplierNum = @psVendorSupplierNum" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VendorContactName")) ? "        ,sVendorContactName = @psVendorContactName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("VendorContactPhone")) ? "        ,sVendorContactPhone = @psVendorContactPhone" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("AddedByUser")) ? "        ,sAddedByUser = @psAddedByUser" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("UpdatedByUser")) ? "        ,sUpdatedByUser = @psUpdatedByUser" : "") + 
						"     WHERE iContactID = @piContactID " + 
						"     SELECT @return_val = @piContactID " + 
						"END; SELECT @return_val AS ret_val, bRowversion FROM tContact WHERE iContactID = @return_val";
					cmd = new SqlCommand(sql);

					cmd.Parameters.Add("@piContactID", SqlDbType.BigInt).Value = _contactID;
					cmd.Parameters.Add("@piAgencyID", SqlDbType.BigInt).Value = _agencyID;
					cmd.Parameters.Add("@psCurrentStatus", SqlDbType.VarChar, 50).Value = _currentStatus;
					cmd.Parameters.Add("@psLastName", SqlDbType.VarChar, 100).Value = (_lastName == null ? (object)DBNull.Value : (object)_lastName);
					cmd.Parameters.Add("@psFirstName", SqlDbType.VarChar, 100).Value = (_firstName == null ? (object)DBNull.Value : (object)_firstName);
					cmd.Parameters.Add("@psMiddleName", SqlDbType.VarChar, 100).Value = (_middleName == null ? (object)DBNull.Value : (object)_middleName);
					cmd.Parameters.Add("@psMaidenName", SqlDbType.VarChar, 100).Value = (_maidenName == null ? (object)DBNull.Value : (object)_maidenName);
					cmd.Parameters.Add("@psCompanyName", SqlDbType.VarChar, 100).Value = (_companyName == null ? (object)DBNull.Value : (object)_companyName);
					cmd.Parameters.Add("@psSpouseName", SqlDbType.VarChar, 100).Value = (_spouseName == null ? (object)DBNull.Value : (object)_spouseName);
					cmd.Parameters.Add("@psEMail", SqlDbType.VarChar, 100).Value = (_email == null ? (object)DBNull.Value : (object)_email);
					cmd.Parameters.Add("@psSSN", SqlDbType.VarChar, 100).Value = (_ssn == null ? (object)DBNull.Value : (object)_ssn);
					cmd.Parameters.Add("@psPOSTID", SqlDbType.VarChar, 50).Value = (_postid == null ? (object)DBNull.Value : (object)_postid);
					cmd.Parameters.Add("@psGender", SqlDbType.VarChar, 10).Value = (_gender == null ? (object)DBNull.Value : (object)_gender);
					cmd.Parameters.Add("@psEthnicity", SqlDbType.VarChar, 50).Value = (_ethnicity == null ? (object)DBNull.Value : (object)_ethnicity);
					cmd.Parameters.Add("@pdtDOB", SqlDbType.DateTime).Value = (_dtDOB == null ? (object)DBNull.Value : (object)_dtDOB);
					cmd.Parameters.Add("@psDLNum", SqlDbType.VarChar, 50).Value = (_dlnum == null ? (object)DBNull.Value : (object)_dlnum);
					cmd.Parameters.Add("@pdtDLExpires", SqlDbType.DateTime).Value = (_dtDLExpires == null ? (object)DBNull.Value : (object)_dtDLExpires);
					cmd.Parameters.Add("@piHeight", SqlDbType.Int).Value = (_height == null ? (object)DBNull.Value : (object)_height);
					cmd.Parameters.Add("@piWeight", SqlDbType.Int).Value = (_weight == null ? (object)DBNull.Value : (object)_weight);
					cmd.Parameters.Add("@psHairColor", SqlDbType.VarChar, 50).Value = (_hairColor == null ? (object)DBNull.Value : (object)_hairColor);
					cmd.Parameters.Add("@psEyeColor", SqlDbType.VarChar, 50).Value = (_eyeColor == null ? (object)DBNull.Value : (object)_eyeColor);
					cmd.Parameters.Add("@pbPeaceOfficer", SqlDbType.Bit).Value = _peaceOfficer;
					cmd.Parameters.Add("@pbRequiredToQualifyWithFirearm", SqlDbType.Bit).Value = _requiredToQualifyWithFirearm;
					cmd.Parameters.Add("@psTraineeStatus", SqlDbType.VarChar, 50).Value = (_traineeStatus == null ? (object)DBNull.Value : (object)_traineeStatus);
					cmd.Parameters.Add("@psTimeBase", SqlDbType.VarChar, 50).Value = (_timeBase == null ? (object)DBNull.Value : (object)_timeBase);
					cmd.Parameters.Add("@psMaritalStatus", SqlDbType.VarChar, 20).Value = (_maritalStatus == null ? (object)DBNull.Value : (object)_maritalStatus);
					cmd.Parameters.Add("@psVendorSupplierNum", SqlDbType.VarChar, 50).Value = (_vendorSupplierNum == null ? (object)DBNull.Value : (object)_vendorSupplierNum);
					cmd.Parameters.Add("@psVendorContactName", SqlDbType.VarChar, 100).Value = (_vendorContactName == null ? (object)DBNull.Value : (object)_vendorContactName);
					cmd.Parameters.Add("@psVendorContactPhone", SqlDbType.VarChar, 50).Value = (_vendorContactPhone == null ? (object)DBNull.Value : (object)_vendorContactPhone);
					cmd.Parameters.Add("@pbInactive", SqlDbType.Bit).Value = _inactive;
					cmd.Parameters.Add("@psAddedByUser", SqlDbType.VarChar, 50).Value = (_addedByUser == null ? (object)DBNull.Value : (object)_addedByUser);
					cmd.Parameters.Add("@pdtUpdated", SqlDbType.DateTime).Value = _dtUpdated;
					cmd.Parameters.Add("@psUpdatedByUser", SqlDbType.VarChar, 50).Value = (_updatedByUser == null ? (object)DBNull.Value : (object)_updatedByUser);

					cmd.Transaction = oTrans;		// Set the transaction on the command

					dt = DAL.SQLExecDataTable(cmd, oConn);
					foreach (DataRow row in dt.Rows)
					{
						// Get the old key field value to figure out if we need to update it
						long oldRecID = _contactID;

						_contactID = (long)row["ret_val"];
						_rowversion = (byte[])(row["bRowversion"]);

						// Go through the sub collections and update the records
						foreach (ContactAddress c in Coll_ContactAddress) { if (c.ContactID == oldRecID) { c.ContactID = _contactID; } }
						foreach (ContactLanguage c in Coll_ContactLanguage) { if (c.ContactID == oldRecID) { c.ContactID = _contactID; } }
						foreach (ContactPhone c in Coll_ContactPhone) { if (c.ContactID == oldRecID) { c.ContactID = _contactID; } }
					}
					dt.Dispose();		// Kill off the datatable
					
					// Add the update methods for all the sub collections
					#region Sub Collections
					errors.AddRange(Coll_ContactAddress.AddUpdateAll(oConn, oTrans));
					errors.AddRange(Coll_ContactLanguage.AddUpdateAll(oConn, oTrans));
					errors.AddRange(Coll_ContactPhone.AddUpdateAll(oConn, oTrans));
					#endregion Sub Collections
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				if (errors.CriticalExceptionCount == 0)
				{
					_recordStatus = RecordStatus.Current;		// Set the record status to current after a successful update
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get the record specified on the Key Fields in the table.
		/// </summary>
		/// <param name="contactID">A key field used to find the correct record.</param>
		/// <param name="includeParentPopulation">Whether or not to include values derived from a parent table.</param>
		public ClassGenExceptionCollection Get(long contactID, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlCommand cmd = null;
			string sql = string.Empty;
			DataTable dt = null;
			
			try
			{
				sql = "SELECT [C].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tContact [C] " + 
					"WHERE [C].[iContactID] = @piContactID " + 
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piContactID", SqlDbType.BigInt).Value = contactID;
				dt = DAL.SQLExecDataTable(cmd);

				foreach (DataRow row in dt.Rows)
				{
					// Call the get from data row method
					errors.AddRange(this.Get(row, includeParentPopulation));
				}

				dt.Dispose();		// Dispose of the datatable
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified based on the Key Fields in the table
		/// </summary>
		/// <param name="contactID">A key field used to find the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(long contactID)
		{
			return Get(contactID, false);		// Get the item
		}

		/// <summary>
		/// Populate the object using the datarow passed in...
		/// </summary>
		/// <param name="row">The DataRow to populate the object from.</param>
		/// <param name="includeParentPopulation">Whether to include data generated from parent tables.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				// Enumerate through the fields and set up the object
				_recordStatus = RecordStatus.Current;
				_isLoaded = false;
				if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
				{
					_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
				}
				else
				{
					_dateTimeObjectPopulated = DateTime.Now;
				}
				DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
				
				_contactID = long.Parse(row["iContactID"] != DBNull.Value ? row["iContactID"].ToString() : "0");
				_agencyID = long.Parse(row["iAgencyID"] != DBNull.Value ? row["iAgencyID"].ToString() : "0");
				_currentStatus = (row["sCurrentStatus"] != DBNull.Value ? row["sCurrentStatus"].ToString() : string.Empty);
				_lastName = (row["sLastName"] != DBNull.Value ? _lastName = row["sLastName"].ToString() : null);
				_firstName = (row["sFirstName"] != DBNull.Value ? _firstName = row["sFirstName"].ToString() : null);
				
				_middleName = (row["sMiddleName"] != DBNull.Value ? _middleName = row["sMiddleName"].ToString() : null);
				_maidenName = (row["sMaidenName"] != DBNull.Value ? _maidenName = row["sMaidenName"].ToString() : null);
				_companyName = (row["sCompanyName"] != DBNull.Value ? _companyName = row["sCompanyName"].ToString() : null);
				_spouseName = (row["sSpouseName"] != DBNull.Value ? _spouseName = row["sSpouseName"].ToString() : null);
				_email = (row["sEMail"] != DBNull.Value ? _email = row["sEMail"].ToString() : null);
				
				_ssn = (row["sSSN"] != DBNull.Value ? _ssn = row["sSSN"].ToString() : null);
				_postid = (row["sPOSTID"] != DBNull.Value ? _postid = row["sPOSTID"].ToString() : null);
				_gender = (row["sGender"] != DBNull.Value ? _gender = row["sGender"].ToString() : null);
				_ethnicity = (row["sEthnicity"] != DBNull.Value ? _ethnicity = row["sEthnicity"].ToString() : null);
				_dtDOB = (row["dtDOB"] != DBNull.Value ? _dtDOB = (DateTime)row["dtDOB"] : null);
				
				_dlnum = (row["sDLNum"] != DBNull.Value ? _dlnum = row["sDLNum"].ToString() : null);
				_dtDLExpires = (row["dtDLExpires"] != DBNull.Value ? _dtDLExpires = (DateTime)row["dtDLExpires"] : null);
				_height = (row["iHeight"] != DBNull.Value ? _height = int.Parse(row["iHeight"].ToString()) : null);
				_weight = (row["iWeight"] != DBNull.Value ? _weight = int.Parse(row["iWeight"].ToString()) : null);
				_hairColor = (row["sHairColor"] != DBNull.Value ? _hairColor = row["sHairColor"].ToString() : null);
				
				_eyeColor = (row["sEyeColor"] != DBNull.Value ? _eyeColor = row["sEyeColor"].ToString() : null);
				_peaceOfficer = bool.Parse(row["bPeaceOfficer"] != DBNull.Value ? row["bPeaceOfficer"].ToString() : "false");
				_requiredToQualifyWithFirearm = bool.Parse(row["bRequiredToQualifyWithFirearm"] != DBNull.Value ? row["bRequiredToQualifyWithFirearm"].ToString() : "false");
				_traineeStatus = (row["sTraineeStatus"] != DBNull.Value ? _traineeStatus = row["sTraineeStatus"].ToString() : null);
				_timeBase = (row["sTimeBase"] != DBNull.Value ? _timeBase = row["sTimeBase"].ToString() : null);
				
				_maritalStatus = (row["sMaritalStatus"] != DBNull.Value ? _maritalStatus = row["sMaritalStatus"].ToString() : null);
				_vendorSupplierNum = (row["sVendorSupplierNum"] != DBNull.Value ? _vendorSupplierNum = row["sVendorSupplierNum"].ToString() : null);
				_vendorContactName = (row["sVendorContactName"] != DBNull.Value ? _vendorContactName = row["sVendorContactName"].ToString() : null);
				_vendorContactPhone = (row["sVendorContactPhone"] != DBNull.Value ? _vendorContactPhone = row["sVendorContactPhone"].ToString() : null);
				_inactive = bool.Parse(row["bInactive"] != DBNull.Value ? row["bInactive"].ToString() : "false");
				
				_dtAdded = (row["dtAdded"] != DBNull.Value ? (DateTime)row["dtAdded"] : new DateTime(1900, 1, 1));
				_addedByUser = (row["sAddedByUser"] != DBNull.Value ? _addedByUser = row["sAddedByUser"].ToString() : null);
				_dtUpdated = (row["dtUpdated"] != DBNull.Value ? (DateTime)row["dtUpdated"] : new DateTime(1900, 1, 1));
				_updatedByUser = (row["sUpdatedByUser"] != DBNull.Value ? _updatedByUser = row["sUpdatedByUser"].ToString() : null);
				_rowversion = (byte[])(row["bRowversion"] != DBNull.Value ? (object)row["bRowversion"] : (object)null);
				
				#region Parent Collections
				if (includeParentPopulation)
				{
					if (!String.IsNullOrEmpty(_agencyID.ToString()))
					{
						if (this.AgencyItem == null) { this.AgencyItem = new Agency(); }
						this.AgencyItem.Get(_agencyID);		// Agency
					}
				}
				#endregion Parent Collections

				_isLoaded = true;

				// Make a copy of the object with original values
				_originalValues = this.Clone();
			}
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified from the passed datarow.
		/// </summary>
		/// <param name="row">The DataRow used to determine the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row)
		{
			return Get(row, false);		// Get the item
		}
		
		#region Get Child Collections
		/// <summary>
		/// Get all children for the ContactAddress class.
		/// </summary>
		public void GetChildren_ContactAddress()
		{
			this.Coll_ContactAddress.Clear();		// ContactAddress
			this.Coll_ContactAddress.GetFromDBByContactID(_contactID);
			foreach (ContactAddress item in this.Coll_ContactAddress)
			{
				item.ContactItem = this;
				item.ContactItem.IsLoaded = true;
				item.RecordStatus = RecordStatus.Current;
			}
		}

		/// <summary>
		/// Get all children for the ContactLanguage class.
		/// </summary>
		public void GetChildren_ContactLanguage()
		{
			this.Coll_ContactLanguage.Clear();		// ContactLanguage
			this.Coll_ContactLanguage.GetFromDBByContactID(_contactID);
			foreach (ContactLanguage item in this.Coll_ContactLanguage)
			{
				item.ContactItem = this;
				item.ContactItem.IsLoaded = true;
				item.RecordStatus = RecordStatus.Current;
			}
		}

		/// <summary>
		/// Get all children for the ContactPhone class.
		/// </summary>
		public void GetChildren_ContactPhone()
		{
			this.Coll_ContactPhone.Clear();		// ContactPhone
			this.Coll_ContactPhone.GetFromDBByContactID(_contactID);
			foreach (ContactPhone item in this.Coll_ContactPhone)
			{
				item.ContactItem = this;
				item.ContactItem.IsLoaded = true;
				item.RecordStatus = RecordStatus.Current;
			}
		}
		#endregion Get Child Collections

		#region Child Collections

		/// <summary>
		/// Run this method to delete all the child collections.
		/// </summary>
		/// <returns>The number of records affected by the delete.</returns>
		public ClassGenExceptionCollection DeleteAllChildCollections()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Delete the record
			errors.AddRange(LEAD_BaseObject.DeleteImmediate("tContact", "iContactID", _contactID.ToString(), false));
			
			return errors;
		}
		#endregion Child Collections

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="dt">The datatable to use as a template.</param>
		/// <returns>A new datarow.</returns>
		public DataRow ToDataRow(DataTable dt)
		{
			// Generate and return a data row
			return ToDataRowWithIL<Contact>(this, dt);
		}

		#endregion Public Methods

		#region Public Static Values

		// Main Class - Contact

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ContactID = "ContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AgencyID = "AgencyID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_CurrentStatus = "CurrentStatus";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_LastName = "LastName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_FirstName = "FirstName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_MiddleName = "MiddleName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_MaidenName = "MaidenName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_CompanyName = "CompanyName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_SpouseName = "SpouseName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_EMail = "EMail";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_SSN = "SSN";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_POSTID = "POSTID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Gender = "Gender";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Ethnicity = "Ethnicity";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateDOB = "DateDOB";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DLNum = "DLNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateDLExpires = "DateDLExpires";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Height = "Height";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Weight = "Weight";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_HairColor = "HairColor";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_EyeColor = "EyeColor";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_PeaceOfficer = "PeaceOfficer";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_RequiredToQualifyWithFirearm = "RequiredToQualifyWithFirearm";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_TraineeStatus = "TraineeStatus";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_TimeBase = "TimeBase";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_MaritalStatus = "MaritalStatus";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VendorSupplierNum = "VendorSupplierNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VendorContactName = "VendorContactName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_VendorContactPhone = "VendorContactPhone";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Inactive = "Inactive";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateAdded = "DateAdded";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AddedByUser = "AddedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateUpdated = "DateUpdated";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_UpdatedByUser = "UpdatedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Rowversion = "Rowversion";

		// Agency

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_AgencyID = "Agency_AgencyID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_AgencyKey = "Agency_AgencyKey";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_Inactive = "Agency_Inactive";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_DateAdded = "Agency_DateAdded";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_AddedByUser = "Agency_AddedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_DateUpdated = "Agency_DateUpdated";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_UpdatedByUser = "Agency_UpdatedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Agency_Rowversion = "Agency_Rowversion";

		#endregion Public Static Values

		#region Public Static Methods
		/// <summary>
		/// Get a DB Field name from the field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(ContactField field)
		{
			string fldName = string.Empty;

			// Add the elements
			switch (field)
			{
				case ContactField.ContactID: fldName = "iContactID"; break;
				case ContactField.AgencyID: fldName = "iAgencyID"; break;
				case ContactField.CurrentStatus: fldName = "sCurrentStatus"; break;
				case ContactField.LastName: fldName = "sLastName"; break;
				case ContactField.FirstName: fldName = "sFirstName"; break;
				case ContactField.MiddleName: fldName = "sMiddleName"; break;
				case ContactField.MaidenName: fldName = "sMaidenName"; break;
				case ContactField.CompanyName: fldName = "sCompanyName"; break;
				case ContactField.SpouseName: fldName = "sSpouseName"; break;
				case ContactField.EMail: fldName = "sEMail"; break;
				case ContactField.SSN: fldName = "sSSN"; break;
				case ContactField.POSTID: fldName = "sPOSTID"; break;
				case ContactField.Gender: fldName = "sGender"; break;
				case ContactField.Ethnicity: fldName = "sEthnicity"; break;
				case ContactField.DateDOB: fldName = "dtDOB"; break;
				case ContactField.DLNum: fldName = "sDLNum"; break;
				case ContactField.DateDLExpires: fldName = "dtDLExpires"; break;
				case ContactField.Height: fldName = "iHeight"; break;
				case ContactField.Weight: fldName = "iWeight"; break;
				case ContactField.HairColor: fldName = "sHairColor"; break;
				case ContactField.EyeColor: fldName = "sEyeColor"; break;
				case ContactField.PeaceOfficer: fldName = "bPeaceOfficer"; break;
				case ContactField.RequiredToQualifyWithFirearm: fldName = "bRequiredToQualifyWithFirearm"; break;
				case ContactField.TraineeStatus: fldName = "sTraineeStatus"; break;
				case ContactField.TimeBase: fldName = "sTimeBase"; break;
				case ContactField.MaritalStatus: fldName = "sMaritalStatus"; break;
				case ContactField.VendorSupplierNum: fldName = "sVendorSupplierNum"; break;
				case ContactField.VendorContactName: fldName = "sVendorContactName"; break;
				case ContactField.VendorContactPhone: fldName = "sVendorContactPhone"; break;
				case ContactField.Inactive: fldName = "bInactive"; break;
				case ContactField.DateAdded: fldName = "dtAdded"; break;
				case ContactField.AddedByUser: fldName = "sAddedByUser"; break;
				case ContactField.DateUpdated: fldName = "dtUpdated"; break;
				case ContactField.UpdatedByUser: fldName = "sUpdatedByUser"; break;
				case ContactField.Rowversion: fldName = "bRowversion"; break;
			}

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// Get a field from the DB Field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(string field)
		{
			string fldName = null;

			// Add the elements
			if (field.ToLower() == "icontactid") { fldName = ContactField.ContactID.ToString(); }
			else if (field.ToLower() == "iagencyid") { fldName = ContactField.AgencyID.ToString(); }
			else if (field.ToLower() == "scurrentstatus") { fldName = ContactField.CurrentStatus.ToString(); }
			else if (field.ToLower() == "slastname") { fldName = ContactField.LastName.ToString(); }
			else if (field.ToLower() == "sfirstname") { fldName = ContactField.FirstName.ToString(); }
			else if (field.ToLower() == "smiddlename") { fldName = ContactField.MiddleName.ToString(); }
			else if (field.ToLower() == "smaidenname") { fldName = ContactField.MaidenName.ToString(); }
			else if (field.ToLower() == "scompanyname") { fldName = ContactField.CompanyName.ToString(); }
			else if (field.ToLower() == "sspousename") { fldName = ContactField.SpouseName.ToString(); }
			else if (field.ToLower() == "semail") { fldName = ContactField.EMail.ToString(); }
			else if (field.ToLower() == "sssn") { fldName = ContactField.SSN.ToString(); }
			else if (field.ToLower() == "spostid") { fldName = ContactField.POSTID.ToString(); }
			else if (field.ToLower() == "sgender") { fldName = ContactField.Gender.ToString(); }
			else if (field.ToLower() == "sethnicity") { fldName = ContactField.Ethnicity.ToString(); }
			else if (field.ToLower() == "dtdob") { fldName = ContactField.DateDOB.ToString(); }
			else if (field.ToLower() == "sdlnum") { fldName = ContactField.DLNum.ToString(); }
			else if (field.ToLower() == "dtdlexpires") { fldName = ContactField.DateDLExpires.ToString(); }
			else if (field.ToLower() == "iheight") { fldName = ContactField.Height.ToString(); }
			else if (field.ToLower() == "iweight") { fldName = ContactField.Weight.ToString(); }
			else if (field.ToLower() == "shaircolor") { fldName = ContactField.HairColor.ToString(); }
			else if (field.ToLower() == "seyecolor") { fldName = ContactField.EyeColor.ToString(); }
			else if (field.ToLower() == "bpeaceofficer") { fldName = ContactField.PeaceOfficer.ToString(); }
			else if (field.ToLower() == "brequiredtoqualifywithfirearm") { fldName = ContactField.RequiredToQualifyWithFirearm.ToString(); }
			else if (field.ToLower() == "straineestatus") { fldName = ContactField.TraineeStatus.ToString(); }
			else if (field.ToLower() == "stimebase") { fldName = ContactField.TimeBase.ToString(); }
			else if (field.ToLower() == "smaritalstatus") { fldName = ContactField.MaritalStatus.ToString(); }
			else if (field.ToLower() == "svendorsuppliernum") { fldName = ContactField.VendorSupplierNum.ToString(); }
			else if (field.ToLower() == "svendorcontactname") { fldName = ContactField.VendorContactName.ToString(); }
			else if (field.ToLower() == "svendorcontactphone") { fldName = ContactField.VendorContactPhone.ToString(); }
			else if (field.ToLower() == "binactive") { fldName = ContactField.Inactive.ToString(); }
			else if (field.ToLower() == "dtadded") { fldName = ContactField.DateAdded.ToString(); }
			else if (field.ToLower() == "saddedbyuser") { fldName = ContactField.AddedByUser.ToString(); }
			else if (field.ToLower() == "dtupdated") { fldName = ContactField.DateUpdated.ToString(); }
			else if (field.ToLower() == "supdatedbyuser") { fldName = ContactField.UpdatedByUser.ToString(); }
			else if (field.ToLower() == "browversion") { fldName = ContactField.Rowversion.ToString(); }

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// The database table name.
		/// </summary>
		public static readonly string DB_TableName = "tContact"; 

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(ContactField field)
		{
			return GetDistinctFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(ContactField field, string whereClause)
		{
			string fldName = GetDBFieldName(field);

			if (String.IsNullOrEmpty(fldName)) { return new List<string>(); }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			List<string> rtv = new List<string>();

			try
			{
				sql = "SELECT DISTINCT LTRIM(RTRIM([" + fldName + "])) " +
						"FROM [tContact] " +
						"WHERE [" + fldName + "] IS NOT NULL AND LTRIM(RTRIM([" + fldName + "])) <> '' " + 
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") + 
						"ORDER BY LTRIM(RTRIM([" + fldName + "]))";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (fldName.ToLower().EndsWith("guid"))
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString().ToLower());
					}
				}
				else
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString());
					}
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="fields">The fields to get.</param>
		/// <param name="fieldAliases">The field aliases.</param>
		/// <param name="sortedFields">The sorted fields.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A datatable of values from the collection (sorted by value).</returns>
		public static DataTable GetDistinctFromDBAsDataTable(ContactField[] fields, 
			string[] fieldAliases,
			ContactField[] sortedFields, 
			string whereClause)
		{
			Dictionary<ContactField, string> fieldNames = new Dictionary<ContactField, string>();
			StringBuilder sbFields = new StringBuilder();
			StringBuilder sbWhereClause = new StringBuilder();
			int fieldCount = 0;
			foreach (ContactField fld in fields)
			{
				if (!fieldNames.ContainsKey(fld))
				{
					fieldNames.Add(fld, GetDBFieldName(fld));
					sbWhereClause.Append((sbWhereClause.ToString().Trim().Length > 0 ? " AND " : " WHERE ") +
						fieldNames[fld] + " IS NOT NULL AND LTRIM(RTRIM(" + fieldNames[fld] + ")) <> '' ");
				}
				if (String.IsNullOrEmpty(fieldNames[fld])) { return null; }
				sbFields.Append((sbFields.ToString().Trim().Length > 0 ? "," : "") + "[" + fieldNames[fld] + "]" + 
					(fieldAliases.Length > fieldCount ? " AS [" + fieldAliases[fieldCount] + "] " : ""));
				fieldCount++;
			}

			Dictionary<ContactField, string> sortedFieldNames = new Dictionary<ContactField, string>();
			StringBuilder sbSortedFields = new StringBuilder();
			foreach (ContactField fld in sortedFields)
			{
				if (!sortedFieldNames.ContainsKey(fld))
				{
					sortedFieldNames.Add(fld, GetDBFieldName(fld));
				}
				if (String.IsNullOrEmpty(sortedFieldNames[fld])) { return null; }
				sbSortedFields.Append((sbSortedFields.ToString().Trim().Length > 0 ? "," : "") + sortedFieldNames[fld]);
			}

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT DISTINCT " + sbFields.ToString() + " " +
						"FROM tContact " +
						sbWhereClause.ToString() + " " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						(!String.IsNullOrEmpty(sbSortedFields.ToString()) ? " ORDER BY " + sbSortedFields.ToString() + "" : "");
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return dt;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(ContactMinMaxDateField field)
		{
			return GetMinDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(ContactMinMaxDateField field, string whereClause)
		{
			ContactField fld = (ContactField)Enum.Parse(typeof(ContactField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tContact] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(ContactMinMaxDateField field)
		{
			return GetMaxDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(ContactMinMaxDateField field, string whereClause)
		{
			ContactField fld = (ContactField)Enum.Parse(typeof(ContactField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tContact] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(ContactMinMaxNumberField field)
		{
			return GetMinNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(ContactMinMaxNumberField field, string whereClause)
		{
			ContactField fld = (ContactField)Enum.Parse(typeof(ContactField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tContact] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(ContactMinMaxNumberField field)
		{
			return GetMaxNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(ContactMinMaxNumberField field, string whereClause)
		{
			ContactField fld = (ContactField)Enum.Parse(typeof(ContactField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tContact] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Copy the object - then change the id field to a new value
		/// </summary>
		/// <param name="source">The object to copy.</param>
		/// <returns>A copy of the object, with a new ID.</returns>
		public static Contact CopyFrom(Contact source)
		{
			// Make the copy of the object
			Contact item = source.Clone();
			
			// Change the ID field
			item.ContactID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			// Do the sub-collections
			#region Sub Collections
			for (int i = item.Coll_ContactAddress.Count - 1; i >= 0; i--)
			{
				item.Coll_ContactAddress[i] = (ContactAddress)item.Coll_ContactAddress[i].CopyWithNewID();
				item.Coll_ContactAddress[i].ContactID = item.ContactID;
			}
			for (int i = item.Coll_ContactLanguage.Count - 1; i >= 0; i--)
			{
				item.Coll_ContactLanguage[i] = (ContactLanguage)item.Coll_ContactLanguage[i].CopyWithNewID();
				item.Coll_ContactLanguage[i].ContactID = item.ContactID;
			}
			for (int i = item.Coll_ContactPhone.Count - 1; i >= 0; i--)
			{
				item.Coll_ContactPhone[i] = (ContactPhone)item.Coll_ContactPhone[i].CopyWithNewID();
				item.Coll_ContactPhone[i].ContactID = item.ContactID;
			}
			#endregion Sub Collections

			return item;
		}

		/// <summary>
		/// Convert the passed string into a db friendly string (one that 
		/// doesn't include the names in the object, but rather the names 
		/// from the fields from the database).
		/// </summary>
		/// <param name="dbString">The string to process.</param>
		/// <returns>The converted string.</returns>
		public static string ToDBFriendly(string dbString)
		{
			string rtv = dbString;

			rtv = rtv.Replace("[ContactID]", "[iContactID]");
			rtv = rtv.Replace("[AgencyID]", "[iAgencyID]");
			rtv = rtv.Replace("[CurrentStatus]", "[sCurrentStatus]");
			rtv = rtv.Replace("[LastName]", "[sLastName]");
			rtv = rtv.Replace("[FirstName]", "[sFirstName]");
			rtv = rtv.Replace("[MiddleName]", "[sMiddleName]");
			rtv = rtv.Replace("[MaidenName]", "[sMaidenName]");
			rtv = rtv.Replace("[CompanyName]", "[sCompanyName]");
			rtv = rtv.Replace("[SpouseName]", "[sSpouseName]");
			rtv = rtv.Replace("[EMail]", "[sEMail]");
			rtv = rtv.Replace("[SSN]", "[sSSN]");
			rtv = rtv.Replace("[POSTID]", "[sPOSTID]");
			rtv = rtv.Replace("[Gender]", "[sGender]");
			rtv = rtv.Replace("[Ethnicity]", "[sEthnicity]");
			rtv = rtv.Replace("[DateDOB]", "[dtDOB]");
			rtv = rtv.Replace("[DLNum]", "[sDLNum]");
			rtv = rtv.Replace("[DateDLExpires]", "[dtDLExpires]");
			rtv = rtv.Replace("[Height]", "[iHeight]");
			rtv = rtv.Replace("[Weight]", "[iWeight]");
			rtv = rtv.Replace("[HairColor]", "[sHairColor]");
			rtv = rtv.Replace("[EyeColor]", "[sEyeColor]");
			rtv = rtv.Replace("[PeaceOfficer]", "[bPeaceOfficer]");
			rtv = rtv.Replace("[RequiredToQualifyWithFirearm]", "[bRequiredToQualifyWithFirearm]");
			rtv = rtv.Replace("[TraineeStatus]", "[sTraineeStatus]");
			rtv = rtv.Replace("[TimeBase]", "[sTimeBase]");
			rtv = rtv.Replace("[MaritalStatus]", "[sMaritalStatus]");
			rtv = rtv.Replace("[VendorSupplierNum]", "[sVendorSupplierNum]");
			rtv = rtv.Replace("[VendorContactName]", "[sVendorContactName]");
			rtv = rtv.Replace("[VendorContactPhone]", "[sVendorContactPhone]");
			rtv = rtv.Replace("[Inactive]", "[bInactive]");
			rtv = rtv.Replace("[DateAdded]", "[dtAdded]");
			rtv = rtv.Replace("[AddedByUser]", "[sAddedByUser]");
			rtv = rtv.Replace("[DateUpdated]", "[dtUpdated]");
			rtv = rtv.Replace("[UpdatedByUser]", "[sUpdatedByUser]");
			rtv = rtv.Replace("[Rowversion]", "[bRowversion]");

			return rtv;
		}

		#region Json.NET Serialization
		/// <summary>
		/// Attempt to serialize the Contact object to the server
		/// </summary>
		/// <param name="obj">The Contact object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(Contact obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the Contact object from the server
		/// </summary>
		/// <param name="obj">The Contact object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A Contact object containing the return from the method</returns>
		public static Contact DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			Contact rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<Contact>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization

		#endregion Public Static Methods

		#region IClassGenPropertyChanging Implementation

		/// <summary>
		/// Occurs when a property is about to change.
		/// </summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>
		/// Occurs when a ClassGen property is about to change.
		/// </summary>
		public event ClassGenPropertyChangingEventHandler ClassGenPropertyChanging;
		private bool NotifyPropertyChanging(string info, object oldValue, object newValue)
		{
			bool cancel = false;
			if (ClassGenPropertyChanging != null)
			{
				ClassGenPropertyChangingEventArgs e = new ClassGenPropertyChangingEventArgs(info, oldValue, newValue);
				ClassGenPropertyChanging(this, e);
				cancel = e.Cancel; 
			}
			if (!cancel && PropertyChanging != null)
			{
				PropertyChangingEventArgs e = new PropertyChangingEventArgs(info);
				PropertyChanging(this, e);
			}
			return cancel;
		}

		#endregion IClassGenPropertyChanging Implementation
		
		#region IClassGenLogXML Implementation
		/// <summary>
		/// Gets the current object as an XML object stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base properties 
		///		created as model base objects (GridCustom0-9, etc.).</param>
		/// <returns>The object as an XML string.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();

			sb.Append("<ContactID>" + System.Security.SecurityElement.Escape(ContactID.ToString()) + "</ContactID>" + Environment.NewLine);
			sb.Append("<AgencyID>" + System.Security.SecurityElement.Escape(AgencyID.ToString()) + "</AgencyID>" + Environment.NewLine);
			sb.Append("<CurrentStatus>" + System.Security.SecurityElement.Escape(CurrentStatus) + "</CurrentStatus>" + Environment.NewLine);
			sb.Append("<LastName>" + System.Security.SecurityElement.Escape(LastName) + "</LastName>" + Environment.NewLine);
			sb.Append("<FirstName>" + System.Security.SecurityElement.Escape(FirstName) + "</FirstName>" + Environment.NewLine);
			sb.Append("<MiddleName>" + System.Security.SecurityElement.Escape(MiddleName) + "</MiddleName>" + Environment.NewLine);
			sb.Append("<MaidenName>" + System.Security.SecurityElement.Escape(MaidenName) + "</MaidenName>" + Environment.NewLine);
			sb.Append("<CompanyName>" + System.Security.SecurityElement.Escape(CompanyName) + "</CompanyName>" + Environment.NewLine);
			sb.Append("<SpouseName>" + System.Security.SecurityElement.Escape(SpouseName) + "</SpouseName>" + Environment.NewLine);
			sb.Append("<EMail>" + System.Security.SecurityElement.Escape(EMail) + "</EMail>" + Environment.NewLine);
			sb.Append("<SSN>" + System.Security.SecurityElement.Escape(SSN) + "</SSN>" + Environment.NewLine);
			sb.Append("<POSTID>" + System.Security.SecurityElement.Escape(POSTID) + "</POSTID>" + Environment.NewLine);
			sb.Append("<Gender>" + System.Security.SecurityElement.Escape(Gender) + "</Gender>" + Environment.NewLine);
			sb.Append("<Ethnicity>" + System.Security.SecurityElement.Escape(Ethnicity) + "</Ethnicity>" + Environment.NewLine);
			if (DateDOB.HasValue)
			{
				sb.Append("<DateDOB>" + DateDOB.Value.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateDOB>" + Environment.NewLine);
			}
			sb.Append("<DLNum>" + System.Security.SecurityElement.Escape(DLNum) + "</DLNum>" + Environment.NewLine);
			if (DateDLExpires.HasValue)
			{
				sb.Append("<DateDLExpires>" + DateDLExpires.Value.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateDLExpires>" + Environment.NewLine);
			}
			sb.Append("<Height>" + System.Security.SecurityElement.Escape(Height.ToString()) + "</Height>" + Environment.NewLine);
			sb.Append("<Weight>" + System.Security.SecurityElement.Escape(Weight.ToString()) + "</Weight>" + Environment.NewLine);
			sb.Append("<HairColor>" + System.Security.SecurityElement.Escape(HairColor) + "</HairColor>" + Environment.NewLine);
			sb.Append("<EyeColor>" + System.Security.SecurityElement.Escape(EyeColor) + "</EyeColor>" + Environment.NewLine);
			sb.Append("<PeaceOfficer>" + System.Security.SecurityElement.Escape(PeaceOfficer.ToString()) + "</PeaceOfficer>" + Environment.NewLine);
			sb.Append("<RequiredToQualifyWithFirearm>" + System.Security.SecurityElement.Escape(RequiredToQualifyWithFirearm.ToString()) + "</RequiredToQualifyWithFirearm>" + Environment.NewLine);
			sb.Append("<TraineeStatus>" + System.Security.SecurityElement.Escape(TraineeStatus) + "</TraineeStatus>" + Environment.NewLine);
			sb.Append("<TimeBase>" + System.Security.SecurityElement.Escape(TimeBase) + "</TimeBase>" + Environment.NewLine);
			sb.Append("<MaritalStatus>" + System.Security.SecurityElement.Escape(MaritalStatus) + "</MaritalStatus>" + Environment.NewLine);
			sb.Append("<VendorSupplierNum>" + System.Security.SecurityElement.Escape(VendorSupplierNum) + "</VendorSupplierNum>" + Environment.NewLine);
			sb.Append("<VendorContactName>" + System.Security.SecurityElement.Escape(VendorContactName) + "</VendorContactName>" + Environment.NewLine);
			sb.Append("<VendorContactPhone>" + System.Security.SecurityElement.Escape(VendorContactPhone) + "</VendorContactPhone>" + Environment.NewLine);
			sb.Append("<Inactive>" + System.Security.SecurityElement.Escape(Inactive.ToString()) + "</Inactive>" + Environment.NewLine);
			sb.Append("<DateAdded>" + DateAdded.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateAdded>" + Environment.NewLine);
			sb.Append("<AddedByUser>" + System.Security.SecurityElement.Escape(AddedByUser) + "</AddedByUser>" + Environment.NewLine);
			sb.Append("<DateUpdated>" + DateUpdated.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateUpdated>" + Environment.NewLine);
			sb.Append("<UpdatedByUser>" + System.Security.SecurityElement.Escape(UpdatedByUser) + "</UpdatedByUser>" + Environment.NewLine);

			if (includeBaseProperties)
			{
				sb.Append("<RecordStatus>" + this.RecordStatus.ToString() + "</RecordStatus>" + Environment.NewLine);
				sb.Append("<CheckedInGrid>" + this.CheckedInGrid.ToString() + "</CheckedInGrid>" + Environment.NewLine);
				sb.Append("<IsDisposable>" + this.IsDisposable.ToString() + "</IsDisposable>" + Environment.NewLine);

				sb.Append("<GridCustom_0>" + System.Security.SecurityElement.Escape(this.GridCustom_0) + "</GridCustom_0>" + Environment.NewLine);
				sb.Append("<GridCustom_1>" + System.Security.SecurityElement.Escape(this.GridCustom_1) + "</GridCustom_1>" + Environment.NewLine);
				sb.Append("<GridCustom_2>" + System.Security.SecurityElement.Escape(this.GridCustom_2) + "</GridCustom_2>" + Environment.NewLine);
				sb.Append("<GridCustom_3>" + System.Security.SecurityElement.Escape(this.GridCustom_3) + "</GridCustom_3>" + Environment.NewLine);
				sb.Append("<GridCustom_4>" + System.Security.SecurityElement.Escape(this.GridCustom_4) + "</GridCustom_4>" + Environment.NewLine);
				sb.Append("<GridCustom_5>" + System.Security.SecurityElement.Escape(this.GridCustom_5) + "</GridCustom_5>" + Environment.NewLine);
				sb.Append("<GridCustom_6>" + System.Security.SecurityElement.Escape(this.GridCustom_6) + "</GridCustom_6>" + Environment.NewLine);
				sb.Append("<GridCustom_7>" + System.Security.SecurityElement.Escape(this.GridCustom_7) + "</GridCustom_7>" + Environment.NewLine);
				sb.Append("<GridCustom_8>" + System.Security.SecurityElement.Escape(this.GridCustom_8) + "</GridCustom_8>" + Environment.NewLine);
				sb.Append("<GridCustom_9>" + System.Security.SecurityElement.Escape(this.GridCustom_9) + "</GridCustom_9>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<Contact>" + Environment.NewLine);
				sb.Append("</Contact>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Get the current object as an XML object stream with all base properties included.
		/// </summary>
		/// <returns>The object as an XML string with all base properties included.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the changed elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <returns>A string value containing the XML list.</returns>
		public string GetChangedElementsAsXML()
		{
			StringBuilder sb = new StringBuilder();

			// Get the original values in relation to the new ones
			if (_originalValues.ContactID != ContactID)
			{
				sb.Append("\t<ContactID>");
				sb.Append("<OldValue>" + _originalValues.ContactID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + ContactID.ToString() + "</NewValue>");
				sb.Append("</ContactID>" + Environment.NewLine);
			}
			if (_originalValues.AgencyID != AgencyID)
			{
				sb.Append("\t<AgencyID>");
				sb.Append("<OldValue>" + _originalValues.AgencyID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + AgencyID.ToString() + "</NewValue>");
				sb.Append("</AgencyID>" + Environment.NewLine);
			}
			if (_originalValues.CurrentStatus != CurrentStatus)
			{
				sb.Append("\t<CurrentStatus>");
				sb.Append("<OldValue>" + _originalValues.CurrentStatus + "</OldValue>");
				sb.Append("<NewValue>" + CurrentStatus + "</NewValue>");
				sb.Append("</CurrentStatus>" + Environment.NewLine);
			}
			if (_originalValues.LastName != LastName)
			{
				sb.Append("\t<LastName>");
				sb.Append("<OldValue>" + _originalValues.LastName + "</OldValue>");
				sb.Append("<NewValue>" + LastName + "</NewValue>");
				sb.Append("</LastName>" + Environment.NewLine);
			}
			if (_originalValues.FirstName != FirstName)
			{
				sb.Append("\t<FirstName>");
				sb.Append("<OldValue>" + _originalValues.FirstName + "</OldValue>");
				sb.Append("<NewValue>" + FirstName + "</NewValue>");
				sb.Append("</FirstName>" + Environment.NewLine);
			}
			if (_originalValues.MiddleName != MiddleName)
			{
				sb.Append("\t<MiddleName>");
				sb.Append("<OldValue>" + _originalValues.MiddleName + "</OldValue>");
				sb.Append("<NewValue>" + MiddleName + "</NewValue>");
				sb.Append("</MiddleName>" + Environment.NewLine);
			}
			if (_originalValues.MaidenName != MaidenName)
			{
				sb.Append("\t<MaidenName>");
				sb.Append("<OldValue>" + _originalValues.MaidenName + "</OldValue>");
				sb.Append("<NewValue>" + MaidenName + "</NewValue>");
				sb.Append("</MaidenName>" + Environment.NewLine);
			}
			if (_originalValues.CompanyName != CompanyName)
			{
				sb.Append("\t<CompanyName>");
				sb.Append("<OldValue>" + _originalValues.CompanyName + "</OldValue>");
				sb.Append("<NewValue>" + CompanyName + "</NewValue>");
				sb.Append("</CompanyName>" + Environment.NewLine);
			}
			if (_originalValues.SpouseName != SpouseName)
			{
				sb.Append("\t<SpouseName>");
				sb.Append("<OldValue>" + _originalValues.SpouseName + "</OldValue>");
				sb.Append("<NewValue>" + SpouseName + "</NewValue>");
				sb.Append("</SpouseName>" + Environment.NewLine);
			}
			if (_originalValues.EMail != EMail)
			{
				sb.Append("\t<EMail>");
				sb.Append("<OldValue>" + _originalValues.EMail + "</OldValue>");
				sb.Append("<NewValue>" + EMail + "</NewValue>");
				sb.Append("</EMail>" + Environment.NewLine);
			}
			if (_originalValues.SSN != SSN)
			{
				sb.Append("\t<SSN>");
				sb.Append("<OldValue>" + _originalValues.SSN + "</OldValue>");
				sb.Append("<NewValue>" + SSN + "</NewValue>");
				sb.Append("</SSN>" + Environment.NewLine);
			}
			if (_originalValues.POSTID != POSTID)
			{
				sb.Append("\t<POSTID>");
				sb.Append("<OldValue>" + _originalValues.POSTID + "</OldValue>");
				sb.Append("<NewValue>" + POSTID + "</NewValue>");
				sb.Append("</POSTID>" + Environment.NewLine);
			}
			if (_originalValues.Gender != Gender)
			{
				sb.Append("\t<Gender>");
				sb.Append("<OldValue>" + _originalValues.Gender + "</OldValue>");
				sb.Append("<NewValue>" + Gender + "</NewValue>");
				sb.Append("</Gender>" + Environment.NewLine);
			}
			if (_originalValues.Ethnicity != Ethnicity)
			{
				sb.Append("\t<Ethnicity>");
				sb.Append("<OldValue>" + _originalValues.Ethnicity + "</OldValue>");
				sb.Append("<NewValue>" + Ethnicity + "</NewValue>");
				sb.Append("</Ethnicity>" + Environment.NewLine);
			}
			if (_originalValues.DateDOB != DateDOB)
			{
				sb.Append("\t<DateDOB>");
				sb.Append("<OldValue>" + _originalValues.DateDOB.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateDOB.ToString() + "</NewValue>");
				sb.Append("</DateDOB>" + Environment.NewLine);
			}
			if (_originalValues.DLNum != DLNum)
			{
				sb.Append("\t<DLNum>");
				sb.Append("<OldValue>" + _originalValues.DLNum + "</OldValue>");
				sb.Append("<NewValue>" + DLNum + "</NewValue>");
				sb.Append("</DLNum>" + Environment.NewLine);
			}
			if (_originalValues.DateDLExpires != DateDLExpires)
			{
				sb.Append("\t<DateDLExpires>");
				sb.Append("<OldValue>" + _originalValues.DateDLExpires.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateDLExpires.ToString() + "</NewValue>");
				sb.Append("</DateDLExpires>" + Environment.NewLine);
			}
			if (_originalValues.Height != Height)
			{
				sb.Append("\t<Height>");
				sb.Append("<OldValue>" + _originalValues.Height.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Height.ToString() + "</NewValue>");
				sb.Append("</Height>" + Environment.NewLine);
			}
			if (_originalValues.Weight != Weight)
			{
				sb.Append("\t<Weight>");
				sb.Append("<OldValue>" + _originalValues.Weight.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Weight.ToString() + "</NewValue>");
				sb.Append("</Weight>" + Environment.NewLine);
			}
			if (_originalValues.HairColor != HairColor)
			{
				sb.Append("\t<HairColor>");
				sb.Append("<OldValue>" + _originalValues.HairColor + "</OldValue>");
				sb.Append("<NewValue>" + HairColor + "</NewValue>");
				sb.Append("</HairColor>" + Environment.NewLine);
			}
			if (_originalValues.EyeColor != EyeColor)
			{
				sb.Append("\t<EyeColor>");
				sb.Append("<OldValue>" + _originalValues.EyeColor + "</OldValue>");
				sb.Append("<NewValue>" + EyeColor + "</NewValue>");
				sb.Append("</EyeColor>" + Environment.NewLine);
			}
			if (_originalValues.PeaceOfficer != PeaceOfficer)
			{
				sb.Append("\t<PeaceOfficer>");
				sb.Append("<OldValue>" + _originalValues.PeaceOfficer.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + PeaceOfficer.ToString() + "</NewValue>");
				sb.Append("</PeaceOfficer>" + Environment.NewLine);
			}
			if (_originalValues.RequiredToQualifyWithFirearm != RequiredToQualifyWithFirearm)
			{
				sb.Append("\t<RequiredToQualifyWithFirearm>");
				sb.Append("<OldValue>" + _originalValues.RequiredToQualifyWithFirearm.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + RequiredToQualifyWithFirearm.ToString() + "</NewValue>");
				sb.Append("</RequiredToQualifyWithFirearm>" + Environment.NewLine);
			}
			if (_originalValues.TraineeStatus != TraineeStatus)
			{
				sb.Append("\t<TraineeStatus>");
				sb.Append("<OldValue>" + _originalValues.TraineeStatus + "</OldValue>");
				sb.Append("<NewValue>" + TraineeStatus + "</NewValue>");
				sb.Append("</TraineeStatus>" + Environment.NewLine);
			}
			if (_originalValues.TimeBase != TimeBase)
			{
				sb.Append("\t<TimeBase>");
				sb.Append("<OldValue>" + _originalValues.TimeBase + "</OldValue>");
				sb.Append("<NewValue>" + TimeBase + "</NewValue>");
				sb.Append("</TimeBase>" + Environment.NewLine);
			}
			if (_originalValues.MaritalStatus != MaritalStatus)
			{
				sb.Append("\t<MaritalStatus>");
				sb.Append("<OldValue>" + _originalValues.MaritalStatus + "</OldValue>");
				sb.Append("<NewValue>" + MaritalStatus + "</NewValue>");
				sb.Append("</MaritalStatus>" + Environment.NewLine);
			}
			if (_originalValues.VendorSupplierNum != VendorSupplierNum)
			{
				sb.Append("\t<VendorSupplierNum>");
				sb.Append("<OldValue>" + _originalValues.VendorSupplierNum + "</OldValue>");
				sb.Append("<NewValue>" + VendorSupplierNum + "</NewValue>");
				sb.Append("</VendorSupplierNum>" + Environment.NewLine);
			}
			if (_originalValues.VendorContactName != VendorContactName)
			{
				sb.Append("\t<VendorContactName>");
				sb.Append("<OldValue>" + _originalValues.VendorContactName + "</OldValue>");
				sb.Append("<NewValue>" + VendorContactName + "</NewValue>");
				sb.Append("</VendorContactName>" + Environment.NewLine);
			}
			if (_originalValues.VendorContactPhone != VendorContactPhone)
			{
				sb.Append("\t<VendorContactPhone>");
				sb.Append("<OldValue>" + _originalValues.VendorContactPhone + "</OldValue>");
				sb.Append("<NewValue>" + VendorContactPhone + "</NewValue>");
				sb.Append("</VendorContactPhone>" + Environment.NewLine);
			}
			if (_originalValues.Inactive != Inactive)
			{
				sb.Append("\t<Inactive>");
				sb.Append("<OldValue>" + _originalValues.Inactive.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Inactive.ToString() + "</NewValue>");
				sb.Append("</Inactive>" + Environment.NewLine);
			}
			if (_originalValues.DateAdded != DateAdded)
			{
				sb.Append("\t<DateAdded>");
				sb.Append("<OldValue>" + _originalValues.DateAdded.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateAdded.ToString() + "</NewValue>");
				sb.Append("</DateAdded>" + Environment.NewLine);
			}
			if (_originalValues.AddedByUser != AddedByUser)
			{
				sb.Append("\t<AddedByUser>");
				sb.Append("<OldValue>" + _originalValues.AddedByUser + "</OldValue>");
				sb.Append("<NewValue>" + AddedByUser + "</NewValue>");
				sb.Append("</AddedByUser>" + Environment.NewLine);
			}
			if (_originalValues.DateUpdated != DateUpdated)
			{
				sb.Append("\t<DateUpdated>");
				sb.Append("<OldValue>" + _originalValues.DateUpdated.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateUpdated.ToString() + "</NewValue>");
				sb.Append("</DateUpdated>" + Environment.NewLine);
			}
			if (_originalValues.UpdatedByUser != UpdatedByUser)
			{
				sb.Append("\t<UpdatedByUser>");
				sb.Append("<OldValue>" + _originalValues.UpdatedByUser + "</OldValue>");
				sb.Append("<NewValue>" + UpdatedByUser + "</NewValue>");
				sb.Append("</UpdatedByUser>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<Contact>" + Environment.NewLine);
				sb.Append("</Contact>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Generates a new Contact object from an XML description.
		/// </summary>
		/// <param name="xml">The string of XML to load from.</param>
		/// <returns>A new Contact object.</returns>
		public static Contact LoadFromXML(string xml)
		{
			Contact item = new Contact();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			bool propSet = false;
			doc.LoadXml(xml);

			foreach (System.Xml.XmlNode child in doc.ChildNodes[0].ChildNodes)
			{
				if (!propSet) { propSet = true; }
				switch (child.Name)
				{
					case "ContactID": item.ContactID = long.Parse(child.InnerText); break;
					case "AgencyID": item.AgencyID = long.Parse(child.InnerText); break;
					case "CurrentStatus": item.CurrentStatus = child.InnerText; break;
					case "LastName": item.LastName = child.InnerText; break;
					case "FirstName": item.FirstName = child.InnerText; break;

					case "MiddleName": item.MiddleName = child.InnerText; break;
					case "MaidenName": item.MaidenName = child.InnerText; break;
					case "CompanyName": item.CompanyName = child.InnerText; break;
					case "SpouseName": item.SpouseName = child.InnerText; break;
					case "EMail": item.EMail = child.InnerText; break;

					case "SSN": item.SSN = child.InnerText; break;
					case "POSTID": item.POSTID = child.InnerText; break;
					case "Gender": item.Gender = child.InnerText; break;
					case "Ethnicity": item.Ethnicity = child.InnerText; break;
					case "DateDOB": item.DateDOB = (!String.IsNullOrEmpty(child.InnerText) ? DateTime.Parse(child.InnerText) : (DateTime?)null); break;

					case "DLNum": item.DLNum = child.InnerText; break;
					case "DateDLExpires": item.DateDLExpires = (!String.IsNullOrEmpty(child.InnerText) ? DateTime.Parse(child.InnerText) : (DateTime?)null); break;
					case "Height": item.Height = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "Weight": item.Weight = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "HairColor": item.HairColor = child.InnerText; break;

					case "EyeColor": item.EyeColor = child.InnerText; break;
					case "PeaceOfficer": item.PeaceOfficer = bool.Parse(child.InnerText); break;
					case "RequiredToQualifyWithFirearm": item.RequiredToQualifyWithFirearm = bool.Parse(child.InnerText); break;
					case "TraineeStatus": item.TraineeStatus = child.InnerText; break;
					case "TimeBase": item.TimeBase = child.InnerText; break;

					case "MaritalStatus": item.MaritalStatus = child.InnerText; break;
					case "VendorSupplierNum": item.VendorSupplierNum = child.InnerText; break;
					case "VendorContactName": item.VendorContactName = child.InnerText; break;
					case "VendorContactPhone": item.VendorContactPhone = child.InnerText; break;
					case "Inactive": item.Inactive = bool.Parse(child.InnerText); break;

					case "DateAdded": item.DateAdded = DateTime.Parse(child.InnerText); break;
					case "AddedByUser": item.AddedByUser = child.InnerText; break;
					case "DateUpdated": item.DateUpdated = DateTime.Parse(child.InnerText); break;
					case "UpdatedByUser": item.UpdatedByUser = child.InnerText; break;
					case "RecordStatus": item.RecordStatus = (RecordStatus)Enum.Parse(typeof(RecordStatus), child.InnerText, true); break;

					case "CheckedInGrid": item.CheckedInGrid = bool.Parse(child.InnerText); break;
					case "IsDisposable": item.IsDisposable = bool.Parse(child.InnerText); break;
					case "GridCustom_0": item.GridCustom_0 = child.InnerText; break;
					case "GridCustom_1": item.GridCustom_1 = child.InnerText; break;
					case "GridCustom_2": item.GridCustom_2 = child.InnerText; break;

					case "GridCustom_3": item.GridCustom_3 = child.InnerText; break;
					case "GridCustom_4": item.GridCustom_4 = child.InnerText; break;
					case "GridCustom_5": item.GridCustom_5 = child.InnerText; break;
					case "GridCustom_6": item.GridCustom_6 = child.InnerText; break;
					case "GridCustom_7": item.GridCustom_7 = child.InnerText; break;

					case "GridCustom_8": item.GridCustom_8 = child.InnerText; break;
					case "GridCustom_9": item.GridCustom_9 = child.InnerText; break;
				}
			}
			return (propSet ? item : null);
		}
		#endregion IClassGenLogXML Implementation
	}
	#endregion Contact Class

	#region ContactField Enum
	/// <summary>
	/// Enum for each field type in the element.
	/// </summary>
	public enum ContactField
	{
		/// <summary>
		/// The ContactID element.
		/// </summary>
		ContactID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The CurrentStatus element.
		/// </summary>
		CurrentStatus,
		/// <summary>
		/// The LastName element.
		/// </summary>
		LastName,
		/// <summary>
		/// The FirstName element.
		/// </summary>
		FirstName,
		/// <summary>
		/// The MiddleName element.
		/// </summary>
		MiddleName,
		/// <summary>
		/// The MaidenName element.
		/// </summary>
		MaidenName,
		/// <summary>
		/// The CompanyName element.
		/// </summary>
		CompanyName,
		/// <summary>
		/// The SpouseName element.
		/// </summary>
		SpouseName,
		/// <summary>
		/// The EMail element.
		/// </summary>
		EMail,
		/// <summary>
		/// The SSN element.
		/// </summary>
		SSN,
		/// <summary>
		/// The POSTID element.
		/// </summary>
		POSTID,
		/// <summary>
		/// The Gender element.
		/// </summary>
		Gender,
		/// <summary>
		/// The Ethnicity element.
		/// </summary>
		Ethnicity,
		/// <summary>
		/// The DateDOB element.
		/// </summary>
		DateDOB,
		/// <summary>
		/// The DLNum element.
		/// </summary>
		DLNum,
		/// <summary>
		/// The DateDLExpires element.
		/// </summary>
		DateDLExpires,
		/// <summary>
		/// The Height element.
		/// </summary>
		Height,
		/// <summary>
		/// The Weight element.
		/// </summary>
		Weight,
		/// <summary>
		/// The HairColor element.
		/// </summary>
		HairColor,
		/// <summary>
		/// The EyeColor element.
		/// </summary>
		EyeColor,
		/// <summary>
		/// The PeaceOfficer element.
		/// </summary>
		PeaceOfficer,
		/// <summary>
		/// The RequiredToQualifyWithFirearm element.
		/// </summary>
		RequiredToQualifyWithFirearm,
		/// <summary>
		/// The TraineeStatus element.
		/// </summary>
		TraineeStatus,
		/// <summary>
		/// The TimeBase element.
		/// </summary>
		TimeBase,
		/// <summary>
		/// The MaritalStatus element.
		/// </summary>
		MaritalStatus,
		/// <summary>
		/// The VendorSupplierNum element.
		/// </summary>
		VendorSupplierNum,
		/// <summary>
		/// The VendorContactName element.
		/// </summary>
		VendorContactName,
		/// <summary>
		/// The VendorContactPhone element.
		/// </summary>
		VendorContactPhone,
		/// <summary>
		/// The Inactive element.
		/// </summary>
		Inactive,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The AddedByUser element.
		/// </summary>
		AddedByUser,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
		/// <summary>
		/// The UpdatedByUser element.
		/// </summary>
		UpdatedByUser,
		/// <summary>
		/// The Rowversion element.
		/// </summary>
		Rowversion,
	}
	#endregion ContactField Enum

	#region ContactMinMaxDateField Enum
	/// <summary>
	/// Enum for each DateTime field in the element that can have a minimum or maximum.
	/// </summary>
	public enum ContactMinMaxDateField
	{
		/// <summary>
		/// The DateDOB element.
		/// </summary>
		DateDOB,
		/// <summary>
		/// The DateDLExpires element.
		/// </summary>
		DateDLExpires,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
	}
	#endregion ContactMinMaxDateField Enum

	#region ContactMinMaxNumberField Enum
	/// <summary>
	/// Enum for each numerical field in the element that can have a minimum or maximum.
	/// </summary>
	public enum ContactMinMaxNumberField
	{
		/// <summary>
		/// The ContactID element.
		/// </summary>
		ContactID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The Height element.
		/// </summary>
		Height,
		/// <summary>
		/// The Weight element.
		/// </summary>
		Weight,
	}
	#endregion ContactMinMaxNumberField Enum

	#region Contact Collection
	/// <summary>
	/// A collection for Contact objects.
	/// </summary>
	/// <remarks>
	/// This collection class is the primary way to work with Contact objects.
	/// Most of the functionality is in this class, including the methods for creating Contact objects from a database.
	/// </remarks>
	[Serializable]
	public partial class ContactCollection : ClassGenBindingList<Contact, long>, IDisposable, 
		IClassGenLogXMLCollection, IClassGenClassGenerated, IClassGenClassUpdatable
	{
		#region Constructors
		/// <summary>
		/// Create an empty collection.
		/// </summary>
		public ContactCollection() 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "ContactID";

			// Create the foreign key and parent key collections
			this.ForeignKeyFields.Add("AgencyID");

			_rules = new ClassGenRules(this);			// Set the base collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		public ContactCollection(string whereClause) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "ContactID";

			// Create the foreign key and parent key collections
			this.ForeignKeyFields.Add("AgencyID");

			_rules = new ClassGenRules(this);			// Set the base collection
			this.GetFromDB(whereClause);			// Populate the collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		/// <param name="getChildren">True if the collection should populate all child collections as well.</param>
		public ContactCollection(string whereClause, bool getChildren) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "ContactID";

			// Create the foreign key and parent key collections
			this.ForeignKeyFields.Add("AgencyID");

			_rules = new ClassGenRules(this);				// Set the base collection
			this.GetFromDB(whereClause, getChildren);		// Populate the collection
		}
		#endregion Constructors

		#region Public Properties
		/// <summary>
		/// Get a single record from the collection (not from the DB) that matches the ID.
		/// </summary>
		/// <param name="contactID">A key field used to find the correct record.</param>
		/// <returns>The Contact object that matches the given value.</returns>
		public Contact Get(long contactID)
		{
			Contact val = null;
			if (KeyedCollection.ContainsKey(contactID)) { val = KeyedCollection[contactID]; }
			return val;
		}

		// Override the methods needed to do the collection thing
		#region Common Methods Override

		/// <summary>
		/// Get all records in the collection (not from the DB) that match the given value for the AgencyID property.
		/// </summary>
		/// <param name="agencyID">The value to match.</param>
		/// <returns>A ContactCollection of matching records.</returns>
		public ContactCollection GetByAgencyID(long agencyID)
		{
			ContactCollection coll = new ContactCollection();
			if (FKKeyedCollection.ContainsKey("AgencyID"))
			{
				List<Contact> list = new List<Contact>();
				if (FKKeyedCollection["AgencyID"].ContainsKey(agencyID))
				{
					list = FKKeyedCollection["AgencyID"][agencyID];
				}
				foreach (Contact item in list)
				{
					coll.Add(item);
				}
			}
			return coll;
		}


		/// <summary>
		/// Get the next new id from the localized collection as a long.
		/// </summary>
		/// <returns>The next ID in the negative sequence of numbers.</returns>
		public long GetNextNewID()
		{
			long rtv = 0;

			// Get the next number in sequence
			for (long i = -9223372036854775808; i <= 0; i++)
			{
				if (!KeyedCollection.ContainsKey(i))
				{
					rtv = i;
					break;
				}
			}

			return rtv;		// Return the value
		}
		#endregion Common Methods Override


		/// <summary>
		/// A collection of all the active records from the collection (the ones without a status of "Deleted").
		/// </summary>
		public new ContactCollection ActiveRecords
		{
			get
			{
				return (ContactCollection)base.ActiveRecords;
			}
		}

		/// <summary>
		/// A collection of all the deleted records from the collection (the ones with a status of "Deleted").
		/// </summary>
		public ContactCollection DeletedRecords
		{
			get
			{
				return (ContactCollection)GetRecordsBasedOnStatus(RecordStatus.Deleted);
			}
		}

		/// <summary>
		/// A collection of all the modified records from the collection (the ones with a status of "Modified").
		/// </summary>
		public ContactCollection ModifiedRecords
		{
			get
			{
				return (ContactCollection)GetRecordsBasedOnStatus(RecordStatus.Modified);
			}
		}

		/// <summary>
		/// A collection of all the new records from the collection (the ones with a status of "New").
		/// </summary>
		public ContactCollection NewRecords
		{
			get
			{
				return (ContactCollection)GetRecordsBasedOnStatus(RecordStatus.New);
			}
		}

		#endregion Public Properties

		#region Collection Get Methods
		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(ref long dbCount)
		{
			dbCount = ContactCollection.GetCountFromDB();
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = ContactCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = ContactCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Get all items from the database.
		/// Gets and populates all children objects as well.
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDBWithChildren()
		{
			this.GetCollectionConfig.WhereClause = string.Empty;
			this.GetCollectionConfig.GetChildren = true;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB() 
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			SqlParameter param = null;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			
			// Reset the IsLoaded Variable before we load the collection
			this._isLoaded = false;
			
			// See if we're supposed to get this thing paged
			if (this.GetCollectionConfig.PageRecords)
			{
				_backgroundWorker = new BackgroundWorker();
				_backgroundWorker.WorkerReportsProgress = true;
				_backgroundWorker.WorkerSupportsCancellation = true;
				_backgroundWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(_backgroundWorker_RunWorkerCompleted);
				_backgroundWorker.ProgressChanged += new ProgressChangedEventHandler(_backgroundWorker_ProgressChanged);
				_backgroundWorker.DoWork += new DoWorkEventHandler(_backgroundWorker_DoWork);
				_backgroundWorker.RunWorkerAsync();
				return errors;
			}

			try
			{
				sql = "SELECT " + (this.GetCollectionConfig.TopRecords > -1 ? "TOP " + this.GetCollectionConfig.TopRecords.ToString() + " " : "") +
					" [C].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tContact [C] " + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? "WHERE " + this.GetCollectionConfig.WhereClause : "") + 
					"";
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause)
				{
					sql += (!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " AND" : " WHERE") +
						" dtUpdated > @pdtUpdated";
					param = new SqlParameter("@pdtUpdated", SqlDbType.DateTime);
					param.Value = _dateTimeObjectPopulated;
				}
				if (this.GetCollectionConfig.TopRecords > -1 &&
					!String.IsNullOrEmpty(this.GetCollectionConfig.TopSort))
				{
					sql += " ORDER BY " + this.GetCollectionConfig.TopSort;
				}
				cmd = new SqlCommand(sql);
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { cmd.Parameters.Add(param); }

				this.OnMasterPopulate("Contact", "Retrieving Full List Of Contacts", string.Empty);
				dt = DAL.SQLExecDataTable(cmd);

				int count = 0;
				if (!this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { this.Clear(); }
				foreach (DataRow row in dt.Rows)
				{
					// Enumerate through the fields and set up the object
					if (count == 0)
					{
						if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
						{
							_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
						}
						else
						{
							_dateTimeObjectPopulated = DateTime.Now;
						}
						DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
					}

					this.OnDetailPopulate("Contact", 
						"Populating Contact: " + (++count).ToString("###,###,###,##0") + " of " + dt.Rows.Count.ToString("###,###,###,##0"), 
						string.Empty, 
						dt.Rows.Count, 
						count);

					#region Fields
					Contact item = new Contact();
					item.Get(row);

					// Check to make sure this collection doesn't already contain this item
					if (this.Contains(item.ContactID)) { this.Remove(item.ContactID); }

					this.Add(item);
					#endregion Fields
				}
				
				dt.Dispose();		// Dispose of the datatable

				this._isLoaded = true;				// Set the IsLoaded Property
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get all items from the database based on the passed AgencyID.
		/// </summary>
		/// <param name="agencyID">The AgencyID to hunt for.</param>
		public void GetFromDBByAgencyID(long agencyID) 
		{
			GetFromDB("iAgencyID = " + agencyID, true);
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <param name="whereClause">The SQL Where clause to use to get the total count.</param>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB(string whereClause)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			int rtv = 0;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT COUNT(*) " +
						"FROM tContact " +
						(!String.IsNullOrEmpty(whereClause) ? "WHERE " + whereClause : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count > 0 &&
					dt.Rows[0][0] != DBNull.Value)
				{
					rtv = (int)dt.Rows[0][0];
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB()
		{
			return GetCountFromDB(string.Empty);		// Return the base method
		}
		#endregion Collection Get Methods

		#region Collection Put Methods
		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		public ClassGenExceptionCollection AddUpdateAll()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdateAll(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		/// <param name="oConn">The connection object</param>
		/// <param name="oTrans">The transaction object</param>
		public ClassGenExceptionCollection AddUpdateAll(SqlConnection oConn, SqlTransaction oTrans)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			if (this.Count == 0) { return errors; }

			ClassGenExceptionCollection itemErrors = new ClassGenExceptionCollection();
			int addUpdateAffected = 0, deleteAffected = 0;

			try
			{
				// Delete Method
				for (int i = this.Count - 1; i >= 0; i--)
				{
					this.OnDetailDelete("Contact",
						"Deleting Contact: " + (this.Count - i + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						this.Count - i + 1);
					Contact item = this[i];
					if (item.RecordStatus == RecordStatus.Deleted)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0)
						{
							deleteAffected++;
							this.RemoveAt(i);		// Remove the item from the collection
						}
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = i + 1;
								err.RecordKey = item.ContactID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
				}

				// Update Method
				int count = 0;
				foreach (Contact item in this)
				{
					this.OnDetailUpdate("Contact",
						"Updating Contact: " + (count + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						count + 1);
					if (item.RecordStatus == RecordStatus.Modified ||
						item.RecordStatus == RecordStatus.New)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0) { addUpdateAffected++; }
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = count + 1;
								err.RecordKey = item.ContactID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
					count++;
				}


				// Add how many records were affected by the update
				errors.Add(new ClassGenException(addUpdateAffected.ToString("###,##0") +
					" Records affected by the update.", ClassGenExceptionIconType.System, addUpdateAffected.ToString()));
				errors[errors.Count - 1].Number = addUpdateAffected;
				errors.Add(new ClassGenException(deleteAffected.ToString("###,##0") +
					" Records affected by the delete.", ClassGenExceptionIconType.System, deleteAffected.ToString()));
				errors[errors.Count - 1].Number = deleteAffected;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}
		#endregion Collection Put Methods

		#region Clone/Copy Methods
		/// <summary>
		/// Create an exact copy of all the elements in the collection.
		/// </summary>
		/// <returns>The cloned collection.</returns>
		public new ContactCollection Clone()
		{
			ContactCollection newColl = new ContactCollection();
			newColl.AddRange(base.Clone());
			return newColl;
		}

		/// <summary>
		/// Copy the objects in the collection, creating a new ID for each one of them in the process.
		/// </summary>
		/// <returns>A new ContactCollection.</returns>
		public new ContactCollection CopyWithNewIDs()
		{
			return (ContactCollection)base.CopyWithNewIDs();
		}
		#endregion Clone/Copy Methods

		#region GetDistinct Method(s)
		/// <summary>
		/// Get a distinct list of values based on the elements in the collection.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public List<string> GetDistinctFromCollection(LEAD.ContactField field)
		{
			if (this.Count == 0) { return new List<string>(); }
			SortedList<string, string> vals = new SortedList<string, string>();

			// Add the elements
			switch (field)
			{
				case LEAD.ContactField.ContactID:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.ContactID.ToString()) && 
							!vals.ContainsKey(item.ContactID.ToString().Trim())) { vals.Add(item.ContactID.ToString().Trim(), item.ContactID.ToString().Trim()); }
					}
					break;
				case LEAD.ContactField.AgencyID:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.AgencyID.ToString()) && 
							!vals.ContainsKey(item.AgencyID.ToString().Trim())) { vals.Add(item.AgencyID.ToString().Trim(), item.AgencyID.ToString().Trim()); }
					}
					break;
				case LEAD.ContactField.CurrentStatus:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.CurrentStatus) && 
							!vals.ContainsKey(item.CurrentStatus.Trim())) { vals.Add(item.CurrentStatus.Trim(), item.CurrentStatus.Trim()); }
					}
					break;
				case LEAD.ContactField.LastName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.LastName) && 
							!vals.ContainsKey(item.LastName.Trim())) { vals.Add(item.LastName.Trim(), item.LastName.Trim()); }
					}
					break;
				case LEAD.ContactField.FirstName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.FirstName) && 
							!vals.ContainsKey(item.FirstName.Trim())) { vals.Add(item.FirstName.Trim(), item.FirstName.Trim()); }
					}
					break;
				case LEAD.ContactField.MiddleName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.MiddleName) && 
							!vals.ContainsKey(item.MiddleName.Trim())) { vals.Add(item.MiddleName.Trim(), item.MiddleName.Trim()); }
					}
					break;
				case LEAD.ContactField.MaidenName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.MaidenName) && 
							!vals.ContainsKey(item.MaidenName.Trim())) { vals.Add(item.MaidenName.Trim(), item.MaidenName.Trim()); }
					}
					break;
				case LEAD.ContactField.CompanyName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.CompanyName) && 
							!vals.ContainsKey(item.CompanyName.Trim())) { vals.Add(item.CompanyName.Trim(), item.CompanyName.Trim()); }
					}
					break;
				case LEAD.ContactField.SpouseName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.SpouseName) && 
							!vals.ContainsKey(item.SpouseName.Trim())) { vals.Add(item.SpouseName.Trim(), item.SpouseName.Trim()); }
					}
					break;
				case LEAD.ContactField.EMail:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.EMail) && 
							!vals.ContainsKey(item.EMail.Trim())) { vals.Add(item.EMail.Trim(), item.EMail.Trim()); }
					}
					break;
				case LEAD.ContactField.SSN:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.SSN) && 
							!vals.ContainsKey(item.SSN.Trim())) { vals.Add(item.SSN.Trim(), item.SSN.Trim()); }
					}
					break;
				case LEAD.ContactField.POSTID:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.POSTID) && 
							!vals.ContainsKey(item.POSTID.Trim())) { vals.Add(item.POSTID.Trim(), item.POSTID.Trim()); }
					}
					break;
				case LEAD.ContactField.Gender:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.Gender) && 
							!vals.ContainsKey(item.Gender.Trim())) { vals.Add(item.Gender.Trim(), item.Gender.Trim()); }
					}
					break;
				case LEAD.ContactField.Ethnicity:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.Ethnicity) && 
							!vals.ContainsKey(item.Ethnicity.Trim())) { vals.Add(item.Ethnicity.Trim(), item.Ethnicity.Trim()); }
					}
					break;
				case LEAD.ContactField.DLNum:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.DLNum) && 
							!vals.ContainsKey(item.DLNum.Trim())) { vals.Add(item.DLNum.Trim(), item.DLNum.Trim()); }
					}
					break;
				case LEAD.ContactField.Height:
					foreach (Contact item in this)
					{
						if (item.Height != null &&
							!String.IsNullOrEmpty(item.Height.ToString()) && 
							!vals.ContainsKey(item.Height.ToString().Trim())) { vals.Add(item.Height.ToString().Trim(), item.Height.ToString().Trim()); }
					}
					break;
				case LEAD.ContactField.Weight:
					foreach (Contact item in this)
					{
						if (item.Weight != null &&
							!String.IsNullOrEmpty(item.Weight.ToString()) && 
							!vals.ContainsKey(item.Weight.ToString().Trim())) { vals.Add(item.Weight.ToString().Trim(), item.Weight.ToString().Trim()); }
					}
					break;
				case LEAD.ContactField.HairColor:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.HairColor) && 
							!vals.ContainsKey(item.HairColor.Trim())) { vals.Add(item.HairColor.Trim(), item.HairColor.Trim()); }
					}
					break;
				case LEAD.ContactField.EyeColor:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.EyeColor) && 
							!vals.ContainsKey(item.EyeColor.Trim())) { vals.Add(item.EyeColor.Trim(), item.EyeColor.Trim()); }
					}
					break;
				case LEAD.ContactField.TraineeStatus:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.TraineeStatus) && 
							!vals.ContainsKey(item.TraineeStatus.Trim())) { vals.Add(item.TraineeStatus.Trim(), item.TraineeStatus.Trim()); }
					}
					break;
				case LEAD.ContactField.TimeBase:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.TimeBase) && 
							!vals.ContainsKey(item.TimeBase.Trim())) { vals.Add(item.TimeBase.Trim(), item.TimeBase.Trim()); }
					}
					break;
				case LEAD.ContactField.MaritalStatus:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.MaritalStatus) && 
							!vals.ContainsKey(item.MaritalStatus.Trim())) { vals.Add(item.MaritalStatus.Trim(), item.MaritalStatus.Trim()); }
					}
					break;
				case LEAD.ContactField.VendorSupplierNum:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.VendorSupplierNum) && 
							!vals.ContainsKey(item.VendorSupplierNum.Trim())) { vals.Add(item.VendorSupplierNum.Trim(), item.VendorSupplierNum.Trim()); }
					}
					break;
				case LEAD.ContactField.VendorContactName:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.VendorContactName) && 
							!vals.ContainsKey(item.VendorContactName.Trim())) { vals.Add(item.VendorContactName.Trim(), item.VendorContactName.Trim()); }
					}
					break;
				case LEAD.ContactField.VendorContactPhone:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.VendorContactPhone) && 
							!vals.ContainsKey(item.VendorContactPhone.Trim())) { vals.Add(item.VendorContactPhone.Trim(), item.VendorContactPhone.Trim()); }
					}
					break;
				case LEAD.ContactField.AddedByUser:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.AddedByUser) && 
							!vals.ContainsKey(item.AddedByUser.Trim())) { vals.Add(item.AddedByUser.Trim(), item.AddedByUser.Trim()); }
					}
					break;
				case LEAD.ContactField.UpdatedByUser:
					foreach (Contact item in this)
					{
						if (!String.IsNullOrEmpty(item.UpdatedByUser) && 
							!vals.ContainsKey(item.UpdatedByUser.Trim())) { vals.Add(item.UpdatedByUser.Trim(), item.UpdatedByUser.Trim()); }
					}
					break;
			}

			List<string> rtv = new List<string>();
			rtv.AddRange(vals.Keys);
			return rtv;
		}
		#endregion GetDistinct Method(s)

		#region Random Methods
		#region GetLocalChildren Methods
		/// <summary>
		/// Get all the local children (not from the DB) that are of type ContactAddress
		/// </summary>
		/// <returns>A ContactAddressCollection containing all the local children.</returns>
		public ContactAddressCollection GetLocalChildren_ContactAddress()
		{
			ContactAddressCollection rtv = new ContactAddressCollection();

			foreach (Contact parent in this)
			{
				foreach (ContactAddress child in parent.Coll_ContactAddress)
				{
					rtv.Add(child);
				}
			}

			return rtv;
		}

		/// <summary>
		/// Get all the local children (not from the DB) that are of type ContactLanguage
		/// </summary>
		/// <returns>A ContactLanguageCollection containing all the local children.</returns>
		public ContactLanguageCollection GetLocalChildren_ContactLanguage()
		{
			ContactLanguageCollection rtv = new ContactLanguageCollection();

			foreach (Contact parent in this)
			{
				foreach (ContactLanguage child in parent.Coll_ContactLanguage)
				{
					rtv.Add(child);
				}
			}

			return rtv;
		}

		/// <summary>
		/// Get all the local children (not from the DB) that are of type ContactPhone
		/// </summary>
		/// <returns>A ContactPhoneCollection containing all the local children.</returns>
		public ContactPhoneCollection GetLocalChildren_ContactPhone()
		{
			ContactPhoneCollection rtv = new ContactPhoneCollection();

			foreach (Contact parent in this)
			{
				foreach (ContactPhone child in parent.Coll_ContactPhone)
				{
					rtv.Add(child);
				}
			}

			return rtv;
		}
		#endregion GetLocalChildren Methods

		/// <summary>
		/// A collection of all broken rules associated with the collection.
		/// (Includes all the child classes validation as well.)
		/// </summary>
		public ClassGenExceptionCollection BrokenRules
		{
			get 
			{
				ClassGenExceptionCollection exceptions = new ClassGenExceptionCollection();
				foreach (Contact item in this.ActiveRecords)
				{
					ClassGenExceptionCollection exCollection = item.BrokenRules;
					if (exCollection.Count > 0)
					{
						foreach (ClassGenException ex in exCollection)
						{
							ex.RecordIndex = (this.IndexOf(item)) + 1;
							ex.RecordKey = item.ContactID.ToString();
						}
						exceptions.AddRange(exCollection);
					}
				}

				exceptions.AddRange(_rules.BrokenRules);

				return exceptions;
			}
		}

		/// <summary>
		/// Gets all the records that don't have a deleted status in the collection
		/// </summary>
		/// <returns>A ContactCollection of current records.</returns>
		public ContactCollection GetCurrent()
		{
			return this.ActiveRecords;
		}

		/// <summary>
		/// Checks to see if the element exists in the collection.
		/// </summary>
		/// <param name="contactID">A key field used to find the correct record.</param>
		/// <returns>A boolean indicating whether the element exists in the collection.</returns>
		public bool Exists(long contactID)
		{
			return (this.Exists(new Predicate<Contact>(delegate (Contact obj) 
				{ return obj.ContactID == contactID; })));
		}

		/// <summary>
		/// Removes the element from the collection based on the argument passed.
		/// </summary>
		/// <param name="contactID">A key field used to find the correct record.</param>
		public void Remove(long contactID)
		{
			for (int i = this.Count - 1; i >= 0; i--)
			{
				if (this[i].ContactID == contactID)
				{
					this.RemoveAt(i);
				}
			}
		}
		
		#region Refresh Collection Methods
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		public ClassGenExceptionCollection RefreshCollection(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = true;
				errors.AddRange(this.GetFromDB());
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshCollection()
		{
			return RefreshCollection((int)_refreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (_isLoaded)
			{
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
				errors.AddRange(this.GetFromDB());	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}
		#endregion Refresh Collection Methods
		#endregion Random Methods

		#region DataTable Methods
		/// <summary>
		/// Converts the object to a datatable. 
		/// Does not include deleted records. 
		/// </summary>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable()
		{
			return ToDataTable(false);
		}

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="includeDeleted">Whether to include deleted records in the datatable.</param>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable(bool includeDeleted)
		{
			// Generate the datatable object first
			DataTable dt = this.ToEmptyDataTable();

			// Now, go through and build the data table with actual rows
			int count = 0;
			foreach (Contact item in this)
			{
				if (item.RecordStatus == RecordStatus.Current ||
					item.RecordStatus == RecordStatus.Modified ||
					item.RecordStatus == RecordStatus.New ||
					(item.RecordStatus == RecordStatus.Deleted && includeDeleted))
				{
					dt.Rows.Add(item.ToDataRow(dt));
					this.OnDataTablePopulate(string.Empty, string.Empty, string.Empty, this.Count, count + 1);
				}
				count++;
			}
			
			// Return the data table
			return dt;
		}

		/// <summary>
		/// Creates an empty datatable with the object's structure.
		/// </summary>
		/// <returns>An empty DataTable with the object's structure.</returns>
		public DataTable ToEmptyDataTable()
		{
			// Return the data table
			return EmptyDataTableWithIL<Contact>();
		}

		/// <summary>
		/// Event Handler to deal with populating the information
		/// </summary>
		public delegate void DataTablePopulateEventHandler(object sender, PopulateUpdateDelete_EventArgs e);
		/// <summary>
		/// Occurs when this class populates a DataTable with a row of its data.
		/// </summary>
		public event DataTablePopulateEventHandler DataTablePopulate;
		/// <summary>
		/// Calls the DataTable.Populate event.
		/// </summary>
		/// <param name="name">The name of the record in the DataRow.</param>
		/// <param name="description">A description of the record.</param>
		/// <param name="errors">The names of any exceptions that cropped up.</param>
		/// <param name="totalCount">The total number of rows in the DataTable.</param>
		/// <param name="currentIndex">The current Index the iterator has reached.</param>
		protected void OnDataTablePopulate(string name, string description, string errors, int totalCount, int currentIndex)
		{
			if (DataTablePopulate != null)
			{
				PopulateUpdateDelete_EventArgs e = new PopulateUpdateDelete_EventArgs(name, description, errors, totalCount, currentIndex);
				DataTablePopulate(this, e);
			}
		}
		#endregion DataTable Methods

		#region Static Methods
		/// <summary>
		/// Delete records from the table based on a given criteria.
		/// </summary>
		/// <remarks>
		/// The Where clause cannot be empty.
		/// To delete all the records from the table, use the LEADBaseObject.DeleteAll() method, instead.
		/// </remarks>
		/// <param name="whereClause">The SQL where clause to use on the system.</param>
		/// <param name="errors">A ClassGenExceptionCollection to add any exception reports to.</param>
		/// <returns>The number of records affected by the delete.</returns>
		public static int Delete(string whereClause, ref ClassGenExceptionCollection errors)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			int recsAffected = 0;

			if (String.IsNullOrEmpty(whereClause))
			{
				errors.Add(new ClassGenException("The where clause cannot be empty.  " + 
					"If you want to delete all records in the table, please call " + 
					"the LEADBaseObject.DeleteAll() method.", ClassGenExceptionIconType.Critical));
				return -1;
			}

			try
			{
				sql = "DELETE FROM tContact " +
					"WHERE " + whereClause.Trim();
				cmd = new SqlCommand(sql);
				recsAffected = DAL.SQLExecNonQuery(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return recsAffected;
		}
		#endregion Static Methods

		#region Json.NET Serialization Methods
		/// <summary>
		/// Attempt to serialize the ContactCollection object to the server
		/// </summary>
		/// <param name="obj">The ContactCollection object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(ContactCollection obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the ContactCollection object from the server
		/// </summary>
		/// <param name="obj">The ContactCollection object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A ContactCollection object containing the return from the method</returns>
		public static ContactCollection DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			ContactCollection rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<ContactCollection>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization Methods

		#region DataSet Methods
		/// <summary>
		/// Converts the collection to a Dataset and passes it back.
		/// All records with a deleted status are removed from the collection before being passed back.
		/// </summary>
		/// <returns>The collection converted to a DataSet object.</returns>
		public DataSet ToDataSet()
		{
			return ToDataSet(false);
		}

		/// <summary>
		/// Converts the collection to a Dataset and passes it back.
		/// </summary>
		/// <param name="includeDeleted">False to remove all records marked for deletion before converting.</param>
		/// <returns>The collection converted to a DataSet object.</returns>
		public DataSet ToDataSet(bool includeDeleted)
		{
			// Create the DataSet you're going to send back
			DataSet ds = new DataSet();
			
			// Get the base datatable
			DataTable dt = this.ToDataTable(includeDeleted);
			ds.Tables.Add(dt);
			
			// Now get all the sub objects and link them in
			DataRow newRow = dt.NewRow();
			
			ContactAddressCollection Coll_ContactAddress = new ContactAddressCollection();
			DataTable dtContactAddress = Coll_ContactAddress.ToEmptyDataTable();
			
			ContactLanguageCollection Coll_ContactLanguage = new ContactLanguageCollection();
			DataTable dtContactLanguage = Coll_ContactLanguage.ToEmptyDataTable();
			
			ContactPhoneCollection Coll_ContactPhone = new ContactPhoneCollection();
			DataTable dtContactPhone = Coll_ContactPhone.ToEmptyDataTable();
			
			foreach (Contact item in this)
			{
				// ContactAddress
				dt = item.Coll_ContactAddress.ToDataTable(includeDeleted);
				foreach (DataRow row in dt.Rows)
				{
					newRow = dtContactAddress.NewRow();
					foreach (DataColumn col in dtContactAddress.Columns)
					{
						 newRow[col.ColumnName] = row[col.ColumnName];
					}
					dtContactAddress.Rows.Add(newRow);
				}
				
				// ContactLanguage
				dt = item.Coll_ContactLanguage.ToDataTable(includeDeleted);
				foreach (DataRow row in dt.Rows)
				{
					newRow = dtContactLanguage.NewRow();
					foreach (DataColumn col in dtContactLanguage.Columns)
					{
						 newRow[col.ColumnName] = row[col.ColumnName];
					}
					dtContactLanguage.Rows.Add(newRow);
				}
				
				// ContactPhone
				dt = item.Coll_ContactPhone.ToDataTable(includeDeleted);
				foreach (DataRow row in dt.Rows)
				{
					newRow = dtContactPhone.NewRow();
					foreach (DataColumn col in dtContactPhone.Columns)
					{
						 newRow[col.ColumnName] = row[col.ColumnName];
					}
					dtContactPhone.Rows.Add(newRow);
				}
			}
			
			// Add the datatables to the dataset
			ds.Tables.Add(dtContactAddress);
			ds.Relations.Add("Contact_ContactAddress", ds.Tables[0].Columns["ContactID"], ds.Tables[ds.Tables.Count - 1].Columns["ContactID"]);
			
			ds.Tables.Add(dtContactLanguage);
			ds.Relations.Add("Contact_ContactLanguage", ds.Tables[0].Columns["ContactID"], ds.Tables[ds.Tables.Count - 1].Columns["ContactID"]);
			
			ds.Tables.Add(dtContactPhone);
			ds.Relations.Add("Contact_ContactPhone", ds.Tables[0].Columns["ContactID"], ds.Tables[ds.Tables.Count - 1].Columns["ContactID"]);
			

			// Send back the dataset
			return ds;
		}
		#endregion DataSet Methods

		#region Threaded Get
		private void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			_asyncConnection = DAL.OpenConnection();

			// Create the temp table on the connection
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			sql = 
				"IF object_id('tempdb..#Contact') IS NOT NULL  DROP TABLE #Contact; " + 
					"CREATE TABLE #Contact (iContactID bigint, iItemIndex INT IDENTITY(1,1) PRIMARY KEY CLUSTERED);  " + 
					"INSERT INTO #Contact (iContactID) SELECT iContactID FROM tContact" + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " WHERE " + this.GetCollectionConfig.WhereClause : "") + ";  " + 
					"SELECT COUNT(*) AS iCount FROM #Contact "; 
			cmd = new SqlCommand(sql);
			dt = DAL.SQLExecDataTable(cmd, _asyncConnection);

			int totalCount = int.Parse(dt.Rows[0][0].ToString());		// Get the count of records in the table

			BackgroundWorker worker = sender as BackgroundWorker;
			GetAsync(worker, e, _asyncConnection, totalCount, this.GetCollectionConfig.PageSize);		// Start the work
		}

		private void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
		{
			if (e.UserState != null)
			{
				ContactCollection_GetAsyncObject obj = (ContactCollection_GetAsyncObject)e.UserState;
				this.OnGetThreadedProgress(obj.CurrentIndex, obj.TotalCount, obj.ContactCollection);
			}
		}

		private void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
		{
			DAL.CloseConnection(_asyncConnection);		// Close the connection
			this.OnGetThreadedCompleted();
			this.IsLoaded = true;		// Set the IsLoaded flag
		}

		/// <summary>
		/// The method that actually does the async Get
		/// </summary>
		private void GetAsync(BackgroundWorker worker, 
			DoWorkEventArgs e, 
			SqlConnection oConn, 
			int totalCount,
			int pageSize)
		{
			int currentIndex = 0, pageStart = 0, pageEnd = 0;
			decimal totalMilleseconds = 0;

			DateTime lastGetStart = DateTime.Now;

			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			ContactCollection coll = new ContactCollection();
			Contact item = new Contact();

			if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be

			// Run the method as long as we have records
			while (currentIndex < totalCount)
			{
				sql = string.Empty;  cmd = null;  dt = new DataTable();

				pageStart = currentIndex + 1;
				pageEnd = pageStart - 1 + pageSize;

				sql = "SELECT [C].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tContact [C] " + 
					"INNER JOIN #Contact TEMP ON [C].[iContactID] = [TEMP].[iContactID] " +
					"WHERE TEMP.iItemIndex BETWEEN @piStart AND @piEnd " +
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piStart", SqlDbType.Int).Value = pageStart;
				cmd.Parameters.Add("@piEnd", SqlDbType.Int).Value = pageEnd;
				lastGetStart = DateTime.Now;
				dt = DAL.SQLExecDataTable(cmd, oConn);

				// Populate the local Contact collection
				coll = new ContactCollection();
				foreach (DataRow row in dt.Rows)
				{
					item = new Contact();
					item.Get(row);
					coll.Add(item);
				}

				currentIndex += dt.Rows.Count;		// The current Index count of where we are in the set

				// Report the progress
				ContactCollection_GetAsyncObject obj = new ContactCollection_GetAsyncObject(currentIndex,
					totalCount, 
					coll);
				worker.ReportProgress((int)(currentIndex / totalCount), obj);

				// Reset the page size based on the number of records pulled back
				totalMilleseconds = (decimal)((TimeSpan)DateTime.Now.Subtract(lastGetStart)).TotalMilliseconds;
				if ((totalMilleseconds < 300 ||
					totalMilleseconds > 700) &&
					totalMilleseconds > 0)
				{
					// Redo the math on the page size to get it within 500 milleseconds
					pageSize = ((500 * pageSize) / (int)totalMilleseconds);
				}

				if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be
			}
		}

		// Events to raise as part of population thread
		/// <summary>
		/// The delegate for the GetThreadedProgress event.
		/// </summary>
		public delegate void GetThreadedProgressEventHandler(object sender, Contact_GetCollection_EventArgs e);
		/// <summary>
		/// Occurs when the main thread calls an asynchronous thread to check on its progress getting data from a database.
		/// </summary>
		public event GetThreadedProgressEventHandler GetThreadedProgress;
		/// <summary>
		/// Calls the GetThreadedProgress event.
		/// </summary>
		public void OnGetThreadedProgress(int currentIndex, int totalCount, ContactCollection coll)
		{
			if (GetThreadedProgress != null)
			{
				// Add the items found in the collection to the current set
				foreach (Contact a in coll)
				{
					this.Add(a);		// Add the Contact
				}

				Contact_GetCollection_EventArgs e = new Contact_GetCollection_EventArgs(currentIndex, totalCount, coll);
				GetThreadedProgress(this, e);
			}
		}

		/// <summary>
		/// The delegate for the GetThreadedCompleted event.
		/// </summary>
		public delegate void GetThreadedCompletedEventHandler(object sender, EventArgs e);
		/// <summary>
		/// Occurs when an asynchronous thread finishes getting data from a database.
		/// </summary>
		public event GetThreadedCompletedEventHandler GetThreadedCompleted;
		/// <summary>
		/// Calls the GetThreadedCompleted event.
		/// </summary>
		public void OnGetThreadedCompleted()
		{
			if (GetThreadedCompleted != null)
			{
				EventArgs e = new EventArgs();
				GetThreadedCompleted(this, e);
			}
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(int pageSize, string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		public void GetFromDBThreaded(int pageSize)
		{
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		public void GetFromDBThreaded()
		{
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Stop the Background worker from getting anymore
		/// </summary>
		public void GetFromDBThreadedStop()
		{
			_backgroundWorker.CancelAsync();
		}
		#endregion Threaded Get

		#region IClassGenLogXMLCollection Implementation
		/// <summary>
		/// Get the collection as an XML Stream with all base model properties included.
		/// </summary>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the collection as an XML Stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base model properties.</param>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();
			foreach (Contact item in this)
			{
				sb.Append(item.GetAsXML(includeBaseProperties));
			}

			// Include the header/footer for the stream
			sb.Insert(0, "<ContactCollection>" + Environment.NewLine);
			sb.Append("</ContactCollection>" + Environment.NewLine);

			return sb.ToString();
		}

		/// <summary>
		/// Get the read elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <param name="newElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "new".</param>
		/// <param name="readElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "read".</param>
		/// <param name="changedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "changed".</param>
		/// <param name="deletedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "deleted".</param>
		public void GetXMLChanges(ref List<string> newElements,
			ref List<string> readElements,
			ref List<string> changedElements,
			ref List<string> deletedElements)
		{
			StringBuilder sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);

			// Clear out the collections
			newElements = new List<string>();
			readElements = new List<string>();
			changedElements = new List<string>();
			deletedElements = new List<string>();

			// Go through the records and take care of them
			foreach (Contact item in this)
			{
				switch (item.RecordStatus)
				{
					case RecordStatus.Current:
						// Don't forget the to string
						sbRead.Append("<Contact>" + Environment.NewLine);
						sbRead.Append("\t<ContactID>" + item.ContactID.ToString() + "</ContactID>" + Environment.NewLine);
						sbRead.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbRead.Append("\t<CurrentStatus>" + item.CurrentStatus + "</CurrentStatus>" + Environment.NewLine);
						sbRead.Append("\t<LastName>" + (item.LastName != null ? item.LastName : "NULL") + "</LastName>" + Environment.NewLine);
						sbRead.Append("\t<FirstName>" + (item.FirstName != null ? item.FirstName : "NULL") + "</FirstName>" + Environment.NewLine);
						sbRead.Append("</Contact>" + Environment.NewLine);

						if (sbRead.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging) 
						{ 
							readElements.Add(sbRead.ToString());
							sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader); 
						}
						break;

					case RecordStatus.Deleted:
						sbDeleted.Append("<Contact>" + Environment.NewLine);
						sbDeleted.Append("\t<ContactID>" + item.ContactID.ToString() + "</ContactID>" + Environment.NewLine);
						sbDeleted.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbDeleted.Append("\t<CurrentStatus>" + item.CurrentStatus + "</CurrentStatus>" + Environment.NewLine);
						sbDeleted.Append("\t<LastName>" + (item.LastName != null ? item.LastName : "NULL") + "</LastName>" + Environment.NewLine);
						sbDeleted.Append("\t<FirstName>" + (item.FirstName != null ? item.FirstName : "NULL") + "</FirstName>" + Environment.NewLine);
						sbDeleted.Append("</Contact>" + Environment.NewLine);

						if (sbDeleted.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							deletedElements.Add(sbDeleted.ToString());
							sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.New:
						sbNew.Append("<Contact>" + Environment.NewLine);
						sbNew.Append("\t<ContactID>" + item.ContactID.ToString() + "</ContactID>" + Environment.NewLine);
						sbNew.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbNew.Append("\t<CurrentStatus>" + item.CurrentStatus + "</CurrentStatus>" + Environment.NewLine);
						sbNew.Append("\t<LastName>" + (item.LastName != null ? item.LastName : "NULL") + "</LastName>" + Environment.NewLine);
						sbNew.Append("\t<FirstName>" + (item.FirstName != null ? item.FirstName : "NULL") + "</FirstName>" + Environment.NewLine);
						sbNew.Append("</Contact>" + Environment.NewLine);

						if (sbNew.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							newElements.Add(sbNew.ToString());
							sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.Modified:
						sbChanged.Append(item.GetChangedElementsAsXML() + Environment.NewLine);

						if (sbChanged.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							changedElements.Add(sbChanged.ToString());
							sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

				}
			}

			// Add the final strings to the list
			newElements.Add(sbNew.ToString());
			readElements.Add(sbRead.ToString());
			deletedElements.Add(sbDeleted.ToString());
			changedElements.Add(sbChanged.ToString());
		}

		/// <summary>
		/// Load the XML into a collection based on what's passed in.
		/// </summary>
		/// <param name="xml">The XML to process.</param>
		/// <returns>The completed ContactCollection object.</returns>
		public static ContactCollection LoadFromXML(string xml)
		{
			ContactCollection coll = new ContactCollection();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.LoadXml(xml);
			// <ContactCollection>
			foreach (System.Xml.XmlNode nodeMain in doc.ChildNodes)
			{
				// <Contact>
				foreach (System.Xml.XmlNode node in nodeMain.ChildNodes)
				{
					// These are the elements <DetailGUID>, <UserName>, etc.
					Contact item = Contact.LoadFromXML(node.OuterXml);
					if (item != null) { coll.Add(item); }
				}
			}
			return coll;
		}
		#endregion IClassGenLogXMLCollection Implementation
		
		#region Mathematical Functions

		/// <summary>
		/// The earliest DateDOB present in the collection.
		/// </summary>
		public DateTime? MinOfDateDOB
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateDOB; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateDOB < rtv) { rtv = item.DateDOB; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateDOB present in the collection.
		/// </summary>
		public DateTime? MaxOfDateDOB
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateDOB; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateDOB > rtv) { rtv = item.DateDOB; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateDLExpires present in the collection.
		/// </summary>
		public DateTime? MinOfDateDLExpires
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateDLExpires; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateDLExpires < rtv) { rtv = item.DateDLExpires; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateDLExpires present in the collection.
		/// </summary>
		public DateTime? MaxOfDateDLExpires
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateDLExpires; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateDLExpires > rtv) { rtv = item.DateDLExpires; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The number of records that have a Height value.
		/// </summary>
		public decimal CountOfHeight
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average Height.
		/// </summary>
		public decimal AvgOfHeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Height", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's Height.
		/// </summary>
		public decimal SumOfHeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Height", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest Height present in the collection.
		/// </summary>
		public decimal MinOfHeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Height", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest Height present in the collection.
		/// </summary>
		public decimal MaxOfHeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Height", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a Weight value.
		/// </summary>
		public decimal CountOfWeight
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average Weight.
		/// </summary>
		public decimal AvgOfWeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Weight", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's Weight.
		/// </summary>
		public decimal SumOfWeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Weight", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest Weight present in the collection.
		/// </summary>
		public decimal MinOfWeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Weight", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest Weight present in the collection.
		/// </summary>
		public decimal MaxOfWeight
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Weight", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The earliest DateAdded present in the collection.
		/// </summary>
		public DateTime? MinOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateAdded < rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateAdded present in the collection.
		/// </summary>
		public DateTime? MaxOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateAdded > rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MinOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateUpdated < rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MaxOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (Contact item in this)
				{
					if (item.DateUpdated > rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		#endregion Mathematical Functions

		#region Collection Disposal
		/// <summary>
		/// Implement IDisposable.
		/// Do not make this method virtual.
		/// A derived class should not be able to override this method.
		/// </summary>
		public void Dispose()
		{
			if (!this.IsDisposable) { return; }

			Dispose(true);

			// Take yourself off the Finalization queue 
			// to prevent finalization code for this object
			// from executing a second time.
			GC.SuppressFinalize(this);
		}

		/// <summary>
		/// Dispose(bool disposing) executes in two distinct scenarios.
		/// If disposing equals true, the method has been called directly
		/// or indirectly by a user's code. Managed and unmanaged resources
		/// can be disposed.
		/// If disposing equals false, the method has been called by the 
		/// runtime from inside the finalizer and you should not reference 
		/// other objects. Only unmanaged resources can be disposed.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (!this.IsDisposable) { return; }

			// Check to see if Dispose has already been called.
			if (!this._disposed)
			{
				// Set the disposed on this object to true
				this._disposed = true;

				// If disposing equals true, dispose all managed 
				// and unmanaged resources.
				if (disposing)
				{
					// Dispose managed resources.
					if (_backgroundWorker != null) { _backgroundWorker.Dispose(); _backgroundWorker = null; } 
					GetCollectionConfig = null;
					if (_rules != null) { _rules.Clear(); _rules = null; }
					if (_asyncConnection != null) { _asyncConnection.Dispose(); _asyncConnection = null; }

					// Go through and properly dispose of each object
					foreach (Contact item in this)
					{
						if (item.IsDisposable) { item.Dispose(); }
					}

					// Deal with the keyed collections
					KeyedCollection = new Dictionary<long, Contact>();

					FKKeyedCollection = new Dictionary<string, Dictionary<object, List<Contact>>>();

					// Clear out the collection
					this.Clear();
				}
				// Release unmanaged resources. If disposing is false, 
				// only the following code is executed.
				// <Enter Disposal here> 
				// Note that this is not thread safe.
				// Another thread could start disposing the object
				// after the managed resources are disposed,
				// but before the disposed flag is set to true.
				// If thread safety is necessary, it must be
				// implemented by the client.
			}
		}

		/// <summary>
		/// Use C# destructor syntax for finalization code.
		/// This destructor will run only if the Dispose method 
		/// does not get called.
		/// It gives your base class the opportunity to finalize.
		/// Do not provide destructors in types derived from this class.
		/// </summary>
		~ContactCollection()
		{
			if (!this.IsDisposable) { return; }

			// Do not re-create Dispose clean-up code here.
			// Calling Dispose(false) is optimal in terms of
			// readability and maintainability.
			Dispose(false);
		}
		#endregion Collection Disposal
	}
	#endregion Contact Collection

	#region Event Handler for Async Object
	/// <summary>
	/// Custom class for Contact event args such as population
	/// </summary>
	[Serializable]
	public class Contact_GetCollection_EventArgs : EventArgs
	{
		private int _totalCount = 0;
		private int _currentIndex = 0;
		private ContactCollection _coll = new ContactCollection();

		/// <summary>
		/// Creates a new Contact_GetCollection_EventArgs with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record being populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public Contact_GetCollection_EventArgs(int currentIndex, int totalCount, ContactCollection coll)
		{
			_totalCount = totalCount;
			_currentIndex = currentIndex;
			_coll = coll;
		}

		/// <summary>
		/// Creates a new empty Contact_GetCollection_EventArgs.
		/// </summary>
		public Contact_GetCollection_EventArgs()
		{
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public ContactCollection ContactCollection
		{
			get { return _coll; }
		}
	}
	#endregion Event Handler for Async Object

	#region Async Object for the Threaded Get
	/// <summary>
	/// An object to populate a ContactCollection asynchronously.
	/// </summary>
	public class ContactCollection_GetAsyncObject
	{
		private int _currentIndex = 0;
		private int _totalCount = 0;
		private ContactCollection _coll = new ContactCollection();

		/// <summary>
		/// Creates a new Contact_GetAsyncObject with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record to be populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public ContactCollection_GetAsyncObject(int currentIndex, int totalCount, ContactCollection coll)
		{
			_currentIndex = currentIndex;
			_totalCount = totalCount;
			_coll = coll;
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public ContactCollection ContactCollection
		{
			get { return _coll; }
		}
	}
	#endregion Async Object for the Threaded Get

}

