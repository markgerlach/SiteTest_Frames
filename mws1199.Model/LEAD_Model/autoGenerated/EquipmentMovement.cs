using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using System.Text;

using LEADBase;

namespace LEAD
{
	/// <summary>
	/// Class Name: EquipmentMovement
	/// Generated by GenClasses v.4.0.0 on 07/28/2017 05:18 AM
	/// </summary>
	#region EquipmentMovement Class
	[Serializable]
	public partial class EquipmentMovement : LEAD_BaseObject, 
		IClassGenLogXML, IClassGenCopyWithNewID, IClassGenPropertyChanging, INotifyPropertyChanging
	{
		#region Private Properties
		private long _movementID = 0;
		private long _agencyID = 0;
		private long _equipID = 0;
		private string _shortDesc = null;
		private string _fullDesc = null;
		private long? _oldContactID = null;
		private string _oldLocation = null;
		private string _oldTeamName = null;
		private string _oldBureau = null;
		private string _oldDivision = null;
		private long? _newContactID = null;
		private string _newLocation = null;
		private string _newTeamName = null;
		private string _newBureau = null;
		private string _newDivision = null;
		private DateTime _dtMoveEffected = DateTime.MinValue;
		private decimal? _mileage = null;
		private int? _roundCount = null;
		private long? _batchTransferID = null;
		private long? _batchForContactID = null;
		private string _pinNumEntered = null;
		private bool _inactive = false;
		private DateTime _dtAdded = DateTime.Now;
		private string _addedByUser = null;
		private DateTime _dtUpdated = DateTime.Now;
		private string _updatedByUser = null;
		private byte[] _rowversion = null;

		private EquipmentMovement _originalValues = null;

		private bool _disposed = false;

		// Parent Items
		private Equipment _equipmentItem = null;
		#endregion Private Properties

		#region Constructors

		/// <summary>
		/// Creates a new EquipmentMovement.
		/// </summary>
		public EquipmentMovement()
		{
			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}

		/// <summary>
		/// Builds a EquipmentMovementbased on a certain record from the database.
		/// </summary>
		/// <param name="movementID">A primary key used to select the record.</param>
		public EquipmentMovement(long movementID)
		{
			this.Get(movementID);

			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}
		#endregion Constructors

		#region Disposal
		/// <summary>
		/// Override of the disposal method
		/// </summary>
		/// <param name="disposing">True if the object is being disposed, otherwise false</param>
		protected override void Dispose(bool disposing)
		{
			if (!this._isDisposable) { return; }

			if (!this._disposed)
			{
				try
				{
					// Set the disposed on this object to true
					this._disposed = true;

					if (disposing)
					{
						// Release the managed resources you added in
						// this derived class here.

						// Dispose of the original values object
						if (_originalValues != null && _originalValues.IsDisposable) { _originalValues.Dispose(); _originalValues = null; }

						// Dispose of the Parent Items
						if (EquipmentItem != null && EquipmentItem.IsDisposable) { EquipmentItem.Dispose(); EquipmentItem = null; }
					}

					// Release the native unmanaged resources you added
					// in this derived class here.
					// <No Unmanaged Resources in this block>
				}
				finally
				{
					// Call Dispose on your base class.
					if (this.IsDisposable) { base.Dispose(disposing); }
				}
			}
		}
		#endregion Disposal
		
		#region Public Properties
		/// <summary>
		/// Property generated from the iMovementID field.
		/// </summary>
		public long MovementID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _movementID;
			}
			set 
			{
				if (_movementID != value)
				{
					bool cancelled = NotifyPropertyChanging("MovementID", _movementID, value);
					if (!cancelled)
					{
						_movementID = value;
						SetModifiedStatus("MovementID");
						NotifyPropertyChanged("MovementID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iAgencyID field.
		/// </summary>
		public long AgencyID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _agencyID;
			}
			set 
			{
				if (_agencyID != value)
				{
					bool cancelled = NotifyPropertyChanging("AgencyID", _agencyID, value);
					if (!cancelled)
					{
						_agencyID = value;
						SetModifiedStatus("AgencyID");
						NotifyPropertyChanged("AgencyID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iEquipID field.
		/// </summary>
		public long EquipID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _equipID;
			}
			set 
			{
				if (_equipID != value)
				{
					bool cancelled = NotifyPropertyChanging("EquipID", _equipID, value);
					if (!cancelled)
					{
						_equipID = value;
						SetModifiedStatus("EquipID");
						NotifyPropertyChanged("EquipID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sShortDesc field.
		/// </summary>
		public string ShortDesc
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _shortDesc;
			}
			set 
			{
				if (_shortDesc != value)
				{
					bool cancelled = NotifyPropertyChanging("ShortDesc", _shortDesc, value);
					if (!cancelled)
					{
						_shortDesc = value;
						SetModifiedStatus("ShortDesc");
						NotifyPropertyChanged("ShortDesc", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sFullDesc field.
		/// </summary>
		public string FullDesc
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _fullDesc;
			}
			set 
			{
				if (_fullDesc != value)
				{
					bool cancelled = NotifyPropertyChanging("FullDesc", _fullDesc, value);
					if (!cancelled)
					{
						_fullDesc = value;
						SetModifiedStatus("FullDesc");
						NotifyPropertyChanged("FullDesc", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iOldContactID field.
		/// </summary>
		public long? OldContactID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _oldContactID;
			}
			set 
			{
				if (_oldContactID != value)
				{
					bool cancelled = NotifyPropertyChanging("OldContactID", _oldContactID, value);
					if (!cancelled)
					{
						_oldContactID = value;
						SetModifiedStatus("OldContactID");
						NotifyPropertyChanged("OldContactID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sOldLocation field.
		/// </summary>
		public string OldLocation
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _oldLocation;
			}
			set 
			{
				if (_oldLocation != value)
				{
					bool cancelled = NotifyPropertyChanging("OldLocation", _oldLocation, value);
					if (!cancelled)
					{
						_oldLocation = value;
						SetModifiedStatus("OldLocation");
						NotifyPropertyChanged("OldLocation", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sOldTeamName field.
		/// </summary>
		public string OldTeamName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _oldTeamName;
			}
			set 
			{
				if (_oldTeamName != value)
				{
					bool cancelled = NotifyPropertyChanging("OldTeamName", _oldTeamName, value);
					if (!cancelled)
					{
						_oldTeamName = value;
						SetModifiedStatus("OldTeamName");
						NotifyPropertyChanged("OldTeamName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sOldBureau field.
		/// </summary>
		public string OldBureau
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _oldBureau;
			}
			set 
			{
				if (_oldBureau != value)
				{
					bool cancelled = NotifyPropertyChanging("OldBureau", _oldBureau, value);
					if (!cancelled)
					{
						_oldBureau = value;
						SetModifiedStatus("OldBureau");
						NotifyPropertyChanged("OldBureau", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sOldDivision field.
		/// </summary>
		public string OldDivision
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _oldDivision;
			}
			set 
			{
				if (_oldDivision != value)
				{
					bool cancelled = NotifyPropertyChanging("OldDivision", _oldDivision, value);
					if (!cancelled)
					{
						_oldDivision = value;
						SetModifiedStatus("OldDivision");
						NotifyPropertyChanged("OldDivision", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iNewContactID field.
		/// </summary>
		public long? NewContactID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _newContactID;
			}
			set 
			{
				if (_newContactID != value)
				{
					bool cancelled = NotifyPropertyChanging("NewContactID", _newContactID, value);
					if (!cancelled)
					{
						_newContactID = value;
						SetModifiedStatus("NewContactID");
						NotifyPropertyChanged("NewContactID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sNewLocation field.
		/// </summary>
		public string NewLocation
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _newLocation;
			}
			set 
			{
				if (_newLocation != value)
				{
					bool cancelled = NotifyPropertyChanging("NewLocation", _newLocation, value);
					if (!cancelled)
					{
						_newLocation = value;
						SetModifiedStatus("NewLocation");
						NotifyPropertyChanged("NewLocation", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sNewTeamName field.
		/// </summary>
		public string NewTeamName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _newTeamName;
			}
			set 
			{
				if (_newTeamName != value)
				{
					bool cancelled = NotifyPropertyChanging("NewTeamName", _newTeamName, value);
					if (!cancelled)
					{
						_newTeamName = value;
						SetModifiedStatus("NewTeamName");
						NotifyPropertyChanged("NewTeamName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sNewBureau field.
		/// </summary>
		public string NewBureau
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _newBureau;
			}
			set 
			{
				if (_newBureau != value)
				{
					bool cancelled = NotifyPropertyChanging("NewBureau", _newBureau, value);
					if (!cancelled)
					{
						_newBureau = value;
						SetModifiedStatus("NewBureau");
						NotifyPropertyChanged("NewBureau", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sNewDivision field.
		/// </summary>
		public string NewDivision
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _newDivision;
			}
			set 
			{
				if (_newDivision != value)
				{
					bool cancelled = NotifyPropertyChanging("NewDivision", _newDivision, value);
					if (!cancelled)
					{
						_newDivision = value;
						SetModifiedStatus("NewDivision");
						NotifyPropertyChanged("NewDivision", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtMoveEffected field.
		/// </summary>
		public DateTime DateMoveEffected
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtMoveEffected;
			}
			set 
			{
				if (_dtMoveEffected != value)
				{
					bool cancelled = NotifyPropertyChanging("DateMoveEffected", _dtMoveEffected, value);
					if (!cancelled)
					{
						_dtMoveEffected = value;
						SetModifiedStatus("DateMoveEffected");
						NotifyPropertyChanged("DateMoveEffected", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dblMileage field.
		/// </summary>
		public decimal? Mileage
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _mileage;
			}
			set 
			{
				if (_mileage != value)
				{
					bool cancelled = NotifyPropertyChanging("Mileage", _mileage, value);
					if (!cancelled)
					{
						_mileage = value;
						SetModifiedStatus("Mileage");
						NotifyPropertyChanged("Mileage", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Mileage rendered as a string.
		/// </summary>
		public string MileageAsString
		{
			get { return _mileage.ToString(); }
		}

		/// <summary>
		/// Property generated from the iRoundCount field.
		/// </summary>
		public int? RoundCount
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _roundCount;
			}
			set 
			{
				if (_roundCount != value)
				{
					bool cancelled = NotifyPropertyChanging("RoundCount", _roundCount, value);
					if (!cancelled)
					{
						_roundCount = value;
						SetModifiedStatus("RoundCount");
						NotifyPropertyChanged("RoundCount", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of RoundCount rendered as a string.
		/// </summary>
		public string RoundCountAsString
		{
			get { return _roundCount.ToString(); }
		}

		/// <summary>
		/// Property generated from the iBatchTransferID field.
		/// </summary>
		public long? BatchTransferID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _batchTransferID;
			}
			set 
			{
				if (_batchTransferID != value)
				{
					bool cancelled = NotifyPropertyChanging("BatchTransferID", _batchTransferID, value);
					if (!cancelled)
					{
						_batchTransferID = value;
						SetModifiedStatus("BatchTransferID");
						NotifyPropertyChanged("BatchTransferID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iBatchForContactID field.
		/// </summary>
		public long? BatchForContactID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _batchForContactID;
			}
			set 
			{
				if (_batchForContactID != value)
				{
					bool cancelled = NotifyPropertyChanging("BatchForContactID", _batchForContactID, value);
					if (!cancelled)
					{
						_batchForContactID = value;
						SetModifiedStatus("BatchForContactID");
						NotifyPropertyChanged("BatchForContactID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sPinNumEntered field.
		/// </summary>
		public string PinNumEntered
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _pinNumEntered;
			}
			set 
			{
				if (_pinNumEntered != value)
				{
					bool cancelled = NotifyPropertyChanging("PinNumEntered", _pinNumEntered, value);
					if (!cancelled)
					{
						_pinNumEntered = value;
						SetModifiedStatus("PinNumEntered");
						NotifyPropertyChanged("PinNumEntered", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bInactive field.
		/// </summary>
		public bool Inactive
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _inactive;
			}
			set 
			{
				if (_inactive != value)
				{
					bool cancelled = NotifyPropertyChanging("Inactive", _inactive, value);
					if (!cancelled)
					{
						_inactive = value;
						SetModifiedStatus("Inactive");
						NotifyPropertyChanged("Inactive", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Inactive rendered as a string.
		/// </summary>
		public string InactiveAsString
		{
			get { return _inactive.ToString(); }
		}

		/// <summary>
		/// Property generated from the dtAdded field.
		/// </summary>
		public DateTime DateAdded
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtAdded;
			}
			set 
			{
				if (_dtAdded != value)
				{
					bool cancelled = NotifyPropertyChanging("DateAdded", _dtAdded, value);
					if (!cancelled)
					{
						_dtAdded = value;
						SetModifiedStatus("DateAdded");
						NotifyPropertyChanged("DateAdded", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sAddedByUser field.
		/// </summary>
		public string AddedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _addedByUser;
			}
			set 
			{
				if (_addedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("AddedByUser", _addedByUser, value);
					if (!cancelled)
					{
						_addedByUser = value;
						SetModifiedStatus("AddedByUser");
						NotifyPropertyChanged("AddedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtUpdated field.
		/// </summary>
		public DateTime DateUpdated
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtUpdated;
			}
			set 
			{
				if (_dtUpdated != value)
				{
					bool cancelled = NotifyPropertyChanging("DateUpdated", _dtUpdated, value);
					if (!cancelled)
					{
						_dtUpdated = value;
						SetModifiedStatus("DateUpdated");
						NotifyPropertyChanged("DateUpdated", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sUpdatedByUser field.
		/// </summary>
		public string UpdatedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _updatedByUser;
			}
			set 
			{
				if (_updatedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("UpdatedByUser", _updatedByUser, value);
					if (!cancelled)
					{
						_updatedByUser = value;
						SetModifiedStatus("UpdatedByUser");
						NotifyPropertyChanged("UpdatedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bRowversion field.
		/// </summary>
		public byte[] Rowversion
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _rowversion;
			}
			set 
			{
				if (_rowversion != value)
				{
					bool cancelled = NotifyPropertyChanging("Rowversion", _rowversion, value);
					if (!cancelled)
					{
						_rowversion = value;
						SetModifiedStatus("Rowversion");
						NotifyPropertyChanged("Rowversion", value);
					}
				}
			}
		}
		/// <summary>
		/// The parent Equipment object.
		/// </summary>

		// Parent Variables
		public Equipment EquipmentItem
		{
			get { return _equipmentItem; }
			set { _equipmentItem = value; }
		}

		/// <summary>
		/// A EquipmentMovement with all of this object's original values.
		/// </summary>
		[Newtonsoft.Json.JsonIgnore]
		public EquipmentMovement OriginalValues
		{
			get { return _originalValues; }
			set { _originalValues = value; }
		}

		#region Parent Class Variables

		/// <summary>
		/// The parent object's AgencyID property.
		/// </summary>
		public long Equipment_AgencyID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.AgencyID;
			}
		}
		/// <summary>
		/// The parent object's Type property.
		/// </summary>
		public string Equipment_Type
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Type;
			}
		}
		/// <summary>
		/// The parent object's Item property.
		/// </summary>
		public string Equipment_Item
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Item;
			}
		}
		/// <summary>
		/// The parent object's Year property.
		/// </summary>
		public int? Equipment_Year
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Year;
			}
		}

		/// <summary>
		/// The parent object's Year property, rendered as a string.
		/// </summary>
		public string Equipment_YearAsString
		{
			get { return Equipment_Year.ToString(); }
		}
		/// <summary>
		/// The parent object's Make property.
		/// </summary>
		public string Equipment_Make
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Make;
			}
		}
		/// <summary>
		/// The parent object's Model property.
		/// </summary>
		public string Equipment_Model
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Model;
			}
		}
		/// <summary>
		/// The parent object's ParentEquipID property.
		/// </summary>
		public long? Equipment_ParentEquipID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.ParentEquipID;
			}
		}
		/// <summary>
		/// The parent object's Color property.
		/// </summary>
		public string Equipment_Color
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Color;
			}
		}
		/// <summary>
		/// The parent object's NumDoors property.
		/// </summary>
		public int? Equipment_NumDoors
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.NumDoors;
			}
		}

		/// <summary>
		/// The parent object's NumDoors property, rendered as a string.
		/// </summary>
		public string Equipment_NumDoorsAsString
		{
			get { return Equipment_NumDoors.ToString(); }
		}
		/// <summary>
		/// The parent object's Is4x4 property.
		/// </summary>
		public bool Equipment_Is4x4
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Is4x4;
			}
		}

		/// <summary>
		/// The parent object's Is4x4 property, rendered as a string.
		/// </summary>
		public string Equipment_Is4x4AsString
		{
			get { return Equipment_Is4x4.ToString(); }
		}
		/// <summary>
		/// The parent object's LightingSystem property.
		/// </summary>
		public string Equipment_LightingSystem
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.LightingSystem;
			}
		}
		/// <summary>
		/// The parent object's DepartmentRadio property.
		/// </summary>
		public string Equipment_DepartmentRadio
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.DepartmentRadio;
			}
		}
		/// <summary>
		/// The parent object's NumSpotLights property.
		/// </summary>
		public int? Equipment_NumSpotLights
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.NumSpotLights;
			}
		}

		/// <summary>
		/// The parent object's NumSpotLights property, rendered as a string.
		/// </summary>
		public string Equipment_NumSpotLightsAsString
		{
			get { return Equipment_NumSpotLights.ToString(); }
		}
		/// <summary>
		/// The parent object's MarkedVehicle property.
		/// </summary>
		public bool Equipment_MarkedVehicle
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.MarkedVehicle;
			}
		}

		/// <summary>
		/// The parent object's MarkedVehicle property, rendered as a string.
		/// </summary>
		public string Equipment_MarkedVehicleAsString
		{
			get { return Equipment_MarkedVehicle.ToString(); }
		}
		/// <summary>
		/// The parent object's Motorcycle property.
		/// </summary>
		public bool Equipment_Motorcycle
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Motorcycle;
			}
		}

		/// <summary>
		/// The parent object's Motorcycle property, rendered as a string.
		/// </summary>
		public string Equipment_MotorcycleAsString
		{
			get { return Equipment_Motorcycle.ToString(); }
		}
		/// <summary>
		/// The parent object's SpecialtyVehicle property.
		/// </summary>
		public bool Equipment_SpecialtyVehicle
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.SpecialtyVehicle;
			}
		}

		/// <summary>
		/// The parent object's SpecialtyVehicle property, rendered as a string.
		/// </summary>
		public string Equipment_SpecialtyVehicleAsString
		{
			get { return Equipment_SpecialtyVehicle.ToString(); }
		}
		/// <summary>
		/// The parent object's VehicleID property.
		/// </summary>
		public string Equipment_VehicleID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.VehicleID;
			}
		}
		/// <summary>
		/// The parent object's ComputerEquipID property.
		/// </summary>
		public long? Equipment_ComputerEquipID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.ComputerEquipID;
			}
		}
		/// <summary>
		/// The parent object's SerialNum property.
		/// </summary>
		public string Equipment_SerialNum
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.SerialNum;
			}
		}
		/// <summary>
		/// The parent object's LicenseNum property.
		/// </summary>
		public string Equipment_LicenseNum
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.LicenseNum;
			}
		}
		/// <summary>
		/// The parent object's Mileage property.
		/// </summary>
		public int? Equipment_Mileage
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Mileage;
			}
		}

		/// <summary>
		/// The parent object's Mileage property, rendered as a string.
		/// </summary>
		public string Equipment_MileageAsString
		{
			get { return Equipment_Mileage.ToString(); }
		}
		/// <summary>
		/// The parent object's RoundCount property.
		/// </summary>
		public int? Equipment_RoundCount
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.RoundCount;
			}
		}

		/// <summary>
		/// The parent object's RoundCount property, rendered as a string.
		/// </summary>
		public string Equipment_RoundCountAsString
		{
			get { return Equipment_RoundCount.ToString(); }
		}
		/// <summary>
		/// The parent object's PartNum property.
		/// </summary>
		public string Equipment_PartNum
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.PartNum;
			}
		}
		/// <summary>
		/// The parent object's Category property.
		/// </summary>
		public string Equipment_Category
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Category;
			}
		}
		/// <summary>
		/// The parent object's OtherID property.
		/// </summary>
		public string Equipment_OtherID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.OtherID;
			}
		}
		/// <summary>
		/// The parent object's Status property.
		/// </summary>
		public string Equipment_Status
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Status;
			}
		}
		/// <summary>
		/// The parent object's DateStatus property.
		/// </summary>
		public DateTime? Equipment_DateStatus
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.DateStatus;
			}
		}
		/// <summary>
		/// The parent object's ContactID property.
		/// </summary>
		public long? Equipment_ContactID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.ContactID;
			}
		}
		/// <summary>
		/// The parent object's Location property.
		/// </summary>
		public string Equipment_Location
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Location;
			}
		}
		/// <summary>
		/// The parent object's TeamID property.
		/// </summary>
		public long? Equipment_TeamID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.TeamID;
			}
		}
		/// <summary>
		/// The parent object's TeamName property.
		/// </summary>
		public string Equipment_TeamName
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.TeamName;
			}
		}
		/// <summary>
		/// The parent object's Bureau property.
		/// </summary>
		public string Equipment_Bureau
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Bureau;
			}
		}
		/// <summary>
		/// The parent object's Division property.
		/// </summary>
		public string Equipment_Division
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Division;
			}
		}
		/// <summary>
		/// The parent object's Funding property.
		/// </summary>
		public string Equipment_Funding
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Funding;
			}
		}
		/// <summary>
		/// The parent object's Description property.
		/// </summary>
		public string Equipment_Description
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Description;
			}
		}
		/// <summary>
		/// The parent object's Comments property.
		/// </summary>
		public string Equipment_Comments
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Comments;
			}
		}
		/// <summary>
		/// The parent object's VendorContactID property.
		/// </summary>
		public long? Equipment_VendorContactID
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.VendorContactID;
			}
		}
		/// <summary>
		/// The parent object's VendorPartNumber property.
		/// </summary>
		public string Equipment_VendorPartNumber
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.VendorPartNumber;
			}
		}
		/// <summary>
		/// The parent object's PurchasePrice property.
		/// </summary>
		public decimal Equipment_PurchasePrice
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.PurchasePrice;
			}
		}

		/// <summary>
		/// The parent object's PurchasePrice property, rendered as a string.
		/// </summary>
		public string Equipment_PurchasePriceAsString
		{
			get { return Equipment_PurchasePrice.ToString(); }
		}
		/// <summary>
		/// The parent object's Tax property.
		/// </summary>
		public decimal Equipment_Tax
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Tax;
			}
		}

		/// <summary>
		/// The parent object's Tax property, rendered as a string.
		/// </summary>
		public string Equipment_TaxAsString
		{
			get { return Equipment_Tax.ToString(); }
		}
		/// <summary>
		/// The parent object's SH property.
		/// </summary>
		public decimal Equipment_SH
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.SH;
			}
		}

		/// <summary>
		/// The parent object's SH property, rendered as a string.
		/// </summary>
		public string Equipment_SHAsString
		{
			get { return Equipment_SH.ToString(); }
		}
		/// <summary>
		/// The parent object's DatePurchase property.
		/// </summary>
		public DateTime? Equipment_DatePurchase
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.DatePurchase;
			}
		}
		/// <summary>
		/// The parent object's Warranty property.
		/// </summary>
		public string Equipment_Warranty
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Warranty;
			}
		}
		/// <summary>
		/// The parent object's DateReplacement property.
		/// </summary>
		public DateTime? Equipment_DateReplacement
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.DateReplacement;
			}
		}
		/// <summary>
		/// The parent object's VIN property.
		/// </summary>
		public string Equipment_VIN
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.VIN;
			}
		}
		/// <summary>
		/// The parent object's Inactive property.
		/// </summary>
		public bool Equipment_Inactive
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Inactive;
			}
		}

		/// <summary>
		/// The parent object's Inactive property, rendered as a string.
		/// </summary>
		public string Equipment_InactiveAsString
		{
			get { return Equipment_Inactive.ToString(); }
		}
		/// <summary>
		/// The parent object's DateAdded property.
		/// </summary>
		public DateTime Equipment_DateAdded
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.DateAdded;
			}
		}
		/// <summary>
		/// The parent object's AddedByUser property.
		/// </summary>
		public string Equipment_AddedByUser
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.AddedByUser;
			}
		}
		/// <summary>
		/// The parent object's DateUpdated property.
		/// </summary>
		public DateTime Equipment_DateUpdated
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.DateUpdated;
			}
		}
		/// <summary>
		/// The parent object's UpdatedByUser property.
		/// </summary>
		public string Equipment_UpdatedByUser
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.UpdatedByUser;
			}
		}
		/// <summary>
		/// The parent object's Rowversion property.
		/// </summary>
		public byte[] Equipment_Rowversion
		{
			get 
			{
				if (EquipmentItem == null) { EquipmentItem = new Equipment(); }
				if (!EquipmentItem.IsLoaded &&
					!String.IsNullOrEmpty(_equipID.ToString())) { EquipmentItem.Get(_equipID); }
				return EquipmentItem.Rowversion;
			}
		}
		#endregion Parent Class Variables

		#endregion Public Properties

		#region Public Methods
		/// <summary>
		/// Set the Base Rules on the class.
		/// </summary>
		public void SetBaseRules()
		{
			// Property Required Rules
			this.Rules.Add(new PropertyRequiredCustomRule("MovementID", "The \"Movement ID\" field is required in the EquipmentMovement record.", RecordStatus.Modified));
			this.Rules.Add(new PropertyRequiredCustomRule("AgencyID", "The \"Agency ID\" field is required in the EquipmentMovement record."));
			this.Rules.Add(new PropertyRequiredCustomRule("EquipID", "The \"Equip ID\" field is required in the EquipmentMovement record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateMoveEffected", "The \"Date Move Effected\" field is required in the EquipmentMovement record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Inactive", "The \"Inactive\" field is required in the EquipmentMovement record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateAdded", "The \"Date Added\" field is required in the EquipmentMovement record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateUpdated", "The \"Date Updated\" field is required in the EquipmentMovement record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Rowversion", "The \"Rowversion\" field is required in the EquipmentMovement record.", RecordStatus.Modified));

			// Max Length Rules
			this.Rules.Add(new MaxLengthCustomRule("ShortDesc", 400, "The maximum length for the \"ShortDesc\" field is 400 characters."));
			this.Rules.Add(new MaxLengthCustomRule("FullDesc", 3000, "The maximum length for the \"FullDesc\" field is 3000 characters."));
			this.Rules.Add(new MaxLengthCustomRule("OldLocation", 50, "The maximum length for the \"OldLocation\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("OldTeamName", 200, "The maximum length for the \"OldTeamName\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("OldBureau", 100, "The maximum length for the \"OldBureau\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("OldDivision", 200, "The maximum length for the \"OldDivision\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("NewLocation", 50, "The maximum length for the \"NewLocation\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("NewTeamName", 200, "The maximum length for the \"NewTeamName\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("NewBureau", 100, "The maximum length for the \"NewBureau\" field is 100 characters."));
			this.Rules.Add(new MaxLengthCustomRule("NewDivision", 200, "The maximum length for the \"NewDivision\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("PinNumEntered", 10, "The maximum length for the \"PinNumEntered\" field is 10 characters."));
			this.Rules.Add(new MaxLengthCustomRule("AddedByUser", 50, "The maximum length for the \"AddedByUser\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("UpdatedByUser", 50, "The maximum length for the \"UpdatedByUser\" field is 50 characters."));

			// Date Range Rules
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateMoveEffected", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateMoveEffected\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateMoveEffected", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateMoveEffected\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateAdded", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateAdded\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateAdded", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateAdded\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateUpdated\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateUpdated\" field."));
		}

		/// <summary>
		/// Clone the object as a new instance and pass it back.
		/// </summary>
		/// <returns>A copy of the object.</returns>
		public EquipmentMovement Clone()
		{
			EquipmentMovement item = base.CloneObjectWithIL<EquipmentMovement>(this);
			item.OriginalValues = this.OriginalValues;

			return item;
		}

		/// <summary>
		/// Copy the object - then change the ID field to a new value.
		/// </summary>
		/// <returns>A copy of the object with a new ID.</returns>
		public object CopyWithNewID()
		{
			// Make the copy of the object
			EquipmentMovement item = this.Clone();
			
			// Change the ID field
			item.MovementID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			return item;
		}

		
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				errors.AddRange(this.Get(_movementID));
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject()
		{
			return RefreshObject((int)RefreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (!String.IsNullOrEmpty(this._movementID.ToString()))
			{
				errors.AddRange(this.Get(_movementID));	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Undo any changes that might be done on the object.
		/// </summary>
		public override void UndoChanges()
		{
			// Enumerate the properties
			_movementID = _originalValues.MovementID;
			_agencyID = _originalValues.AgencyID;
			_equipID = _originalValues.EquipID;
			_shortDesc = _originalValues.ShortDesc;
			_fullDesc = _originalValues.FullDesc;
			_oldContactID = _originalValues.OldContactID;
			_oldLocation = _originalValues.OldLocation;
			_oldTeamName = _originalValues.OldTeamName;
			_oldBureau = _originalValues.OldBureau;
			_oldDivision = _originalValues.OldDivision;
			_newContactID = _originalValues.NewContactID;
			_newLocation = _originalValues.NewLocation;
			_newTeamName = _originalValues.NewTeamName;
			_newBureau = _originalValues.NewBureau;
			_newDivision = _originalValues.NewDivision;
			_dtMoveEffected = _originalValues.DateMoveEffected;
			_mileage = _originalValues.Mileage;
			_roundCount = _originalValues.RoundCount;
			_batchTransferID = _originalValues.BatchTransferID;
			_batchForContactID = _originalValues.BatchForContactID;
			_pinNumEntered = _originalValues.PinNumEntered;
			_inactive = _originalValues.Inactive;
			_dtAdded = _originalValues.DateAdded;
			_addedByUser = _originalValues.AddedByUser;
			_dtUpdated = _originalValues.DateUpdated;
			_updatedByUser = _originalValues.UpdatedByUser;
			_rowversion = _originalValues.Rowversion;
			

			this.EquipmentItem = _originalValues.EquipmentItem;
			_changedProps.Clear();		// Clear the changed properties

			this.RecordStatus = _originalValues.RecordStatus;
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdate(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate(SqlConnection oConn, SqlTransaction oTrans)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Check to see if the record is already current - if so, don't do anything.
			if (_recordStatus == RecordStatus.Current) { return errors; }
			
			// Check to see if the record is a delete - if so, delete it from the db.
			if (_recordStatus == RecordStatus.Deleted)
			{
				try
				{
					// Delete the record and all its children
					errors.AddRange(LEAD_BaseObject.DeleteImmediate("tEquipmentMovement", "iMovementID", _movementID.ToString(), true));
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				return errors;
			}
			
			// Next, check to see if the record is new.  If so, add it to the system
			if (_recordStatus == RecordStatus.New || _recordStatus == RecordStatus.Modified)
			{
				// Check the Broken Rules collection
				errors.AddRange(BrokenRules);

				// See if you can get an updated timestamp from the table for update
				if (errors.Count == 0 &&
					_recordStatus == RecordStatus.Modified)
				{
					byte[] timeStampFromTable = DAL.GetTimeStampFromTable("tEquipmentMovement", "bRowversion",
						"iMovementID = " + this.MovementID + "");
					if (timeStampFromTable != null && 
						DAL.GetValueForSQL(timeStampFromTable) != DAL.GetValueForSQL(_rowversion))
					{
						// Add the error to the error collection
						errors.Add(new ClassGenException("The timestamp fields don't match.", ClassGenExceptionIconType.Critical));
					}
				}

				// If the error collection is not clear, dump out of the function
				if (errors.Count > 0) { return errors; }

				// Set the person who updated/created this record
				_dtUpdated = DAL.GetSQLServerDateTime();
				if (String.IsNullOrEmpty(_addedByUser)) { AddedByUser = Security.CurrentUser.UserName; }
				UpdatedByUser = (!String.IsNullOrEmpty(Security.CurrentUser.UserName) ? Security.CurrentUser.UserName : UpdatedByUser);

				try
				{
					// Do the Exist/Insert check first
					sql = "DECLARE @return_val BIGINT " + 
						"IF NOT EXISTS (SELECT iMovementID FROM tEquipmentMovement WHERE iMovementID = @piMovementID) " + 
						"BEGIN" + 
						"    INSERT INTO tEquipmentMovement (iAgencyID, iEquipID, sShortDesc, sFullDesc, iOldContactID, sOldLocation, sOldTeamName, sOldBureau, sOldDivision, iNewContactID, sNewLocation, sNewTeamName, sNewBureau, sNewDivision, dtMoveEffected, dblMileage, iRoundCount, iBatchTransferID, iBatchForContactID, sPinNumEntered, bInactive, sAddedByUser, dtUpdated, sUpdatedByUser) " + 
						"    SELECT @piAgencyID, @piEquipID, @psShortDesc, @psFullDesc, @piOldContactID, @psOldLocation, @psOldTeamName, @psOldBureau, @psOldDivision, @piNewContactID, @psNewLocation, @psNewTeamName, @psNewBureau, @psNewDivision, @pdtMoveEffected, @pdblMileage, @piRoundCount, @piBatchTransferID, @piBatchForContactID, @psPinNumEntered, @pbInactive, @psAddedByUser, @pdtUpdated, @psUpdatedByUser " + 
						"    SELECT @return_val = SCOPE_IDENTITY() " + 
						"END " + 
						"ELSE " + 
						"BEGIN " + 
						"    UPDATE tEquipmentMovement SET " + 
						"        iAgencyID = @piAgencyID" + 
						"        ,iEquipID = @piEquipID" + 
						"        ,dtMoveEffected = @pdtMoveEffected" + 
						"        ,bInactive = @pbInactive" + 
						"        ,dtUpdated = @pdtUpdated" + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ShortDesc")) ? "        ,sShortDesc = @psShortDesc" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("FullDesc")) ? "        ,sFullDesc = @psFullDesc" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("OldContactID")) ? "        ,iOldContactID = @piOldContactID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("OldLocation")) ? "        ,sOldLocation = @psOldLocation" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("OldTeamName")) ? "        ,sOldTeamName = @psOldTeamName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("OldBureau")) ? "        ,sOldBureau = @psOldBureau" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("OldDivision")) ? "        ,sOldDivision = @psOldDivision" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NewContactID")) ? "        ,iNewContactID = @piNewContactID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NewLocation")) ? "        ,sNewLocation = @psNewLocation" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NewTeamName")) ? "        ,sNewTeamName = @psNewTeamName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NewBureau")) ? "        ,sNewBureau = @psNewBureau" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("NewDivision")) ? "        ,sNewDivision = @psNewDivision" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Mileage")) ? "        ,dblMileage = @pdblMileage" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("RoundCount")) ? "        ,iRoundCount = @piRoundCount" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("BatchTransferID")) ? "        ,iBatchTransferID = @piBatchTransferID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("BatchForContactID")) ? "        ,iBatchForContactID = @piBatchForContactID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("PinNumEntered")) ? "        ,sPinNumEntered = @psPinNumEntered" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("AddedByUser")) ? "        ,sAddedByUser = @psAddedByUser" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("UpdatedByUser")) ? "        ,sUpdatedByUser = @psUpdatedByUser" : "") + 
						"     WHERE iMovementID = @piMovementID " + 
						"     SELECT @return_val = @piMovementID " + 
						"END; SELECT @return_val AS ret_val, bRowversion FROM tEquipmentMovement WHERE iMovementID = @return_val";
					cmd = new SqlCommand(sql);

					cmd.Parameters.Add("@piMovementID", SqlDbType.BigInt).Value = _movementID;
					cmd.Parameters.Add("@piAgencyID", SqlDbType.BigInt).Value = _agencyID;
					cmd.Parameters.Add("@piEquipID", SqlDbType.BigInt).Value = _equipID;
					cmd.Parameters.Add("@psShortDesc", SqlDbType.VarChar, 400).Value = (_shortDesc == null ? (object)DBNull.Value : (object)_shortDesc);
					cmd.Parameters.Add("@psFullDesc", SqlDbType.VarChar, 3000).Value = (_fullDesc == null ? (object)DBNull.Value : (object)_fullDesc);
					cmd.Parameters.Add("@piOldContactID", SqlDbType.BigInt).Value = (_oldContactID == null ? (object)DBNull.Value : (object)_oldContactID);
					cmd.Parameters.Add("@psOldLocation", SqlDbType.VarChar, 50).Value = (_oldLocation == null ? (object)DBNull.Value : (object)_oldLocation);
					cmd.Parameters.Add("@psOldTeamName", SqlDbType.VarChar, 200).Value = (_oldTeamName == null ? (object)DBNull.Value : (object)_oldTeamName);
					cmd.Parameters.Add("@psOldBureau", SqlDbType.VarChar, 100).Value = (_oldBureau == null ? (object)DBNull.Value : (object)_oldBureau);
					cmd.Parameters.Add("@psOldDivision", SqlDbType.VarChar, 200).Value = (_oldDivision == null ? (object)DBNull.Value : (object)_oldDivision);
					cmd.Parameters.Add("@piNewContactID", SqlDbType.BigInt).Value = (_newContactID == null ? (object)DBNull.Value : (object)_newContactID);
					cmd.Parameters.Add("@psNewLocation", SqlDbType.VarChar, 50).Value = (_newLocation == null ? (object)DBNull.Value : (object)_newLocation);
					cmd.Parameters.Add("@psNewTeamName", SqlDbType.VarChar, 200).Value = (_newTeamName == null ? (object)DBNull.Value : (object)_newTeamName);
					cmd.Parameters.Add("@psNewBureau", SqlDbType.VarChar, 100).Value = (_newBureau == null ? (object)DBNull.Value : (object)_newBureau);
					cmd.Parameters.Add("@psNewDivision", SqlDbType.VarChar, 200).Value = (_newDivision == null ? (object)DBNull.Value : (object)_newDivision);
					cmd.Parameters.Add("@pdtMoveEffected", SqlDbType.DateTime).Value = _dtMoveEffected;
					cmd.Parameters.Add("@pdblMileage", SqlDbType.Decimal).Value = (_mileage == null ? (object)DBNull.Value : (object)_mileage);
					cmd.Parameters.Add("@piRoundCount", SqlDbType.Int).Value = (_roundCount == null ? (object)DBNull.Value : (object)_roundCount);
					cmd.Parameters.Add("@piBatchTransferID", SqlDbType.BigInt).Value = (_batchTransferID == null ? (object)DBNull.Value : (object)_batchTransferID);
					cmd.Parameters.Add("@piBatchForContactID", SqlDbType.BigInt).Value = (_batchForContactID == null ? (object)DBNull.Value : (object)_batchForContactID);
					cmd.Parameters.Add("@psPinNumEntered", SqlDbType.VarChar, 10).Value = (_pinNumEntered == null ? (object)DBNull.Value : (object)_pinNumEntered);
					cmd.Parameters.Add("@pbInactive", SqlDbType.Bit).Value = _inactive;
					cmd.Parameters.Add("@psAddedByUser", SqlDbType.VarChar, 50).Value = (_addedByUser == null ? (object)DBNull.Value : (object)_addedByUser);
					cmd.Parameters.Add("@pdtUpdated", SqlDbType.DateTime).Value = _dtUpdated;
					cmd.Parameters.Add("@psUpdatedByUser", SqlDbType.VarChar, 50).Value = (_updatedByUser == null ? (object)DBNull.Value : (object)_updatedByUser);

					cmd.Transaction = oTrans;		// Set the transaction on the command

					dt = DAL.SQLExecDataTable(cmd, oConn);
					foreach (DataRow row in dt.Rows)
					{
						// Get the old key field value to figure out if we need to update it
						long oldRecID = _movementID;

						_movementID = (long)row["ret_val"];
						_rowversion = (byte[])(row["bRowversion"]);
					}
					dt.Dispose();		// Kill off the datatable
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				if (errors.CriticalExceptionCount == 0)
				{
					_recordStatus = RecordStatus.Current;		// Set the record status to current after a successful update
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get the record specified on the Key Fields in the table.
		/// </summary>
		/// <param name="movementID">A key field used to find the correct record.</param>
		/// <param name="includeParentPopulation">Whether or not to include values derived from a parent table.</param>
		public ClassGenExceptionCollection Get(long movementID, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlCommand cmd = null;
			string sql = string.Empty;
			DataTable dt = null;
			
			try
			{
				sql = "SELECT [EM].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tEquipmentMovement [EM] " + 
					"WHERE [EM].[iMovementID] = @piMovementID " + 
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piMovementID", SqlDbType.BigInt).Value = movementID;
				dt = DAL.SQLExecDataTable(cmd);

				foreach (DataRow row in dt.Rows)
				{
					// Call the get from data row method
					errors.AddRange(this.Get(row, includeParentPopulation));
				}

				dt.Dispose();		// Dispose of the datatable
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified based on the Key Fields in the table
		/// </summary>
		/// <param name="movementID">A key field used to find the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(long movementID)
		{
			return Get(movementID, false);		// Get the item
		}

		/// <summary>
		/// Populate the object using the datarow passed in...
		/// </summary>
		/// <param name="row">The DataRow to populate the object from.</param>
		/// <param name="includeParentPopulation">Whether to include data generated from parent tables.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				// Enumerate through the fields and set up the object
				_recordStatus = RecordStatus.Current;
				_isLoaded = false;
				if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
				{
					_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
				}
				else
				{
					_dateTimeObjectPopulated = DateTime.Now;
				}
				DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
				
				_movementID = long.Parse(row["iMovementID"] != DBNull.Value ? row["iMovementID"].ToString() : "0");
				_agencyID = long.Parse(row["iAgencyID"] != DBNull.Value ? row["iAgencyID"].ToString() : "0");
				_equipID = long.Parse(row["iEquipID"] != DBNull.Value ? row["iEquipID"].ToString() : "0");
				_shortDesc = (row["sShortDesc"] != DBNull.Value ? _shortDesc = row["sShortDesc"].ToString() : null);
				_fullDesc = (row["sFullDesc"] != DBNull.Value ? _fullDesc = row["sFullDesc"].ToString() : null);
				
				_oldContactID = (row["iOldContactID"] != DBNull.Value ? _oldContactID = long.Parse(row["iOldContactID"].ToString()) : null);
				_oldLocation = (row["sOldLocation"] != DBNull.Value ? _oldLocation = row["sOldLocation"].ToString() : null);
				_oldTeamName = (row["sOldTeamName"] != DBNull.Value ? _oldTeamName = row["sOldTeamName"].ToString() : null);
				_oldBureau = (row["sOldBureau"] != DBNull.Value ? _oldBureau = row["sOldBureau"].ToString() : null);
				_oldDivision = (row["sOldDivision"] != DBNull.Value ? _oldDivision = row["sOldDivision"].ToString() : null);
				
				_newContactID = (row["iNewContactID"] != DBNull.Value ? _newContactID = long.Parse(row["iNewContactID"].ToString()) : null);
				_newLocation = (row["sNewLocation"] != DBNull.Value ? _newLocation = row["sNewLocation"].ToString() : null);
				_newTeamName = (row["sNewTeamName"] != DBNull.Value ? _newTeamName = row["sNewTeamName"].ToString() : null);
				_newBureau = (row["sNewBureau"] != DBNull.Value ? _newBureau = row["sNewBureau"].ToString() : null);
				_newDivision = (row["sNewDivision"] != DBNull.Value ? _newDivision = row["sNewDivision"].ToString() : null);
				
				_dtMoveEffected = (row["dtMoveEffected"] != DBNull.Value ? (DateTime)row["dtMoveEffected"] : new DateTime(1900, 1, 1));
				_mileage = (row["dblMileage"] != DBNull.Value ? _mileage = decimal.Parse(row["dblMileage"].ToString()) : null);
				_roundCount = (row["iRoundCount"] != DBNull.Value ? _roundCount = int.Parse(row["iRoundCount"].ToString()) : null);
				_batchTransferID = (row["iBatchTransferID"] != DBNull.Value ? _batchTransferID = long.Parse(row["iBatchTransferID"].ToString()) : null);
				_batchForContactID = (row["iBatchForContactID"] != DBNull.Value ? _batchForContactID = long.Parse(row["iBatchForContactID"].ToString()) : null);
				
				_pinNumEntered = (row["sPinNumEntered"] != DBNull.Value ? _pinNumEntered = row["sPinNumEntered"].ToString() : null);
				_inactive = bool.Parse(row["bInactive"] != DBNull.Value ? row["bInactive"].ToString() : "false");
				_dtAdded = (row["dtAdded"] != DBNull.Value ? (DateTime)row["dtAdded"] : new DateTime(1900, 1, 1));
				_addedByUser = (row["sAddedByUser"] != DBNull.Value ? _addedByUser = row["sAddedByUser"].ToString() : null);
				_dtUpdated = (row["dtUpdated"] != DBNull.Value ? (DateTime)row["dtUpdated"] : new DateTime(1900, 1, 1));
				
				_updatedByUser = (row["sUpdatedByUser"] != DBNull.Value ? _updatedByUser = row["sUpdatedByUser"].ToString() : null);
				_rowversion = (byte[])(row["bRowversion"] != DBNull.Value ? (object)row["bRowversion"] : (object)null);
				
				#region Parent Collections
				if (includeParentPopulation)
				{
					if (!String.IsNullOrEmpty(_equipID.ToString()))
					{
						if (this.EquipmentItem == null) { this.EquipmentItem = new Equipment(); }
						this.EquipmentItem.Get(_equipID);		// Equipment
					}
				}
				#endregion Parent Collections

				_isLoaded = true;

				// Make a copy of the object with original values
				_originalValues = this.Clone();
			}
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified from the passed datarow.
		/// </summary>
		/// <param name="row">The DataRow used to determine the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row)
		{
			return Get(row, false);		// Get the item
		}


		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="dt">The datatable to use as a template.</param>
		/// <returns>A new datarow.</returns>
		public DataRow ToDataRow(DataTable dt)
		{
			// Generate and return a data row
			return ToDataRowWithIL<EquipmentMovement>(this, dt);
		}

		#endregion Public Methods

		#region Public Static Values

		// Main Class - EquipmentMovement

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_MovementID = "MovementID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AgencyID = "AgencyID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_EquipID = "EquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ShortDesc = "ShortDesc";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_FullDesc = "FullDesc";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_OldContactID = "OldContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_OldLocation = "OldLocation";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_OldTeamName = "OldTeamName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_OldBureau = "OldBureau";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_OldDivision = "OldDivision";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NewContactID = "NewContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NewLocation = "NewLocation";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NewTeamName = "NewTeamName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NewBureau = "NewBureau";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_NewDivision = "NewDivision";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateMoveEffected = "DateMoveEffected";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Mileage = "Mileage";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_RoundCount = "RoundCount";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_BatchTransferID = "BatchTransferID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_BatchForContactID = "BatchForContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_PinNumEntered = "PinNumEntered";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Inactive = "Inactive";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateAdded = "DateAdded";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AddedByUser = "AddedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateUpdated = "DateUpdated";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_UpdatedByUser = "UpdatedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Rowversion = "Rowversion";

		// Equipment

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_EquipID = "Equipment_EquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_AgencyID = "Equipment_AgencyID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Type = "Equipment_Type";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Item = "Equipment_Item";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Year = "Equipment_Year";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Make = "Equipment_Make";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Model = "Equipment_Model";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_ParentEquipID = "Equipment_ParentEquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Color = "Equipment_Color";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_NumDoors = "Equipment_NumDoors";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Is4x4 = "Equipment_Is4x4";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_LightingSystem = "Equipment_LightingSystem";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_DepartmentRadio = "Equipment_DepartmentRadio";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_NumSpotLights = "Equipment_NumSpotLights";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_MarkedVehicle = "Equipment_MarkedVehicle";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Motorcycle = "Equipment_Motorcycle";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_SpecialtyVehicle = "Equipment_SpecialtyVehicle";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_VehicleID = "Equipment_VehicleID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_ComputerEquipID = "Equipment_ComputerEquipID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_SerialNum = "Equipment_SerialNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_LicenseNum = "Equipment_LicenseNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Mileage = "Equipment_Mileage";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_RoundCount = "Equipment_RoundCount";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_PartNum = "Equipment_PartNum";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Category = "Equipment_Category";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_OtherID = "Equipment_OtherID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Status = "Equipment_Status";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_DateStatus = "Equipment_DateStatus";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_ContactID = "Equipment_ContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Location = "Equipment_Location";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_TeamID = "Equipment_TeamID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_TeamName = "Equipment_TeamName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Bureau = "Equipment_Bureau";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Division = "Equipment_Division";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Funding = "Equipment_Funding";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Description = "Equipment_Description";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Comments = "Equipment_Comments";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_VendorContactID = "Equipment_VendorContactID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_VendorPartNumber = "Equipment_VendorPartNumber";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_PurchasePrice = "Equipment_PurchasePrice";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Tax = "Equipment_Tax";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_SH = "Equipment_SH";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_DatePurchase = "Equipment_DatePurchase";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Warranty = "Equipment_Warranty";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_DateReplacement = "Equipment_DateReplacement";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_VIN = "Equipment_VIN";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Inactive = "Equipment_Inactive";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_DateAdded = "Equipment_DateAdded";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_AddedByUser = "Equipment_AddedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_DateUpdated = "Equipment_DateUpdated";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_UpdatedByUser = "Equipment_UpdatedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Equipment_Rowversion = "Equipment_Rowversion";

		#endregion Public Static Values

		#region Public Static Methods
		/// <summary>
		/// Get a DB Field name from the field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(EquipmentMovementField field)
		{
			string fldName = string.Empty;

			// Add the elements
			switch (field)
			{
				case EquipmentMovementField.MovementID: fldName = "iMovementID"; break;
				case EquipmentMovementField.AgencyID: fldName = "iAgencyID"; break;
				case EquipmentMovementField.EquipID: fldName = "iEquipID"; break;
				case EquipmentMovementField.ShortDesc: fldName = "sShortDesc"; break;
				case EquipmentMovementField.FullDesc: fldName = "sFullDesc"; break;
				case EquipmentMovementField.OldContactID: fldName = "iOldContactID"; break;
				case EquipmentMovementField.OldLocation: fldName = "sOldLocation"; break;
				case EquipmentMovementField.OldTeamName: fldName = "sOldTeamName"; break;
				case EquipmentMovementField.OldBureau: fldName = "sOldBureau"; break;
				case EquipmentMovementField.OldDivision: fldName = "sOldDivision"; break;
				case EquipmentMovementField.NewContactID: fldName = "iNewContactID"; break;
				case EquipmentMovementField.NewLocation: fldName = "sNewLocation"; break;
				case EquipmentMovementField.NewTeamName: fldName = "sNewTeamName"; break;
				case EquipmentMovementField.NewBureau: fldName = "sNewBureau"; break;
				case EquipmentMovementField.NewDivision: fldName = "sNewDivision"; break;
				case EquipmentMovementField.DateMoveEffected: fldName = "dtMoveEffected"; break;
				case EquipmentMovementField.Mileage: fldName = "dblMileage"; break;
				case EquipmentMovementField.RoundCount: fldName = "iRoundCount"; break;
				case EquipmentMovementField.BatchTransferID: fldName = "iBatchTransferID"; break;
				case EquipmentMovementField.BatchForContactID: fldName = "iBatchForContactID"; break;
				case EquipmentMovementField.PinNumEntered: fldName = "sPinNumEntered"; break;
				case EquipmentMovementField.Inactive: fldName = "bInactive"; break;
				case EquipmentMovementField.DateAdded: fldName = "dtAdded"; break;
				case EquipmentMovementField.AddedByUser: fldName = "sAddedByUser"; break;
				case EquipmentMovementField.DateUpdated: fldName = "dtUpdated"; break;
				case EquipmentMovementField.UpdatedByUser: fldName = "sUpdatedByUser"; break;
				case EquipmentMovementField.Rowversion: fldName = "bRowversion"; break;
			}

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// Get a field from the DB Field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(string field)
		{
			string fldName = null;

			// Add the elements
			if (field.ToLower() == "imovementid") { fldName = EquipmentMovementField.MovementID.ToString(); }
			else if (field.ToLower() == "iagencyid") { fldName = EquipmentMovementField.AgencyID.ToString(); }
			else if (field.ToLower() == "iequipid") { fldName = EquipmentMovementField.EquipID.ToString(); }
			else if (field.ToLower() == "sshortdesc") { fldName = EquipmentMovementField.ShortDesc.ToString(); }
			else if (field.ToLower() == "sfulldesc") { fldName = EquipmentMovementField.FullDesc.ToString(); }
			else if (field.ToLower() == "ioldcontactid") { fldName = EquipmentMovementField.OldContactID.ToString(); }
			else if (field.ToLower() == "soldlocation") { fldName = EquipmentMovementField.OldLocation.ToString(); }
			else if (field.ToLower() == "soldteamname") { fldName = EquipmentMovementField.OldTeamName.ToString(); }
			else if (field.ToLower() == "soldbureau") { fldName = EquipmentMovementField.OldBureau.ToString(); }
			else if (field.ToLower() == "solddivision") { fldName = EquipmentMovementField.OldDivision.ToString(); }
			else if (field.ToLower() == "inewcontactid") { fldName = EquipmentMovementField.NewContactID.ToString(); }
			else if (field.ToLower() == "snewlocation") { fldName = EquipmentMovementField.NewLocation.ToString(); }
			else if (field.ToLower() == "snewteamname") { fldName = EquipmentMovementField.NewTeamName.ToString(); }
			else if (field.ToLower() == "snewbureau") { fldName = EquipmentMovementField.NewBureau.ToString(); }
			else if (field.ToLower() == "snewdivision") { fldName = EquipmentMovementField.NewDivision.ToString(); }
			else if (field.ToLower() == "dtmoveeffected") { fldName = EquipmentMovementField.DateMoveEffected.ToString(); }
			else if (field.ToLower() == "dblmileage") { fldName = EquipmentMovementField.Mileage.ToString(); }
			else if (field.ToLower() == "iroundcount") { fldName = EquipmentMovementField.RoundCount.ToString(); }
			else if (field.ToLower() == "ibatchtransferid") { fldName = EquipmentMovementField.BatchTransferID.ToString(); }
			else if (field.ToLower() == "ibatchforcontactid") { fldName = EquipmentMovementField.BatchForContactID.ToString(); }
			else if (field.ToLower() == "spinnumentered") { fldName = EquipmentMovementField.PinNumEntered.ToString(); }
			else if (field.ToLower() == "binactive") { fldName = EquipmentMovementField.Inactive.ToString(); }
			else if (field.ToLower() == "dtadded") { fldName = EquipmentMovementField.DateAdded.ToString(); }
			else if (field.ToLower() == "saddedbyuser") { fldName = EquipmentMovementField.AddedByUser.ToString(); }
			else if (field.ToLower() == "dtupdated") { fldName = EquipmentMovementField.DateUpdated.ToString(); }
			else if (field.ToLower() == "supdatedbyuser") { fldName = EquipmentMovementField.UpdatedByUser.ToString(); }
			else if (field.ToLower() == "browversion") { fldName = EquipmentMovementField.Rowversion.ToString(); }

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// The database table name.
		/// </summary>
		public static readonly string DB_TableName = "tEquipmentMovement"; 

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(EquipmentMovementField field)
		{
			return GetDistinctFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(EquipmentMovementField field, string whereClause)
		{
			string fldName = GetDBFieldName(field);

			if (String.IsNullOrEmpty(fldName)) { return new List<string>(); }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			List<string> rtv = new List<string>();

			try
			{
				sql = "SELECT DISTINCT LTRIM(RTRIM([" + fldName + "])) " +
						"FROM [tEquipmentMovement] " +
						"WHERE [" + fldName + "] IS NOT NULL AND LTRIM(RTRIM([" + fldName + "])) <> '' " + 
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") + 
						"ORDER BY LTRIM(RTRIM([" + fldName + "]))";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (fldName.ToLower().EndsWith("guid"))
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString().ToLower());
					}
				}
				else
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString());
					}
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="fields">The fields to get.</param>
		/// <param name="fieldAliases">The field aliases.</param>
		/// <param name="sortedFields">The sorted fields.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A datatable of values from the collection (sorted by value).</returns>
		public static DataTable GetDistinctFromDBAsDataTable(EquipmentMovementField[] fields, 
			string[] fieldAliases,
			EquipmentMovementField[] sortedFields, 
			string whereClause)
		{
			Dictionary<EquipmentMovementField, string> fieldNames = new Dictionary<EquipmentMovementField, string>();
			StringBuilder sbFields = new StringBuilder();
			StringBuilder sbWhereClause = new StringBuilder();
			int fieldCount = 0;
			foreach (EquipmentMovementField fld in fields)
			{
				if (!fieldNames.ContainsKey(fld))
				{
					fieldNames.Add(fld, GetDBFieldName(fld));
					sbWhereClause.Append((sbWhereClause.ToString().Trim().Length > 0 ? " AND " : " WHERE ") +
						fieldNames[fld] + " IS NOT NULL AND LTRIM(RTRIM(" + fieldNames[fld] + ")) <> '' ");
				}
				if (String.IsNullOrEmpty(fieldNames[fld])) { return null; }
				sbFields.Append((sbFields.ToString().Trim().Length > 0 ? "," : "") + "[" + fieldNames[fld] + "]" + 
					(fieldAliases.Length > fieldCount ? " AS [" + fieldAliases[fieldCount] + "] " : ""));
				fieldCount++;
			}

			Dictionary<EquipmentMovementField, string> sortedFieldNames = new Dictionary<EquipmentMovementField, string>();
			StringBuilder sbSortedFields = new StringBuilder();
			foreach (EquipmentMovementField fld in sortedFields)
			{
				if (!sortedFieldNames.ContainsKey(fld))
				{
					sortedFieldNames.Add(fld, GetDBFieldName(fld));
				}
				if (String.IsNullOrEmpty(sortedFieldNames[fld])) { return null; }
				sbSortedFields.Append((sbSortedFields.ToString().Trim().Length > 0 ? "," : "") + sortedFieldNames[fld]);
			}

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT DISTINCT " + sbFields.ToString() + " " +
						"FROM tEquipmentMovement " +
						sbWhereClause.ToString() + " " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						(!String.IsNullOrEmpty(sbSortedFields.ToString()) ? " ORDER BY " + sbSortedFields.ToString() + "" : "");
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return dt;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(EquipmentMovementMinMaxDateField field)
		{
			return GetMinDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(EquipmentMovementMinMaxDateField field, string whereClause)
		{
			EquipmentMovementField fld = (EquipmentMovementField)Enum.Parse(typeof(EquipmentMovementField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tEquipmentMovement] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(EquipmentMovementMinMaxDateField field)
		{
			return GetMaxDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(EquipmentMovementMinMaxDateField field, string whereClause)
		{
			EquipmentMovementField fld = (EquipmentMovementField)Enum.Parse(typeof(EquipmentMovementField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tEquipmentMovement] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(EquipmentMovementMinMaxNumberField field)
		{
			return GetMinNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(EquipmentMovementMinMaxNumberField field, string whereClause)
		{
			EquipmentMovementField fld = (EquipmentMovementField)Enum.Parse(typeof(EquipmentMovementField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tEquipmentMovement] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(EquipmentMovementMinMaxNumberField field)
		{
			return GetMaxNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(EquipmentMovementMinMaxNumberField field, string whereClause)
		{
			EquipmentMovementField fld = (EquipmentMovementField)Enum.Parse(typeof(EquipmentMovementField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tEquipmentMovement] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Copy the object - then change the id field to a new value
		/// </summary>
		/// <param name="source">The object to copy.</param>
		/// <returns>A copy of the object, with a new ID.</returns>
		public static EquipmentMovement CopyFrom(EquipmentMovement source)
		{
			// Make the copy of the object
			EquipmentMovement item = source.Clone();
			
			// Change the ID field
			item.MovementID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			return item;
		}

		/// <summary>
		/// Convert the passed string into a db friendly string (one that 
		/// doesn't include the names in the object, but rather the names 
		/// from the fields from the database).
		/// </summary>
		/// <param name="dbString">The string to process.</param>
		/// <returns>The converted string.</returns>
		public static string ToDBFriendly(string dbString)
		{
			string rtv = dbString;

			rtv = rtv.Replace("[MovementID]", "[iMovementID]");
			rtv = rtv.Replace("[AgencyID]", "[iAgencyID]");
			rtv = rtv.Replace("[EquipID]", "[iEquipID]");
			rtv = rtv.Replace("[ShortDesc]", "[sShortDesc]");
			rtv = rtv.Replace("[FullDesc]", "[sFullDesc]");
			rtv = rtv.Replace("[OldContactID]", "[iOldContactID]");
			rtv = rtv.Replace("[OldLocation]", "[sOldLocation]");
			rtv = rtv.Replace("[OldTeamName]", "[sOldTeamName]");
			rtv = rtv.Replace("[OldBureau]", "[sOldBureau]");
			rtv = rtv.Replace("[OldDivision]", "[sOldDivision]");
			rtv = rtv.Replace("[NewContactID]", "[iNewContactID]");
			rtv = rtv.Replace("[NewLocation]", "[sNewLocation]");
			rtv = rtv.Replace("[NewTeamName]", "[sNewTeamName]");
			rtv = rtv.Replace("[NewBureau]", "[sNewBureau]");
			rtv = rtv.Replace("[NewDivision]", "[sNewDivision]");
			rtv = rtv.Replace("[DateMoveEffected]", "[dtMoveEffected]");
			rtv = rtv.Replace("[Mileage]", "[dblMileage]");
			rtv = rtv.Replace("[RoundCount]", "[iRoundCount]");
			rtv = rtv.Replace("[BatchTransferID]", "[iBatchTransferID]");
			rtv = rtv.Replace("[BatchForContactID]", "[iBatchForContactID]");
			rtv = rtv.Replace("[PinNumEntered]", "[sPinNumEntered]");
			rtv = rtv.Replace("[Inactive]", "[bInactive]");
			rtv = rtv.Replace("[DateAdded]", "[dtAdded]");
			rtv = rtv.Replace("[AddedByUser]", "[sAddedByUser]");
			rtv = rtv.Replace("[DateUpdated]", "[dtUpdated]");
			rtv = rtv.Replace("[UpdatedByUser]", "[sUpdatedByUser]");
			rtv = rtv.Replace("[Rowversion]", "[bRowversion]");

			return rtv;
		}

		#region Json.NET Serialization
		/// <summary>
		/// Attempt to serialize the EquipmentMovement object to the server
		/// </summary>
		/// <param name="obj">The EquipmentMovement object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(EquipmentMovement obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the EquipmentMovement object from the server
		/// </summary>
		/// <param name="obj">The EquipmentMovement object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A EquipmentMovement object containing the return from the method</returns>
		public static EquipmentMovement DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			EquipmentMovement rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<EquipmentMovement>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization

		#endregion Public Static Methods

		#region IClassGenPropertyChanging Implementation

		/// <summary>
		/// Occurs when a property is about to change.
		/// </summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>
		/// Occurs when a ClassGen property is about to change.
		/// </summary>
		public event ClassGenPropertyChangingEventHandler ClassGenPropertyChanging;
		private bool NotifyPropertyChanging(string info, object oldValue, object newValue)
		{
			bool cancel = false;
			if (ClassGenPropertyChanging != null)
			{
				ClassGenPropertyChangingEventArgs e = new ClassGenPropertyChangingEventArgs(info, oldValue, newValue);
				ClassGenPropertyChanging(this, e);
				cancel = e.Cancel; 
			}
			if (!cancel && PropertyChanging != null)
			{
				PropertyChangingEventArgs e = new PropertyChangingEventArgs(info);
				PropertyChanging(this, e);
			}
			return cancel;
		}

		#endregion IClassGenPropertyChanging Implementation
		
		#region IClassGenLogXML Implementation
		/// <summary>
		/// Gets the current object as an XML object stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base properties 
		///		created as model base objects (GridCustom0-9, etc.).</param>
		/// <returns>The object as an XML string.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();

			sb.Append("<MovementID>" + System.Security.SecurityElement.Escape(MovementID.ToString()) + "</MovementID>" + Environment.NewLine);
			sb.Append("<AgencyID>" + System.Security.SecurityElement.Escape(AgencyID.ToString()) + "</AgencyID>" + Environment.NewLine);
			sb.Append("<EquipID>" + System.Security.SecurityElement.Escape(EquipID.ToString()) + "</EquipID>" + Environment.NewLine);
			sb.Append("<ShortDesc>" + System.Security.SecurityElement.Escape(ShortDesc) + "</ShortDesc>" + Environment.NewLine);
			sb.Append("<FullDesc>" + System.Security.SecurityElement.Escape(FullDesc) + "</FullDesc>" + Environment.NewLine);
			sb.Append("<OldContactID>" + System.Security.SecurityElement.Escape(OldContactID.ToString()) + "</OldContactID>" + Environment.NewLine);
			sb.Append("<OldLocation>" + System.Security.SecurityElement.Escape(OldLocation) + "</OldLocation>" + Environment.NewLine);
			sb.Append("<OldTeamName>" + System.Security.SecurityElement.Escape(OldTeamName) + "</OldTeamName>" + Environment.NewLine);
			sb.Append("<OldBureau>" + System.Security.SecurityElement.Escape(OldBureau) + "</OldBureau>" + Environment.NewLine);
			sb.Append("<OldDivision>" + System.Security.SecurityElement.Escape(OldDivision) + "</OldDivision>" + Environment.NewLine);
			sb.Append("<NewContactID>" + System.Security.SecurityElement.Escape(NewContactID.ToString()) + "</NewContactID>" + Environment.NewLine);
			sb.Append("<NewLocation>" + System.Security.SecurityElement.Escape(NewLocation) + "</NewLocation>" + Environment.NewLine);
			sb.Append("<NewTeamName>" + System.Security.SecurityElement.Escape(NewTeamName) + "</NewTeamName>" + Environment.NewLine);
			sb.Append("<NewBureau>" + System.Security.SecurityElement.Escape(NewBureau) + "</NewBureau>" + Environment.NewLine);
			sb.Append("<NewDivision>" + System.Security.SecurityElement.Escape(NewDivision) + "</NewDivision>" + Environment.NewLine);
			sb.Append("<DateMoveEffected>" + DateMoveEffected.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateMoveEffected>" + Environment.NewLine);
			sb.Append("<Mileage>" + System.Security.SecurityElement.Escape(Mileage.ToString()) + "</Mileage>" + Environment.NewLine);
			sb.Append("<RoundCount>" + System.Security.SecurityElement.Escape(RoundCount.ToString()) + "</RoundCount>" + Environment.NewLine);
			sb.Append("<BatchTransferID>" + System.Security.SecurityElement.Escape(BatchTransferID.ToString()) + "</BatchTransferID>" + Environment.NewLine);
			sb.Append("<BatchForContactID>" + System.Security.SecurityElement.Escape(BatchForContactID.ToString()) + "</BatchForContactID>" + Environment.NewLine);
			sb.Append("<PinNumEntered>" + System.Security.SecurityElement.Escape(PinNumEntered) + "</PinNumEntered>" + Environment.NewLine);
			sb.Append("<Inactive>" + System.Security.SecurityElement.Escape(Inactive.ToString()) + "</Inactive>" + Environment.NewLine);
			sb.Append("<DateAdded>" + DateAdded.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateAdded>" + Environment.NewLine);
			sb.Append("<AddedByUser>" + System.Security.SecurityElement.Escape(AddedByUser) + "</AddedByUser>" + Environment.NewLine);
			sb.Append("<DateUpdated>" + DateUpdated.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateUpdated>" + Environment.NewLine);
			sb.Append("<UpdatedByUser>" + System.Security.SecurityElement.Escape(UpdatedByUser) + "</UpdatedByUser>" + Environment.NewLine);

			if (includeBaseProperties)
			{
				sb.Append("<RecordStatus>" + this.RecordStatus.ToString() + "</RecordStatus>" + Environment.NewLine);
				sb.Append("<CheckedInGrid>" + this.CheckedInGrid.ToString() + "</CheckedInGrid>" + Environment.NewLine);
				sb.Append("<IsDisposable>" + this.IsDisposable.ToString() + "</IsDisposable>" + Environment.NewLine);

				sb.Append("<GridCustom_0>" + System.Security.SecurityElement.Escape(this.GridCustom_0) + "</GridCustom_0>" + Environment.NewLine);
				sb.Append("<GridCustom_1>" + System.Security.SecurityElement.Escape(this.GridCustom_1) + "</GridCustom_1>" + Environment.NewLine);
				sb.Append("<GridCustom_2>" + System.Security.SecurityElement.Escape(this.GridCustom_2) + "</GridCustom_2>" + Environment.NewLine);
				sb.Append("<GridCustom_3>" + System.Security.SecurityElement.Escape(this.GridCustom_3) + "</GridCustom_3>" + Environment.NewLine);
				sb.Append("<GridCustom_4>" + System.Security.SecurityElement.Escape(this.GridCustom_4) + "</GridCustom_4>" + Environment.NewLine);
				sb.Append("<GridCustom_5>" + System.Security.SecurityElement.Escape(this.GridCustom_5) + "</GridCustom_5>" + Environment.NewLine);
				sb.Append("<GridCustom_6>" + System.Security.SecurityElement.Escape(this.GridCustom_6) + "</GridCustom_6>" + Environment.NewLine);
				sb.Append("<GridCustom_7>" + System.Security.SecurityElement.Escape(this.GridCustom_7) + "</GridCustom_7>" + Environment.NewLine);
				sb.Append("<GridCustom_8>" + System.Security.SecurityElement.Escape(this.GridCustom_8) + "</GridCustom_8>" + Environment.NewLine);
				sb.Append("<GridCustom_9>" + System.Security.SecurityElement.Escape(this.GridCustom_9) + "</GridCustom_9>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<EquipmentMovement>" + Environment.NewLine);
				sb.Append("</EquipmentMovement>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Get the current object as an XML object stream with all base properties included.
		/// </summary>
		/// <returns>The object as an XML string with all base properties included.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the changed elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <returns>A string value containing the XML list.</returns>
		public string GetChangedElementsAsXML()
		{
			StringBuilder sb = new StringBuilder();

			// Get the original values in relation to the new ones
			if (_originalValues.MovementID != MovementID)
			{
				sb.Append("\t<MovementID>");
				sb.Append("<OldValue>" + _originalValues.MovementID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + MovementID.ToString() + "</NewValue>");
				sb.Append("</MovementID>" + Environment.NewLine);
			}
			if (_originalValues.AgencyID != AgencyID)
			{
				sb.Append("\t<AgencyID>");
				sb.Append("<OldValue>" + _originalValues.AgencyID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + AgencyID.ToString() + "</NewValue>");
				sb.Append("</AgencyID>" + Environment.NewLine);
			}
			if (_originalValues.EquipID != EquipID)
			{
				sb.Append("\t<EquipID>");
				sb.Append("<OldValue>" + _originalValues.EquipID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + EquipID.ToString() + "</NewValue>");
				sb.Append("</EquipID>" + Environment.NewLine);
			}
			if (_originalValues.ShortDesc != ShortDesc)
			{
				sb.Append("\t<ShortDesc>");
				sb.Append("<OldValue>" + _originalValues.ShortDesc + "</OldValue>");
				sb.Append("<NewValue>" + ShortDesc + "</NewValue>");
				sb.Append("</ShortDesc>" + Environment.NewLine);
			}
			if (_originalValues.FullDesc != FullDesc)
			{
				sb.Append("\t<FullDesc>");
				sb.Append("<OldValue>" + _originalValues.FullDesc + "</OldValue>");
				sb.Append("<NewValue>" + FullDesc + "</NewValue>");
				sb.Append("</FullDesc>" + Environment.NewLine);
			}
			if (_originalValues.OldContactID != OldContactID)
			{
				sb.Append("\t<OldContactID>");
				sb.Append("<OldValue>" + _originalValues.OldContactID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + OldContactID.ToString() + "</NewValue>");
				sb.Append("</OldContactID>" + Environment.NewLine);
			}
			if (_originalValues.OldLocation != OldLocation)
			{
				sb.Append("\t<OldLocation>");
				sb.Append("<OldValue>" + _originalValues.OldLocation + "</OldValue>");
				sb.Append("<NewValue>" + OldLocation + "</NewValue>");
				sb.Append("</OldLocation>" + Environment.NewLine);
			}
			if (_originalValues.OldTeamName != OldTeamName)
			{
				sb.Append("\t<OldTeamName>");
				sb.Append("<OldValue>" + _originalValues.OldTeamName + "</OldValue>");
				sb.Append("<NewValue>" + OldTeamName + "</NewValue>");
				sb.Append("</OldTeamName>" + Environment.NewLine);
			}
			if (_originalValues.OldBureau != OldBureau)
			{
				sb.Append("\t<OldBureau>");
				sb.Append("<OldValue>" + _originalValues.OldBureau + "</OldValue>");
				sb.Append("<NewValue>" + OldBureau + "</NewValue>");
				sb.Append("</OldBureau>" + Environment.NewLine);
			}
			if (_originalValues.OldDivision != OldDivision)
			{
				sb.Append("\t<OldDivision>");
				sb.Append("<OldValue>" + _originalValues.OldDivision + "</OldValue>");
				sb.Append("<NewValue>" + OldDivision + "</NewValue>");
				sb.Append("</OldDivision>" + Environment.NewLine);
			}
			if (_originalValues.NewContactID != NewContactID)
			{
				sb.Append("\t<NewContactID>");
				sb.Append("<OldValue>" + _originalValues.NewContactID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + NewContactID.ToString() + "</NewValue>");
				sb.Append("</NewContactID>" + Environment.NewLine);
			}
			if (_originalValues.NewLocation != NewLocation)
			{
				sb.Append("\t<NewLocation>");
				sb.Append("<OldValue>" + _originalValues.NewLocation + "</OldValue>");
				sb.Append("<NewValue>" + NewLocation + "</NewValue>");
				sb.Append("</NewLocation>" + Environment.NewLine);
			}
			if (_originalValues.NewTeamName != NewTeamName)
			{
				sb.Append("\t<NewTeamName>");
				sb.Append("<OldValue>" + _originalValues.NewTeamName + "</OldValue>");
				sb.Append("<NewValue>" + NewTeamName + "</NewValue>");
				sb.Append("</NewTeamName>" + Environment.NewLine);
			}
			if (_originalValues.NewBureau != NewBureau)
			{
				sb.Append("\t<NewBureau>");
				sb.Append("<OldValue>" + _originalValues.NewBureau + "</OldValue>");
				sb.Append("<NewValue>" + NewBureau + "</NewValue>");
				sb.Append("</NewBureau>" + Environment.NewLine);
			}
			if (_originalValues.NewDivision != NewDivision)
			{
				sb.Append("\t<NewDivision>");
				sb.Append("<OldValue>" + _originalValues.NewDivision + "</OldValue>");
				sb.Append("<NewValue>" + NewDivision + "</NewValue>");
				sb.Append("</NewDivision>" + Environment.NewLine);
			}
			if (_originalValues.DateMoveEffected != DateMoveEffected)
			{
				sb.Append("\t<DateMoveEffected>");
				sb.Append("<OldValue>" + _originalValues.DateMoveEffected.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateMoveEffected.ToString() + "</NewValue>");
				sb.Append("</DateMoveEffected>" + Environment.NewLine);
			}
			if (_originalValues.Mileage != Mileage)
			{
				sb.Append("\t<Mileage>");
				sb.Append("<OldValue>" + _originalValues.Mileage.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Mileage.ToString() + "</NewValue>");
				sb.Append("</Mileage>" + Environment.NewLine);
			}
			if (_originalValues.RoundCount != RoundCount)
			{
				sb.Append("\t<RoundCount>");
				sb.Append("<OldValue>" + _originalValues.RoundCount.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + RoundCount.ToString() + "</NewValue>");
				sb.Append("</RoundCount>" + Environment.NewLine);
			}
			if (_originalValues.BatchTransferID != BatchTransferID)
			{
				sb.Append("\t<BatchTransferID>");
				sb.Append("<OldValue>" + _originalValues.BatchTransferID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + BatchTransferID.ToString() + "</NewValue>");
				sb.Append("</BatchTransferID>" + Environment.NewLine);
			}
			if (_originalValues.BatchForContactID != BatchForContactID)
			{
				sb.Append("\t<BatchForContactID>");
				sb.Append("<OldValue>" + _originalValues.BatchForContactID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + BatchForContactID.ToString() + "</NewValue>");
				sb.Append("</BatchForContactID>" + Environment.NewLine);
			}
			if (_originalValues.PinNumEntered != PinNumEntered)
			{
				sb.Append("\t<PinNumEntered>");
				sb.Append("<OldValue>" + _originalValues.PinNumEntered + "</OldValue>");
				sb.Append("<NewValue>" + PinNumEntered + "</NewValue>");
				sb.Append("</PinNumEntered>" + Environment.NewLine);
			}
			if (_originalValues.Inactive != Inactive)
			{
				sb.Append("\t<Inactive>");
				sb.Append("<OldValue>" + _originalValues.Inactive.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Inactive.ToString() + "</NewValue>");
				sb.Append("</Inactive>" + Environment.NewLine);
			}
			if (_originalValues.DateAdded != DateAdded)
			{
				sb.Append("\t<DateAdded>");
				sb.Append("<OldValue>" + _originalValues.DateAdded.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateAdded.ToString() + "</NewValue>");
				sb.Append("</DateAdded>" + Environment.NewLine);
			}
			if (_originalValues.AddedByUser != AddedByUser)
			{
				sb.Append("\t<AddedByUser>");
				sb.Append("<OldValue>" + _originalValues.AddedByUser + "</OldValue>");
				sb.Append("<NewValue>" + AddedByUser + "</NewValue>");
				sb.Append("</AddedByUser>" + Environment.NewLine);
			}
			if (_originalValues.DateUpdated != DateUpdated)
			{
				sb.Append("\t<DateUpdated>");
				sb.Append("<OldValue>" + _originalValues.DateUpdated.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateUpdated.ToString() + "</NewValue>");
				sb.Append("</DateUpdated>" + Environment.NewLine);
			}
			if (_originalValues.UpdatedByUser != UpdatedByUser)
			{
				sb.Append("\t<UpdatedByUser>");
				sb.Append("<OldValue>" + _originalValues.UpdatedByUser + "</OldValue>");
				sb.Append("<NewValue>" + UpdatedByUser + "</NewValue>");
				sb.Append("</UpdatedByUser>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<EquipmentMovement>" + Environment.NewLine);
				sb.Append("</EquipmentMovement>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Generates a new EquipmentMovement object from an XML description.
		/// </summary>
		/// <param name="xml">The string of XML to load from.</param>
		/// <returns>A new EquipmentMovement object.</returns>
		public static EquipmentMovement LoadFromXML(string xml)
		{
			EquipmentMovement item = new EquipmentMovement();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			bool propSet = false;
			doc.LoadXml(xml);

			foreach (System.Xml.XmlNode child in doc.ChildNodes[0].ChildNodes)
			{
				if (!propSet) { propSet = true; }
				switch (child.Name)
				{
					case "MovementID": item.MovementID = long.Parse(child.InnerText); break;
					case "AgencyID": item.AgencyID = long.Parse(child.InnerText); break;
					case "EquipID": item.EquipID = long.Parse(child.InnerText); break;
					case "ShortDesc": item.ShortDesc = child.InnerText; break;
					case "FullDesc": item.FullDesc = child.InnerText; break;

					case "OldContactID": item.OldContactID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "OldLocation": item.OldLocation = child.InnerText; break;
					case "OldTeamName": item.OldTeamName = child.InnerText; break;
					case "OldBureau": item.OldBureau = child.InnerText; break;
					case "OldDivision": item.OldDivision = child.InnerText; break;

					case "NewContactID": item.NewContactID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "NewLocation": item.NewLocation = child.InnerText; break;
					case "NewTeamName": item.NewTeamName = child.InnerText; break;
					case "NewBureau": item.NewBureau = child.InnerText; break;
					case "NewDivision": item.NewDivision = child.InnerText; break;

					case "DateMoveEffected": item.DateMoveEffected = DateTime.Parse(child.InnerText); break;
					case "Mileage": item.Mileage = (!String.IsNullOrEmpty(child.InnerText) ? decimal.Parse(child.InnerText) : (decimal?)null); break;
					case "RoundCount": item.RoundCount = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "BatchTransferID": item.BatchTransferID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "BatchForContactID": item.BatchForContactID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;

					case "PinNumEntered": item.PinNumEntered = child.InnerText; break;
					case "Inactive": item.Inactive = bool.Parse(child.InnerText); break;
					case "DateAdded": item.DateAdded = DateTime.Parse(child.InnerText); break;
					case "AddedByUser": item.AddedByUser = child.InnerText; break;
					case "DateUpdated": item.DateUpdated = DateTime.Parse(child.InnerText); break;

					case "UpdatedByUser": item.UpdatedByUser = child.InnerText; break;
					case "RecordStatus": item.RecordStatus = (RecordStatus)Enum.Parse(typeof(RecordStatus), child.InnerText, true); break;
					case "CheckedInGrid": item.CheckedInGrid = bool.Parse(child.InnerText); break;
					case "IsDisposable": item.IsDisposable = bool.Parse(child.InnerText); break;
					case "GridCustom_0": item.GridCustom_0 = child.InnerText; break;

					case "GridCustom_1": item.GridCustom_1 = child.InnerText; break;
					case "GridCustom_2": item.GridCustom_2 = child.InnerText; break;
					case "GridCustom_3": item.GridCustom_3 = child.InnerText; break;
					case "GridCustom_4": item.GridCustom_4 = child.InnerText; break;
					case "GridCustom_5": item.GridCustom_5 = child.InnerText; break;

					case "GridCustom_6": item.GridCustom_6 = child.InnerText; break;
					case "GridCustom_7": item.GridCustom_7 = child.InnerText; break;
					case "GridCustom_8": item.GridCustom_8 = child.InnerText; break;
					case "GridCustom_9": item.GridCustom_9 = child.InnerText; break;
				}
			}
			return (propSet ? item : null);
		}
		#endregion IClassGenLogXML Implementation
	}
	#endregion EquipmentMovement Class

	#region EquipmentMovementField Enum
	/// <summary>
	/// Enum for each field type in the element.
	/// </summary>
	public enum EquipmentMovementField
	{
		/// <summary>
		/// The MovementID element.
		/// </summary>
		MovementID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The EquipID element.
		/// </summary>
		EquipID,
		/// <summary>
		/// The ShortDesc element.
		/// </summary>
		ShortDesc,
		/// <summary>
		/// The FullDesc element.
		/// </summary>
		FullDesc,
		/// <summary>
		/// The OldContactID element.
		/// </summary>
		OldContactID,
		/// <summary>
		/// The OldLocation element.
		/// </summary>
		OldLocation,
		/// <summary>
		/// The OldTeamName element.
		/// </summary>
		OldTeamName,
		/// <summary>
		/// The OldBureau element.
		/// </summary>
		OldBureau,
		/// <summary>
		/// The OldDivision element.
		/// </summary>
		OldDivision,
		/// <summary>
		/// The NewContactID element.
		/// </summary>
		NewContactID,
		/// <summary>
		/// The NewLocation element.
		/// </summary>
		NewLocation,
		/// <summary>
		/// The NewTeamName element.
		/// </summary>
		NewTeamName,
		/// <summary>
		/// The NewBureau element.
		/// </summary>
		NewBureau,
		/// <summary>
		/// The NewDivision element.
		/// </summary>
		NewDivision,
		/// <summary>
		/// The DateMoveEffected element.
		/// </summary>
		DateMoveEffected,
		/// <summary>
		/// The Mileage element.
		/// </summary>
		Mileage,
		/// <summary>
		/// The RoundCount element.
		/// </summary>
		RoundCount,
		/// <summary>
		/// The BatchTransferID element.
		/// </summary>
		BatchTransferID,
		/// <summary>
		/// The BatchForContactID element.
		/// </summary>
		BatchForContactID,
		/// <summary>
		/// The PinNumEntered element.
		/// </summary>
		PinNumEntered,
		/// <summary>
		/// The Inactive element.
		/// </summary>
		Inactive,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The AddedByUser element.
		/// </summary>
		AddedByUser,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
		/// <summary>
		/// The UpdatedByUser element.
		/// </summary>
		UpdatedByUser,
		/// <summary>
		/// The Rowversion element.
		/// </summary>
		Rowversion,
	}
	#endregion EquipmentMovementField Enum

	#region EquipmentMovementMinMaxDateField Enum
	/// <summary>
	/// Enum for each DateTime field in the element that can have a minimum or maximum.
	/// </summary>
	public enum EquipmentMovementMinMaxDateField
	{
		/// <summary>
		/// The DateMoveEffected element.
		/// </summary>
		DateMoveEffected,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
	}
	#endregion EquipmentMovementMinMaxDateField Enum

	#region EquipmentMovementMinMaxNumberField Enum
	/// <summary>
	/// Enum for each numerical field in the element that can have a minimum or maximum.
	/// </summary>
	public enum EquipmentMovementMinMaxNumberField
	{
		/// <summary>
		/// The MovementID element.
		/// </summary>
		MovementID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The EquipID element.
		/// </summary>
		EquipID,
		/// <summary>
		/// The OldContactID element.
		/// </summary>
		OldContactID,
		/// <summary>
		/// The NewContactID element.
		/// </summary>
		NewContactID,
		/// <summary>
		/// The Mileage element.
		/// </summary>
		Mileage,
		/// <summary>
		/// The RoundCount element.
		/// </summary>
		RoundCount,
		/// <summary>
		/// The BatchTransferID element.
		/// </summary>
		BatchTransferID,
		/// <summary>
		/// The BatchForContactID element.
		/// </summary>
		BatchForContactID,
	}
	#endregion EquipmentMovementMinMaxNumberField Enum

	#region EquipmentMovement Collection
	/// <summary>
	/// A collection for EquipmentMovement objects.
	/// </summary>
	/// <remarks>
	/// This collection class is the primary way to work with EquipmentMovement objects.
	/// Most of the functionality is in this class, including the methods for creating EquipmentMovement objects from a database.
	/// </remarks>
	[Serializable]
	public partial class EquipmentMovementCollection : ClassGenBindingList<EquipmentMovement, long>, IDisposable, 
		IClassGenLogXMLCollection, IClassGenClassGenerated, IClassGenClassUpdatable
	{
		#region Constructors
		/// <summary>
		/// Create an empty collection.
		/// </summary>
		public EquipmentMovementCollection() 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "MovementID";

			// Create the foreign key and parent key collections
			this.ForeignKeyFields.Add("EquipID");

			_rules = new ClassGenRules(this);			// Set the base collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		public EquipmentMovementCollection(string whereClause) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "MovementID";

			// Create the foreign key and parent key collections
			this.ForeignKeyFields.Add("EquipID");

			_rules = new ClassGenRules(this);			// Set the base collection
			this.GetFromDB(whereClause);			// Populate the collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		/// <param name="getChildren">True if the collection should populate all child collections as well.</param>
		public EquipmentMovementCollection(string whereClause, bool getChildren) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "MovementID";

			// Create the foreign key and parent key collections
			this.ForeignKeyFields.Add("EquipID");

			_rules = new ClassGenRules(this);				// Set the base collection
			this.GetFromDB(whereClause, getChildren);		// Populate the collection
		}
		#endregion Constructors

		#region Public Properties
		/// <summary>
		/// Get a single record from the collection (not from the DB) that matches the ID.
		/// </summary>
		/// <param name="movementID">A key field used to find the correct record.</param>
		/// <returns>The EquipmentMovement object that matches the given value.</returns>
		public EquipmentMovement Get(long movementID)
		{
			EquipmentMovement val = null;
			if (KeyedCollection.ContainsKey(movementID)) { val = KeyedCollection[movementID]; }
			return val;
		}

		// Override the methods needed to do the collection thing
		#region Common Methods Override

		/// <summary>
		/// Get all records in the collection (not from the DB) that match the given value for the EquipID property.
		/// </summary>
		/// <param name="equipID">The value to match.</param>
		/// <returns>A EquipmentMovementCollection of matching records.</returns>
		public EquipmentMovementCollection GetByEquipID(long equipID)
		{
			EquipmentMovementCollection coll = new EquipmentMovementCollection();
			if (FKKeyedCollection.ContainsKey("EquipID"))
			{
				List<EquipmentMovement> list = new List<EquipmentMovement>();
				if (FKKeyedCollection["EquipID"].ContainsKey(equipID))
				{
					list = FKKeyedCollection["EquipID"][equipID];
				}
				foreach (EquipmentMovement item in list)
				{
					coll.Add(item);
				}
			}
			return coll;
		}


		/// <summary>
		/// Get the next new id from the localized collection as a long.
		/// </summary>
		/// <returns>The next ID in the negative sequence of numbers.</returns>
		public long GetNextNewID()
		{
			long rtv = 0;

			// Get the next number in sequence
			for (long i = -9223372036854775808; i <= 0; i++)
			{
				if (!KeyedCollection.ContainsKey(i))
				{
					rtv = i;
					break;
				}
			}

			return rtv;		// Return the value
		}
		#endregion Common Methods Override


		/// <summary>
		/// A collection of all the active records from the collection (the ones without a status of "Deleted").
		/// </summary>
		public new EquipmentMovementCollection ActiveRecords
		{
			get
			{
				return (EquipmentMovementCollection)base.ActiveRecords;
			}
		}

		/// <summary>
		/// A collection of all the deleted records from the collection (the ones with a status of "Deleted").
		/// </summary>
		public EquipmentMovementCollection DeletedRecords
		{
			get
			{
				return (EquipmentMovementCollection)GetRecordsBasedOnStatus(RecordStatus.Deleted);
			}
		}

		/// <summary>
		/// A collection of all the modified records from the collection (the ones with a status of "Modified").
		/// </summary>
		public EquipmentMovementCollection ModifiedRecords
		{
			get
			{
				return (EquipmentMovementCollection)GetRecordsBasedOnStatus(RecordStatus.Modified);
			}
		}

		/// <summary>
		/// A collection of all the new records from the collection (the ones with a status of "New").
		/// </summary>
		public EquipmentMovementCollection NewRecords
		{
			get
			{
				return (EquipmentMovementCollection)GetRecordsBasedOnStatus(RecordStatus.New);
			}
		}

		#endregion Public Properties

		#region Collection Get Methods
		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(ref long dbCount)
		{
			dbCount = EquipmentMovementCollection.GetCountFromDB();
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = EquipmentMovementCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = EquipmentMovementCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Get all items from the database.
		/// Gets and populates all children objects as well.
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDBWithChildren()
		{
			this.GetCollectionConfig.WhereClause = string.Empty;
			this.GetCollectionConfig.GetChildren = true;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB() 
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			SqlParameter param = null;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			
			// Reset the IsLoaded Variable before we load the collection
			this._isLoaded = false;
			
			// See if we're supposed to get this thing paged
			if (this.GetCollectionConfig.PageRecords)
			{
				_backgroundWorker = new BackgroundWorker();
				_backgroundWorker.WorkerReportsProgress = true;
				_backgroundWorker.WorkerSupportsCancellation = true;
				_backgroundWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(_backgroundWorker_RunWorkerCompleted);
				_backgroundWorker.ProgressChanged += new ProgressChangedEventHandler(_backgroundWorker_ProgressChanged);
				_backgroundWorker.DoWork += new DoWorkEventHandler(_backgroundWorker_DoWork);
				_backgroundWorker.RunWorkerAsync();
				return errors;
			}

			try
			{
				sql = "SELECT " + (this.GetCollectionConfig.TopRecords > -1 ? "TOP " + this.GetCollectionConfig.TopRecords.ToString() + " " : "") +
					" [EM].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tEquipmentMovement [EM] " + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? "WHERE " + this.GetCollectionConfig.WhereClause : "") + 
					"";
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause)
				{
					sql += (!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " AND" : " WHERE") +
						" dtUpdated > @pdtUpdated";
					param = new SqlParameter("@pdtUpdated", SqlDbType.DateTime);
					param.Value = _dateTimeObjectPopulated;
				}
				if (this.GetCollectionConfig.TopRecords > -1 &&
					!String.IsNullOrEmpty(this.GetCollectionConfig.TopSort))
				{
					sql += " ORDER BY " + this.GetCollectionConfig.TopSort;
				}
				cmd = new SqlCommand(sql);
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { cmd.Parameters.Add(param); }

				this.OnMasterPopulate("EquipmentMovement", "Retrieving Full List Of EquipmentMovements", string.Empty);
				dt = DAL.SQLExecDataTable(cmd);

				int count = 0;
				if (!this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { this.Clear(); }
				foreach (DataRow row in dt.Rows)
				{
					// Enumerate through the fields and set up the object
					if (count == 0)
					{
						if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
						{
							_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
						}
						else
						{
							_dateTimeObjectPopulated = DateTime.Now;
						}
						DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
					}

					this.OnDetailPopulate("EquipmentMovement", 
						"Populating EquipmentMovement: " + (++count).ToString("###,###,###,##0") + " of " + dt.Rows.Count.ToString("###,###,###,##0"), 
						string.Empty, 
						dt.Rows.Count, 
						count);

					#region Fields
					EquipmentMovement item = new EquipmentMovement();
					item.Get(row);

					// Check to make sure this collection doesn't already contain this item
					if (this.Contains(item.MovementID)) { this.Remove(item.MovementID); }

					this.Add(item);
					#endregion Fields
				}
				
				dt.Dispose();		// Dispose of the datatable

				this._isLoaded = true;				// Set the IsLoaded Property
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get all items from the database based on the passed EquipID.
		/// </summary>
		/// <param name="equipID">The EquipID to hunt for.</param>
		public void GetFromDBByEquipID(long equipID) 
		{
			GetFromDB("iEquipID = " + equipID, true);
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <param name="whereClause">The SQL Where clause to use to get the total count.</param>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB(string whereClause)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			int rtv = 0;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT COUNT(*) " +
						"FROM tEquipmentMovement " +
						(!String.IsNullOrEmpty(whereClause) ? "WHERE " + whereClause : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count > 0 &&
					dt.Rows[0][0] != DBNull.Value)
				{
					rtv = (int)dt.Rows[0][0];
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB()
		{
			return GetCountFromDB(string.Empty);		// Return the base method
		}
		#endregion Collection Get Methods

		#region Collection Put Methods
		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		public ClassGenExceptionCollection AddUpdateAll()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdateAll(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		/// <param name="oConn">The connection object</param>
		/// <param name="oTrans">The transaction object</param>
		public ClassGenExceptionCollection AddUpdateAll(SqlConnection oConn, SqlTransaction oTrans)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			if (this.Count == 0) { return errors; }

			ClassGenExceptionCollection itemErrors = new ClassGenExceptionCollection();
			int addUpdateAffected = 0, deleteAffected = 0;

			try
			{
				// Delete Method
				for (int i = this.Count - 1; i >= 0; i--)
				{
					this.OnDetailDelete("EquipmentMovement",
						"Deleting EquipmentMovement: " + (this.Count - i + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						this.Count - i + 1);
					EquipmentMovement item = this[i];
					if (item.RecordStatus == RecordStatus.Deleted)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0)
						{
							deleteAffected++;
							this.RemoveAt(i);		// Remove the item from the collection
						}
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = i + 1;
								err.RecordKey = item.MovementID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
				}

				// Update Method
				int count = 0;
				foreach (EquipmentMovement item in this)
				{
					this.OnDetailUpdate("EquipmentMovement",
						"Updating EquipmentMovement: " + (count + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						count + 1);
					if (item.RecordStatus == RecordStatus.Modified ||
						item.RecordStatus == RecordStatus.New)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0) { addUpdateAffected++; }
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = count + 1;
								err.RecordKey = item.MovementID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
					count++;
				}


				// Add how many records were affected by the update
				errors.Add(new ClassGenException(addUpdateAffected.ToString("###,##0") +
					" Records affected by the update.", ClassGenExceptionIconType.System, addUpdateAffected.ToString()));
				errors[errors.Count - 1].Number = addUpdateAffected;
				errors.Add(new ClassGenException(deleteAffected.ToString("###,##0") +
					" Records affected by the delete.", ClassGenExceptionIconType.System, deleteAffected.ToString()));
				errors[errors.Count - 1].Number = deleteAffected;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}
		#endregion Collection Put Methods

		#region Clone/Copy Methods
		/// <summary>
		/// Create an exact copy of all the elements in the collection.
		/// </summary>
		/// <returns>The cloned collection.</returns>
		public new EquipmentMovementCollection Clone()
		{
			EquipmentMovementCollection newColl = new EquipmentMovementCollection();
			newColl.AddRange(base.Clone());
			return newColl;
		}

		/// <summary>
		/// Copy the objects in the collection, creating a new ID for each one of them in the process.
		/// </summary>
		/// <returns>A new EquipmentMovementCollection.</returns>
		public new EquipmentMovementCollection CopyWithNewIDs()
		{
			return (EquipmentMovementCollection)base.CopyWithNewIDs();
		}
		#endregion Clone/Copy Methods

		#region GetDistinct Method(s)
		/// <summary>
		/// Get a distinct list of values based on the elements in the collection.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public List<string> GetDistinctFromCollection(LEAD.EquipmentMovementField field)
		{
			if (this.Count == 0) { return new List<string>(); }
			SortedList<string, string> vals = new SortedList<string, string>();

			// Add the elements
			switch (field)
			{
				case LEAD.EquipmentMovementField.MovementID:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.MovementID.ToString()) && 
							!vals.ContainsKey(item.MovementID.ToString().Trim())) { vals.Add(item.MovementID.ToString().Trim(), item.MovementID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.AgencyID:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.AgencyID.ToString()) && 
							!vals.ContainsKey(item.AgencyID.ToString().Trim())) { vals.Add(item.AgencyID.ToString().Trim(), item.AgencyID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.EquipID:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.EquipID.ToString()) && 
							!vals.ContainsKey(item.EquipID.ToString().Trim())) { vals.Add(item.EquipID.ToString().Trim(), item.EquipID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.ShortDesc:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.ShortDesc) && 
							!vals.ContainsKey(item.ShortDesc.Trim())) { vals.Add(item.ShortDesc.Trim(), item.ShortDesc.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.FullDesc:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.FullDesc) && 
							!vals.ContainsKey(item.FullDesc.Trim())) { vals.Add(item.FullDesc.Trim(), item.FullDesc.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.OldContactID:
					foreach (EquipmentMovement item in this)
					{
						if (item.OldContactID != null &&
							!String.IsNullOrEmpty(item.OldContactID.ToString()) && 
							!vals.ContainsKey(item.OldContactID.ToString().Trim())) { vals.Add(item.OldContactID.ToString().Trim(), item.OldContactID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.OldLocation:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.OldLocation) && 
							!vals.ContainsKey(item.OldLocation.Trim())) { vals.Add(item.OldLocation.Trim(), item.OldLocation.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.OldTeamName:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.OldTeamName) && 
							!vals.ContainsKey(item.OldTeamName.Trim())) { vals.Add(item.OldTeamName.Trim(), item.OldTeamName.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.OldBureau:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.OldBureau) && 
							!vals.ContainsKey(item.OldBureau.Trim())) { vals.Add(item.OldBureau.Trim(), item.OldBureau.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.OldDivision:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.OldDivision) && 
							!vals.ContainsKey(item.OldDivision.Trim())) { vals.Add(item.OldDivision.Trim(), item.OldDivision.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.NewContactID:
					foreach (EquipmentMovement item in this)
					{
						if (item.NewContactID != null &&
							!String.IsNullOrEmpty(item.NewContactID.ToString()) && 
							!vals.ContainsKey(item.NewContactID.ToString().Trim())) { vals.Add(item.NewContactID.ToString().Trim(), item.NewContactID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.NewLocation:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.NewLocation) && 
							!vals.ContainsKey(item.NewLocation.Trim())) { vals.Add(item.NewLocation.Trim(), item.NewLocation.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.NewTeamName:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.NewTeamName) && 
							!vals.ContainsKey(item.NewTeamName.Trim())) { vals.Add(item.NewTeamName.Trim(), item.NewTeamName.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.NewBureau:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.NewBureau) && 
							!vals.ContainsKey(item.NewBureau.Trim())) { vals.Add(item.NewBureau.Trim(), item.NewBureau.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.NewDivision:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.NewDivision) && 
							!vals.ContainsKey(item.NewDivision.Trim())) { vals.Add(item.NewDivision.Trim(), item.NewDivision.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.Mileage:
					foreach (EquipmentMovement item in this)
					{
						if (item.Mileage != null &&
							!String.IsNullOrEmpty(item.Mileage.ToString()) && 
							!vals.ContainsKey(item.Mileage.ToString().Trim())) { vals.Add(item.Mileage.ToString().Trim(), item.Mileage.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.RoundCount:
					foreach (EquipmentMovement item in this)
					{
						if (item.RoundCount != null &&
							!String.IsNullOrEmpty(item.RoundCount.ToString()) && 
							!vals.ContainsKey(item.RoundCount.ToString().Trim())) { vals.Add(item.RoundCount.ToString().Trim(), item.RoundCount.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.BatchTransferID:
					foreach (EquipmentMovement item in this)
					{
						if (item.BatchTransferID != null &&
							!String.IsNullOrEmpty(item.BatchTransferID.ToString()) && 
							!vals.ContainsKey(item.BatchTransferID.ToString().Trim())) { vals.Add(item.BatchTransferID.ToString().Trim(), item.BatchTransferID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.BatchForContactID:
					foreach (EquipmentMovement item in this)
					{
						if (item.BatchForContactID != null &&
							!String.IsNullOrEmpty(item.BatchForContactID.ToString()) && 
							!vals.ContainsKey(item.BatchForContactID.ToString().Trim())) { vals.Add(item.BatchForContactID.ToString().Trim(), item.BatchForContactID.ToString().Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.PinNumEntered:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.PinNumEntered) && 
							!vals.ContainsKey(item.PinNumEntered.Trim())) { vals.Add(item.PinNumEntered.Trim(), item.PinNumEntered.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.AddedByUser:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.AddedByUser) && 
							!vals.ContainsKey(item.AddedByUser.Trim())) { vals.Add(item.AddedByUser.Trim(), item.AddedByUser.Trim()); }
					}
					break;
				case LEAD.EquipmentMovementField.UpdatedByUser:
					foreach (EquipmentMovement item in this)
					{
						if (!String.IsNullOrEmpty(item.UpdatedByUser) && 
							!vals.ContainsKey(item.UpdatedByUser.Trim())) { vals.Add(item.UpdatedByUser.Trim(), item.UpdatedByUser.Trim()); }
					}
					break;
			}

			List<string> rtv = new List<string>();
			rtv.AddRange(vals.Keys);
			return rtv;
		}
		#endregion GetDistinct Method(s)

		#region Random Methods
		#region GetLocalChildren Methods
		#endregion GetLocalChildren Methods

		/// <summary>
		/// A collection of all broken rules associated with the collection.
		/// (Includes all the child classes validation as well.)
		/// </summary>
		public ClassGenExceptionCollection BrokenRules
		{
			get 
			{
				ClassGenExceptionCollection exceptions = new ClassGenExceptionCollection();
				foreach (EquipmentMovement item in this.ActiveRecords)
				{
					ClassGenExceptionCollection exCollection = item.BrokenRules;
					if (exCollection.Count > 0)
					{
						foreach (ClassGenException ex in exCollection)
						{
							ex.RecordIndex = (this.IndexOf(item)) + 1;
							ex.RecordKey = item.MovementID.ToString();
						}
						exceptions.AddRange(exCollection);
					}
				}

				exceptions.AddRange(_rules.BrokenRules);

				return exceptions;
			}
		}

		/// <summary>
		/// Gets all the records that don't have a deleted status in the collection
		/// </summary>
		/// <returns>A EquipmentMovementCollection of current records.</returns>
		public EquipmentMovementCollection GetCurrent()
		{
			return this.ActiveRecords;
		}

		/// <summary>
		/// Checks to see if the element exists in the collection.
		/// </summary>
		/// <param name="movementID">A key field used to find the correct record.</param>
		/// <returns>A boolean indicating whether the element exists in the collection.</returns>
		public bool Exists(long movementID)
		{
			return (this.Exists(new Predicate<EquipmentMovement>(delegate (EquipmentMovement obj) 
				{ return obj.MovementID == movementID; })));
		}

		/// <summary>
		/// Removes the element from the collection based on the argument passed.
		/// </summary>
		/// <param name="movementID">A key field used to find the correct record.</param>
		public void Remove(long movementID)
		{
			for (int i = this.Count - 1; i >= 0; i--)
			{
				if (this[i].MovementID == movementID)
				{
					this.RemoveAt(i);
				}
			}
		}
		
		#region Refresh Collection Methods
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		public ClassGenExceptionCollection RefreshCollection(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = true;
				errors.AddRange(this.GetFromDB());
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshCollection()
		{
			return RefreshCollection((int)_refreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (_isLoaded)
			{
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
				errors.AddRange(this.GetFromDB());	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}
		#endregion Refresh Collection Methods
		#endregion Random Methods

		#region DataTable Methods
		/// <summary>
		/// Converts the object to a datatable. 
		/// Does not include deleted records. 
		/// </summary>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable()
		{
			return ToDataTable(false);
		}

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="includeDeleted">Whether to include deleted records in the datatable.</param>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable(bool includeDeleted)
		{
			// Generate the datatable object first
			DataTable dt = this.ToEmptyDataTable();

			// Now, go through and build the data table with actual rows
			int count = 0;
			foreach (EquipmentMovement item in this)
			{
				if (item.RecordStatus == RecordStatus.Current ||
					item.RecordStatus == RecordStatus.Modified ||
					item.RecordStatus == RecordStatus.New ||
					(item.RecordStatus == RecordStatus.Deleted && includeDeleted))
				{
					dt.Rows.Add(item.ToDataRow(dt));
					this.OnDataTablePopulate(string.Empty, string.Empty, string.Empty, this.Count, count + 1);
				}
				count++;
			}
			
			// Return the data table
			return dt;
		}

		/// <summary>
		/// Creates an empty datatable with the object's structure.
		/// </summary>
		/// <returns>An empty DataTable with the object's structure.</returns>
		public DataTable ToEmptyDataTable()
		{
			// Return the data table
			return EmptyDataTableWithIL<EquipmentMovement>();
		}

		/// <summary>
		/// Event Handler to deal with populating the information
		/// </summary>
		public delegate void DataTablePopulateEventHandler(object sender, PopulateUpdateDelete_EventArgs e);
		/// <summary>
		/// Occurs when this class populates a DataTable with a row of its data.
		/// </summary>
		public event DataTablePopulateEventHandler DataTablePopulate;
		/// <summary>
		/// Calls the DataTable.Populate event.
		/// </summary>
		/// <param name="name">The name of the record in the DataRow.</param>
		/// <param name="description">A description of the record.</param>
		/// <param name="errors">The names of any exceptions that cropped up.</param>
		/// <param name="totalCount">The total number of rows in the DataTable.</param>
		/// <param name="currentIndex">The current Index the iterator has reached.</param>
		protected void OnDataTablePopulate(string name, string description, string errors, int totalCount, int currentIndex)
		{
			if (DataTablePopulate != null)
			{
				PopulateUpdateDelete_EventArgs e = new PopulateUpdateDelete_EventArgs(name, description, errors, totalCount, currentIndex);
				DataTablePopulate(this, e);
			}
		}
		#endregion DataTable Methods

		#region Static Methods
		/// <summary>
		/// Delete records from the table based on a given criteria.
		/// </summary>
		/// <remarks>
		/// The Where clause cannot be empty.
		/// To delete all the records from the table, use the LEADBaseObject.DeleteAll() method, instead.
		/// </remarks>
		/// <param name="whereClause">The SQL where clause to use on the system.</param>
		/// <param name="errors">A ClassGenExceptionCollection to add any exception reports to.</param>
		/// <returns>The number of records affected by the delete.</returns>
		public static int Delete(string whereClause, ref ClassGenExceptionCollection errors)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			int recsAffected = 0;

			if (String.IsNullOrEmpty(whereClause))
			{
				errors.Add(new ClassGenException("The where clause cannot be empty.  " + 
					"If you want to delete all records in the table, please call " + 
					"the LEADBaseObject.DeleteAll() method.", ClassGenExceptionIconType.Critical));
				return -1;
			}

			try
			{
				sql = "DELETE FROM tEquipmentMovement " +
					"WHERE " + whereClause.Trim();
				cmd = new SqlCommand(sql);
				recsAffected = DAL.SQLExecNonQuery(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return recsAffected;
		}
		#endregion Static Methods

		#region Json.NET Serialization Methods
		/// <summary>
		/// Attempt to serialize the EquipmentMovementCollection object to the server
		/// </summary>
		/// <param name="obj">The EquipmentMovementCollection object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(EquipmentMovementCollection obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the EquipmentMovementCollection object from the server
		/// </summary>
		/// <param name="obj">The EquipmentMovementCollection object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A EquipmentMovementCollection object containing the return from the method</returns>
		public static EquipmentMovementCollection DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			EquipmentMovementCollection rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<EquipmentMovementCollection>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization Methods

		#region Threaded Get
		private void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			_asyncConnection = DAL.OpenConnection();

			// Create the temp table on the connection
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			sql = 
				"IF object_id('tempdb..#EquipmentMovement') IS NOT NULL  DROP TABLE #EquipmentMovement; " + 
					"CREATE TABLE #EquipmentMovement (iMovementID bigint, iItemIndex INT IDENTITY(1,1) PRIMARY KEY CLUSTERED);  " + 
					"INSERT INTO #EquipmentMovement (iMovementID) SELECT iMovementID FROM tEquipmentMovement" + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " WHERE " + this.GetCollectionConfig.WhereClause : "") + ";  " + 
					"SELECT COUNT(*) AS iCount FROM #EquipmentMovement "; 
			cmd = new SqlCommand(sql);
			dt = DAL.SQLExecDataTable(cmd, _asyncConnection);

			int totalCount = int.Parse(dt.Rows[0][0].ToString());		// Get the count of records in the table

			BackgroundWorker worker = sender as BackgroundWorker;
			GetAsync(worker, e, _asyncConnection, totalCount, this.GetCollectionConfig.PageSize);		// Start the work
		}

		private void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
		{
			if (e.UserState != null)
			{
				EquipmentMovementCollection_GetAsyncObject obj = (EquipmentMovementCollection_GetAsyncObject)e.UserState;
				this.OnGetThreadedProgress(obj.CurrentIndex, obj.TotalCount, obj.EquipmentMovementCollection);
			}
		}

		private void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
		{
			DAL.CloseConnection(_asyncConnection);		// Close the connection
			this.OnGetThreadedCompleted();
			this.IsLoaded = true;		// Set the IsLoaded flag
		}

		/// <summary>
		/// The method that actually does the async Get
		/// </summary>
		private void GetAsync(BackgroundWorker worker, 
			DoWorkEventArgs e, 
			SqlConnection oConn, 
			int totalCount,
			int pageSize)
		{
			int currentIndex = 0, pageStart = 0, pageEnd = 0;
			decimal totalMilleseconds = 0;

			DateTime lastGetStart = DateTime.Now;

			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			EquipmentMovementCollection coll = new EquipmentMovementCollection();
			EquipmentMovement item = new EquipmentMovement();

			if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be

			// Run the method as long as we have records
			while (currentIndex < totalCount)
			{
				sql = string.Empty;  cmd = null;  dt = new DataTable();

				pageStart = currentIndex + 1;
				pageEnd = pageStart - 1 + pageSize;

				sql = "SELECT [EM].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tEquipmentMovement [EM] " + 
					"INNER JOIN #EquipmentMovement TEMP ON [EM].[iMovementID] = [TEMP].[iMovementID] " +
					"WHERE TEMP.iItemIndex BETWEEN @piStart AND @piEnd " +
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piStart", SqlDbType.Int).Value = pageStart;
				cmd.Parameters.Add("@piEnd", SqlDbType.Int).Value = pageEnd;
				lastGetStart = DateTime.Now;
				dt = DAL.SQLExecDataTable(cmd, oConn);

				// Populate the local EquipmentMovement collection
				coll = new EquipmentMovementCollection();
				foreach (DataRow row in dt.Rows)
				{
					item = new EquipmentMovement();
					item.Get(row);
					coll.Add(item);
				}

				currentIndex += dt.Rows.Count;		// The current Index count of where we are in the set

				// Report the progress
				EquipmentMovementCollection_GetAsyncObject obj = new EquipmentMovementCollection_GetAsyncObject(currentIndex,
					totalCount, 
					coll);
				worker.ReportProgress((int)(currentIndex / totalCount), obj);

				// Reset the page size based on the number of records pulled back
				totalMilleseconds = (decimal)((TimeSpan)DateTime.Now.Subtract(lastGetStart)).TotalMilliseconds;
				if ((totalMilleseconds < 300 ||
					totalMilleseconds > 700) &&
					totalMilleseconds > 0)
				{
					// Redo the math on the page size to get it within 500 milleseconds
					pageSize = ((500 * pageSize) / (int)totalMilleseconds);
				}

				if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be
			}
		}

		// Events to raise as part of population thread
		/// <summary>
		/// The delegate for the GetThreadedProgress event.
		/// </summary>
		public delegate void GetThreadedProgressEventHandler(object sender, EquipmentMovement_GetCollection_EventArgs e);
		/// <summary>
		/// Occurs when the main thread calls an asynchronous thread to check on its progress getting data from a database.
		/// </summary>
		public event GetThreadedProgressEventHandler GetThreadedProgress;
		/// <summary>
		/// Calls the GetThreadedProgress event.
		/// </summary>
		public void OnGetThreadedProgress(int currentIndex, int totalCount, EquipmentMovementCollection coll)
		{
			if (GetThreadedProgress != null)
			{
				// Add the items found in the collection to the current set
				foreach (EquipmentMovement a in coll)
				{
					this.Add(a);		// Add the EquipmentMovement
				}

				EquipmentMovement_GetCollection_EventArgs e = new EquipmentMovement_GetCollection_EventArgs(currentIndex, totalCount, coll);
				GetThreadedProgress(this, e);
			}
		}

		/// <summary>
		/// The delegate for the GetThreadedCompleted event.
		/// </summary>
		public delegate void GetThreadedCompletedEventHandler(object sender, EventArgs e);
		/// <summary>
		/// Occurs when an asynchronous thread finishes getting data from a database.
		/// </summary>
		public event GetThreadedCompletedEventHandler GetThreadedCompleted;
		/// <summary>
		/// Calls the GetThreadedCompleted event.
		/// </summary>
		public void OnGetThreadedCompleted()
		{
			if (GetThreadedCompleted != null)
			{
				EventArgs e = new EventArgs();
				GetThreadedCompleted(this, e);
			}
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(int pageSize, string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		public void GetFromDBThreaded(int pageSize)
		{
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		public void GetFromDBThreaded()
		{
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Stop the Background worker from getting anymore
		/// </summary>
		public void GetFromDBThreadedStop()
		{
			_backgroundWorker.CancelAsync();
		}
		#endregion Threaded Get

		#region IClassGenLogXMLCollection Implementation
		/// <summary>
		/// Get the collection as an XML Stream with all base model properties included.
		/// </summary>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the collection as an XML Stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base model properties.</param>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();
			foreach (EquipmentMovement item in this)
			{
				sb.Append(item.GetAsXML(includeBaseProperties));
			}

			// Include the header/footer for the stream
			sb.Insert(0, "<EquipmentMovementCollection>" + Environment.NewLine);
			sb.Append("</EquipmentMovementCollection>" + Environment.NewLine);

			return sb.ToString();
		}

		/// <summary>
		/// Get the read elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <param name="newElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "new".</param>
		/// <param name="readElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "read".</param>
		/// <param name="changedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "changed".</param>
		/// <param name="deletedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "deleted".</param>
		public void GetXMLChanges(ref List<string> newElements,
			ref List<string> readElements,
			ref List<string> changedElements,
			ref List<string> deletedElements)
		{
			StringBuilder sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);

			// Clear out the collections
			newElements = new List<string>();
			readElements = new List<string>();
			changedElements = new List<string>();
			deletedElements = new List<string>();

			// Go through the records and take care of them
			foreach (EquipmentMovement item in this)
			{
				switch (item.RecordStatus)
				{
					case RecordStatus.Current:
						// Don't forget the to string
						sbRead.Append("<EquipmentMovement>" + Environment.NewLine);
						sbRead.Append("\t<MovementID>" + item.MovementID.ToString() + "</MovementID>" + Environment.NewLine);
						sbRead.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbRead.Append("\t<EquipID>" + item.EquipID.ToString() + "</EquipID>" + Environment.NewLine);
						sbRead.Append("\t<ShortDesc>" + (item.ShortDesc != null ? item.ShortDesc : "NULL") + "</ShortDesc>" + Environment.NewLine);
						sbRead.Append("\t<FullDesc>" + (item.FullDesc != null ? item.FullDesc : "NULL") + "</FullDesc>" + Environment.NewLine);
						sbRead.Append("</EquipmentMovement>" + Environment.NewLine);

						if (sbRead.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging) 
						{ 
							readElements.Add(sbRead.ToString());
							sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader); 
						}
						break;

					case RecordStatus.Deleted:
						sbDeleted.Append("<EquipmentMovement>" + Environment.NewLine);
						sbDeleted.Append("\t<MovementID>" + item.MovementID.ToString() + "</MovementID>" + Environment.NewLine);
						sbDeleted.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbDeleted.Append("\t<EquipID>" + item.EquipID.ToString() + "</EquipID>" + Environment.NewLine);
						sbDeleted.Append("\t<ShortDesc>" + (item.ShortDesc != null ? item.ShortDesc : "NULL") + "</ShortDesc>" + Environment.NewLine);
						sbDeleted.Append("\t<FullDesc>" + (item.FullDesc != null ? item.FullDesc : "NULL") + "</FullDesc>" + Environment.NewLine);
						sbDeleted.Append("</EquipmentMovement>" + Environment.NewLine);

						if (sbDeleted.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							deletedElements.Add(sbDeleted.ToString());
							sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.New:
						sbNew.Append("<EquipmentMovement>" + Environment.NewLine);
						sbNew.Append("\t<MovementID>" + item.MovementID.ToString() + "</MovementID>" + Environment.NewLine);
						sbNew.Append("\t<AgencyID>" + item.AgencyID.ToString() + "</AgencyID>" + Environment.NewLine);
						sbNew.Append("\t<EquipID>" + item.EquipID.ToString() + "</EquipID>" + Environment.NewLine);
						sbNew.Append("\t<ShortDesc>" + (item.ShortDesc != null ? item.ShortDesc : "NULL") + "</ShortDesc>" + Environment.NewLine);
						sbNew.Append("\t<FullDesc>" + (item.FullDesc != null ? item.FullDesc : "NULL") + "</FullDesc>" + Environment.NewLine);
						sbNew.Append("</EquipmentMovement>" + Environment.NewLine);

						if (sbNew.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							newElements.Add(sbNew.ToString());
							sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.Modified:
						sbChanged.Append(item.GetChangedElementsAsXML() + Environment.NewLine);

						if (sbChanged.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							changedElements.Add(sbChanged.ToString());
							sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

				}
			}

			// Add the final strings to the list
			newElements.Add(sbNew.ToString());
			readElements.Add(sbRead.ToString());
			deletedElements.Add(sbDeleted.ToString());
			changedElements.Add(sbChanged.ToString());
		}

		/// <summary>
		/// Load the XML into a collection based on what's passed in.
		/// </summary>
		/// <param name="xml">The XML to process.</param>
		/// <returns>The completed EquipmentMovementCollection object.</returns>
		public static EquipmentMovementCollection LoadFromXML(string xml)
		{
			EquipmentMovementCollection coll = new EquipmentMovementCollection();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.LoadXml(xml);
			// <EquipmentMovementCollection>
			foreach (System.Xml.XmlNode nodeMain in doc.ChildNodes)
			{
				// <EquipmentMovement>
				foreach (System.Xml.XmlNode node in nodeMain.ChildNodes)
				{
					// These are the elements <DetailGUID>, <UserName>, etc.
					EquipmentMovement item = EquipmentMovement.LoadFromXML(node.OuterXml);
					if (item != null) { coll.Add(item); }
				}
			}
			return coll;
		}
		#endregion IClassGenLogXMLCollection Implementation
		
		#region Mathematical Functions

		/// <summary>
		/// The earliest DateMoveEffected present in the collection.
		/// </summary>
		public DateTime? MinOfDateMoveEffected
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateMoveEffected; }
				else { return null; }
		
				foreach (EquipmentMovement item in this)
				{
					if (item.DateMoveEffected < rtv) { rtv = item.DateMoveEffected; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateMoveEffected present in the collection.
		/// </summary>
		public DateTime? MaxOfDateMoveEffected
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateMoveEffected; }
				else { return null; }
		
				foreach (EquipmentMovement item in this)
				{
					if (item.DateMoveEffected > rtv) { rtv = item.DateMoveEffected; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The number of records that have a Mileage value.
		/// </summary>
		public decimal CountOfMileage
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average Mileage.
		/// </summary>
		public decimal AvgOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's Mileage.
		/// </summary>
		public decimal SumOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest Mileage present in the collection.
		/// </summary>
		public decimal MinOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest Mileage present in the collection.
		/// </summary>
		public decimal MaxOfMileage
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "Mileage", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The number of records that have a RoundCount value.
		/// </summary>
		public decimal CountOfRoundCount
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average RoundCount.
		/// </summary>
		public decimal AvgOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's RoundCount.
		/// </summary>
		public decimal SumOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest RoundCount present in the collection.
		/// </summary>
		public decimal MinOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest RoundCount present in the collection.
		/// </summary>
		public decimal MaxOfRoundCount
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "RoundCount", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The earliest DateAdded present in the collection.
		/// </summary>
		public DateTime? MinOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (EquipmentMovement item in this)
				{
					if (item.DateAdded < rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateAdded present in the collection.
		/// </summary>
		public DateTime? MaxOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (EquipmentMovement item in this)
				{
					if (item.DateAdded > rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MinOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (EquipmentMovement item in this)
				{
					if (item.DateUpdated < rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MaxOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (EquipmentMovement item in this)
				{
					if (item.DateUpdated > rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		#endregion Mathematical Functions

		#region Collection Disposal
		/// <summary>
		/// Implement IDisposable.
		/// Do not make this method virtual.
		/// A derived class should not be able to override this method.
		/// </summary>
		public void Dispose()
		{
			if (!this.IsDisposable) { return; }

			Dispose(true);

			// Take yourself off the Finalization queue 
			// to prevent finalization code for this object
			// from executing a second time.
			GC.SuppressFinalize(this);
		}

		/// <summary>
		/// Dispose(bool disposing) executes in two distinct scenarios.
		/// If disposing equals true, the method has been called directly
		/// or indirectly by a user's code. Managed and unmanaged resources
		/// can be disposed.
		/// If disposing equals false, the method has been called by the 
		/// runtime from inside the finalizer and you should not reference 
		/// other objects. Only unmanaged resources can be disposed.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (!this.IsDisposable) { return; }

			// Check to see if Dispose has already been called.
			if (!this._disposed)
			{
				// Set the disposed on this object to true
				this._disposed = true;

				// If disposing equals true, dispose all managed 
				// and unmanaged resources.
				if (disposing)
				{
					// Dispose managed resources.
					if (_backgroundWorker != null) { _backgroundWorker.Dispose(); _backgroundWorker = null; } 
					GetCollectionConfig = null;
					if (_rules != null) { _rules.Clear(); _rules = null; }
					if (_asyncConnection != null) { _asyncConnection.Dispose(); _asyncConnection = null; }

					// Go through and properly dispose of each object
					foreach (EquipmentMovement item in this)
					{
						if (item.IsDisposable) { item.Dispose(); }
					}

					// Deal with the keyed collections
					KeyedCollection = new Dictionary<long, EquipmentMovement>();

					FKKeyedCollection = new Dictionary<string, Dictionary<object, List<EquipmentMovement>>>();

					// Clear out the collection
					this.Clear();
				}
				// Release unmanaged resources. If disposing is false, 
				// only the following code is executed.
				// <Enter Disposal here> 
				// Note that this is not thread safe.
				// Another thread could start disposing the object
				// after the managed resources are disposed,
				// but before the disposed flag is set to true.
				// If thread safety is necessary, it must be
				// implemented by the client.
			}
		}

		/// <summary>
		/// Use C# destructor syntax for finalization code.
		/// This destructor will run only if the Dispose method 
		/// does not get called.
		/// It gives your base class the opportunity to finalize.
		/// Do not provide destructors in types derived from this class.
		/// </summary>
		~EquipmentMovementCollection()
		{
			if (!this.IsDisposable) { return; }

			// Do not re-create Dispose clean-up code here.
			// Calling Dispose(false) is optimal in terms of
			// readability and maintainability.
			Dispose(false);
		}
		#endregion Collection Disposal
	}
	#endregion EquipmentMovement Collection

	#region Event Handler for Async Object
	/// <summary>
	/// Custom class for EquipmentMovement event args such as population
	/// </summary>
	[Serializable]
	public class EquipmentMovement_GetCollection_EventArgs : EventArgs
	{
		private int _totalCount = 0;
		private int _currentIndex = 0;
		private EquipmentMovementCollection _coll = new EquipmentMovementCollection();

		/// <summary>
		/// Creates a new EquipmentMovement_GetCollection_EventArgs with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record being populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public EquipmentMovement_GetCollection_EventArgs(int currentIndex, int totalCount, EquipmentMovementCollection coll)
		{
			_totalCount = totalCount;
			_currentIndex = currentIndex;
			_coll = coll;
		}

		/// <summary>
		/// Creates a new empty EquipmentMovement_GetCollection_EventArgs.
		/// </summary>
		public EquipmentMovement_GetCollection_EventArgs()
		{
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public EquipmentMovementCollection EquipmentMovementCollection
		{
			get { return _coll; }
		}
	}
	#endregion Event Handler for Async Object

	#region Async Object for the Threaded Get
	/// <summary>
	/// An object to populate a EquipmentMovementCollection asynchronously.
	/// </summary>
	public class EquipmentMovementCollection_GetAsyncObject
	{
		private int _currentIndex = 0;
		private int _totalCount = 0;
		private EquipmentMovementCollection _coll = new EquipmentMovementCollection();

		/// <summary>
		/// Creates a new EquipmentMovement_GetAsyncObject with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record to be populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public EquipmentMovementCollection_GetAsyncObject(int currentIndex, int totalCount, EquipmentMovementCollection coll)
		{
			_currentIndex = currentIndex;
			_totalCount = totalCount;
			_coll = coll;
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public EquipmentMovementCollection EquipmentMovementCollection
		{
			get { return _coll; }
		}
	}
	#endregion Async Object for the Threaded Get

}

