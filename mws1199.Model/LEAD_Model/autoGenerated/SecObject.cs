using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using System.Text;

using LEADBase;

namespace LEAD
{
	/// <summary>
	/// Class Name: SecObject
	/// Generated by GenClasses v.4.0.0 on 07/28/2017 05:18 AM
	/// </summary>
	#region SecObject Class
	[Serializable]
	public partial class SecObject : LEAD_BaseObject, 
		IClassGenLogXML, IClassGenCopyWithNewID, IClassGenPropertyChanging, INotifyPropertyChanging
	{
		#region Private Properties
		private long _objectID = 0;
		private long? _agencyID = null;
		private string _type = null;
		private long? _parentObjectID = null;
		private string _keyName = null;
		private string _text = null;
		private int? _sortOrder = null;
		private string _imageURL = null;
		private string _lineage = null;
		private string _lineageSort = null;
		private string _extendedText = null;
		private bool _inactive = false;
		private DateTime _dtAdded = DateTime.Now;
		private string _addedByUser = null;
		private DateTime _dtUpdated = DateTime.Now;
		private string _updatedByUser = null;
		private byte[] _rowversion = null;

		private SecObject _originalValues = null;

		private bool _disposed = false;

		// Child Items
		private SecGroupToObjectCollection _secGroupToObjectCollection = new SecGroupToObjectCollection();
		#endregion Private Properties

		#region Constructors

		/// <summary>
		/// Creates a new SecObject.
		/// </summary>
		public SecObject()
		{
			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}

		/// <summary>
		/// Builds a SecObjectbased on a certain record from the database.
		/// </summary>
		/// <param name="objectID">A primary key used to select the record.</param>
		public SecObject(long objectID)
		{
			this.Get(objectID);

			SetBaseRules();				// Set the base rules
			SetAdditionalRules();		// Set any additional rules
		}
		#endregion Constructors

		#region Disposal
		/// <summary>
		/// Override of the disposal method
		/// </summary>
		/// <param name="disposing">True if the object is being disposed, otherwise false</param>
		protected override void Dispose(bool disposing)
		{
			if (!this._isDisposable) { return; }

			if (!this._disposed)
			{
				try
				{
					// Set the disposed on this object to true
					this._disposed = true;

					if (disposing)
					{
						// Release the managed resources you added in
						// this derived class here.

						// Dispose of the original values object
						if (_originalValues != null && _originalValues.IsDisposable) { _originalValues.Dispose(); _originalValues = null; }

						// Dispose of the Child Items
						if (_secGroupToObjectCollection != null && _secGroupToObjectCollection.IsDisposable) { _secGroupToObjectCollection.Dispose(); _secGroupToObjectCollection = null; }
					}

					// Release the native unmanaged resources you added
					// in this derived class here.
					// <No Unmanaged Resources in this block>
				}
				finally
				{
					// Call Dispose on your base class.
					if (this.IsDisposable) { base.Dispose(disposing); }
				}
			}
		}
		#endregion Disposal
		
		#region Public Properties

		/// <summary>
		/// Property generated from a child table.
		/// </summary>
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public SecGroupToObjectCollection Coll_SecGroupToObject
		{
			get { return _secGroupToObjectCollection; }
			set { _secGroupToObjectCollection = value; }
		}

		/// <summary>
		/// Property generated from the iObjectID field.
		/// </summary>
		public long ObjectID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _objectID;
			}
			set 
			{
				if (_objectID != value)
				{
					bool cancelled = NotifyPropertyChanging("ObjectID", _objectID, value);
					if (!cancelled)
					{
						_objectID = value;
						SetModifiedStatus("ObjectID");
						NotifyPropertyChanged("ObjectID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iAgencyID field.
		/// </summary>
		public long? AgencyID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _agencyID;
			}
			set 
			{
				if (_agencyID != value)
				{
					bool cancelled = NotifyPropertyChanging("AgencyID", _agencyID, value);
					if (!cancelled)
					{
						_agencyID = value;
						SetModifiedStatus("AgencyID");
						NotifyPropertyChanged("AgencyID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sType field.
		/// </summary>
		public string Type
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _type;
			}
			set 
			{
				if (_type != value)
				{
					bool cancelled = NotifyPropertyChanging("Type", _type, value);
					if (!cancelled)
					{
						_type = value;
						SetModifiedStatus("Type");
						NotifyPropertyChanged("Type", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iParentObjectID field.
		/// </summary>
		public long? ParentObjectID
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _parentObjectID;
			}
			set 
			{
				if (_parentObjectID != value)
				{
					bool cancelled = NotifyPropertyChanging("ParentObjectID", _parentObjectID, value);
					if (!cancelled)
					{
						_parentObjectID = value;
						SetModifiedStatus("ParentObjectID");
						NotifyPropertyChanged("ParentObjectID", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sKeyName field.
		/// </summary>
		public string KeyName
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _keyName;
			}
			set 
			{
				if (_keyName != value)
				{
					bool cancelled = NotifyPropertyChanging("KeyName", _keyName, value);
					if (!cancelled)
					{
						_keyName = value;
						SetModifiedStatus("KeyName");
						NotifyPropertyChanged("KeyName", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sText field.
		/// </summary>
		public string Text
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _text;
			}
			set 
			{
				if (_text != value)
				{
					bool cancelled = NotifyPropertyChanging("Text", _text, value);
					if (!cancelled)
					{
						_text = value;
						SetModifiedStatus("Text");
						NotifyPropertyChanged("Text", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the iSortOrder field.
		/// </summary>
		public int? SortOrder
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _sortOrder;
			}
			set 
			{
				if (_sortOrder != value)
				{
					bool cancelled = NotifyPropertyChanging("SortOrder", _sortOrder, value);
					if (!cancelled)
					{
						_sortOrder = value;
						SetModifiedStatus("SortOrder");
						NotifyPropertyChanged("SortOrder", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of SortOrder rendered as a string.
		/// </summary>
		public string SortOrderAsString
		{
			get { return _sortOrder.ToString(); }
		}

		/// <summary>
		/// Property generated from the sImageURL field.
		/// </summary>
		public string ImageURL
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _imageURL;
			}
			set 
			{
				if (_imageURL != value)
				{
					bool cancelled = NotifyPropertyChanging("ImageURL", _imageURL, value);
					if (!cancelled)
					{
						_imageURL = value;
						SetModifiedStatus("ImageURL");
						NotifyPropertyChanged("ImageURL", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sLineage field.
		/// </summary>
		public string Lineage
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _lineage;
			}
			set 
			{
				if (_lineage != value)
				{
					bool cancelled = NotifyPropertyChanging("Lineage", _lineage, value);
					if (!cancelled)
					{
						_lineage = value;
						SetModifiedStatus("Lineage");
						NotifyPropertyChanged("Lineage", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sLineageSort field.
		/// </summary>
		public string LineageSort
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _lineageSort;
			}
			set 
			{
				if (_lineageSort != value)
				{
					bool cancelled = NotifyPropertyChanging("LineageSort", _lineageSort, value);
					if (!cancelled)
					{
						_lineageSort = value;
						SetModifiedStatus("LineageSort");
						NotifyPropertyChanged("LineageSort", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sExtendedText field.
		/// </summary>
		public string ExtendedText
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _extendedText;
			}
			set 
			{
				if (_extendedText != value)
				{
					bool cancelled = NotifyPropertyChanging("ExtendedText", _extendedText, value);
					if (!cancelled)
					{
						_extendedText = value;
						SetModifiedStatus("ExtendedText");
						NotifyPropertyChanged("ExtendedText", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bInactive field.
		/// </summary>
		public bool Inactive
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _inactive;
			}
			set 
			{
				if (_inactive != value)
				{
					bool cancelled = NotifyPropertyChanging("Inactive", _inactive, value);
					if (!cancelled)
					{
						_inactive = value;
						SetModifiedStatus("Inactive");
						NotifyPropertyChanged("Inactive", value);
					}
				}
			}
		}

		/// <summary>
		/// The value of Inactive rendered as a string.
		/// </summary>
		public string InactiveAsString
		{
			get { return _inactive.ToString(); }
		}

		/// <summary>
		/// Property generated from the dtAdded field.
		/// </summary>
		public DateTime DateAdded
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtAdded;
			}
			set 
			{
				if (_dtAdded != value)
				{
					bool cancelled = NotifyPropertyChanging("DateAdded", _dtAdded, value);
					if (!cancelled)
					{
						_dtAdded = value;
						SetModifiedStatus("DateAdded");
						NotifyPropertyChanged("DateAdded", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sAddedByUser field.
		/// </summary>
		public string AddedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _addedByUser;
			}
			set 
			{
				if (_addedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("AddedByUser", _addedByUser, value);
					if (!cancelled)
					{
						_addedByUser = value;
						SetModifiedStatus("AddedByUser");
						NotifyPropertyChanged("AddedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the dtUpdated field.
		/// </summary>
		public DateTime DateUpdated
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _dtUpdated;
			}
			set 
			{
				if (_dtUpdated != value)
				{
					bool cancelled = NotifyPropertyChanging("DateUpdated", _dtUpdated, value);
					if (!cancelled)
					{
						_dtUpdated = value;
						SetModifiedStatus("DateUpdated");
						NotifyPropertyChanged("DateUpdated", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the sUpdatedByUser field.
		/// </summary>
		public string UpdatedByUser
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _updatedByUser;
			}
			set 
			{
				if (_updatedByUser != value)
				{
					bool cancelled = NotifyPropertyChanging("UpdatedByUser", _updatedByUser, value);
					if (!cancelled)
					{
						_updatedByUser = value;
						SetModifiedStatus("UpdatedByUser");
						NotifyPropertyChanged("UpdatedByUser", value);
					}
				}
			}
		}

		/// <summary>
		/// Property generated from the bRowversion field.
		/// </summary>
		public byte[] Rowversion
		{
			get 
			{
				if (RefreshRate != RefreshFrequency.ByDeveloperOnly) { RefreshObject(); }
				return _rowversion;
			}
			set 
			{
				if (_rowversion != value)
				{
					bool cancelled = NotifyPropertyChanging("Rowversion", _rowversion, value);
					if (!cancelled)
					{
						_rowversion = value;
						SetModifiedStatus("Rowversion");
						NotifyPropertyChanged("Rowversion", value);
					}
				}
			}
		}

		/// <summary>
		/// A SecObject with all of this object's original values.
		/// </summary>
		[Newtonsoft.Json.JsonIgnore]
		public SecObject OriginalValues
		{
			get { return _originalValues; }
			set { _originalValues = value; }
		}
		#endregion Public Properties

		#region Public Methods
		/// <summary>
		/// Set the Base Rules on the class.
		/// </summary>
		public void SetBaseRules()
		{
			// Property Required Rules
			this.Rules.Add(new PropertyRequiredCustomRule("ObjectID", "The \"Object ID\" field is required in the SecObject record.", RecordStatus.Modified));
			this.Rules.Add(new PropertyRequiredCustomRule("Inactive", "The \"Inactive\" field is required in the SecObject record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateAdded", "The \"Date Added\" field is required in the SecObject record."));
			this.Rules.Add(new PropertyRequiredCustomRule("DateUpdated", "The \"Date Updated\" field is required in the SecObject record."));
			this.Rules.Add(new PropertyRequiredCustomRule("Rowversion", "The \"Rowversion\" field is required in the SecObject record.", RecordStatus.Modified));

			// Max Length Rules
			this.Rules.Add(new MaxLengthCustomRule("Type", 200, "The maximum length for the \"Type\" field is 200 characters."));
			this.Rules.Add(new MaxLengthCustomRule("KeyName", 500, "The maximum length for the \"KeyName\" field is 500 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Text", 500, "The maximum length for the \"Text\" field is 500 characters."));
			this.Rules.Add(new MaxLengthCustomRule("ImageURL", 500, "The maximum length for the \"ImageURL\" field is 500 characters."));
			this.Rules.Add(new MaxLengthCustomRule("Lineage", 2000, "The maximum length for the \"Lineage\" field is 2000 characters."));
			this.Rules.Add(new MaxLengthCustomRule("LineageSort", 2000, "The maximum length for the \"LineageSort\" field is 2000 characters."));
			this.Rules.Add(new MaxLengthCustomRule("ExtendedText", 2000, "The maximum length for the \"ExtendedText\" field is 2000 characters."));
			this.Rules.Add(new MaxLengthCustomRule("AddedByUser", 50, "The maximum length for the \"AddedByUser\" field is 50 characters."));
			this.Rules.Add(new MaxLengthCustomRule("UpdatedByUser", 50, "The maximum length for the \"UpdatedByUser\" field is 50 characters."));

			// Date Range Rules
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateAdded", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateAdded\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateAdded", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateAdded\" field."));
			this.Rules.Add(new MinValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("1/1/1900"), "The date value entered must be after 1/1/1900 for the \"DateUpdated\" field."));
			this.Rules.Add(new MaxValueCustomRule<DateTime>("DateUpdated", DateTime.Parse("12/31/2299"), "The date value entered must be before 12/31/2299 for the \"DateUpdated\" field."));
		}

		/// <summary>
		/// Returns the broken rules, including any children.
		/// </summary>
		public ClassGenExceptionCollection BrokenRulesIncludingChildren
		{
			get 
			{
				ClassGenExceptionCollection brokenRules = base.BrokenRules;

				brokenRules.AddRange(_secGroupToObjectCollection.BrokenRules);

				return brokenRules; 
			}
		}

		/// <summary>
		/// Clone the object as a new instance and pass it back.
		/// </summary>
		/// <returns>A copy of the object.</returns>
		public SecObject Clone()
		{
			SecObject item = base.CloneObjectWithIL<SecObject>(this);
			item.OriginalValues = this.OriginalValues;

			// Do the sub-collections
			#region Sub Collections
			item.Coll_SecGroupToObject.Clear();		// Clear the collection
			foreach (SecGroupToObject s in this.Coll_SecGroupToObject)
			{
				item.Coll_SecGroupToObject.Add(s);
			}
			#endregion Sub Collections

			return item;
		}

		/// <summary>
		/// Copy the object - then change the ID field to a new value.
		/// </summary>
		/// <returns>A copy of the object with a new ID.</returns>
		public object CopyWithNewID()
		{
			// Make the copy of the object
			SecObject item = this.Clone();
			
			// Change the ID field
			item.ObjectID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			// Do the sub-collections
			#region Sub Collections
			for (int i = item.Coll_SecGroupToObject.Count - 1; i >= 0; i--)
			{
				item.Coll_SecGroupToObject[i] = (SecGroupToObject)item.Coll_SecGroupToObject[i].CopyWithNewID();
				item.Coll_SecGroupToObject[i].ObjectID = item.ObjectID;
			}
			#endregion Sub Collections

			return item;
		}

		
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				errors.AddRange(this.Get(_objectID));
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshObject()
		{
			return RefreshObject((int)RefreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID.
		/// </summary>
		/// <returns>A collection of any exceptions that were raised in the method.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (!String.IsNullOrEmpty(this._objectID.ToString()))
			{
				errors.AddRange(this.Get(_objectID));	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Undo any changes that might be done on the object.
		/// </summary>
		public override void UndoChanges()
		{
			// Enumerate the properties
			_objectID = _originalValues.ObjectID;
			_agencyID = _originalValues.AgencyID;
			_type = _originalValues.Type;
			_parentObjectID = _originalValues.ParentObjectID;
			_keyName = _originalValues.KeyName;
			_text = _originalValues.Text;
			_sortOrder = _originalValues.SortOrder;
			_imageURL = _originalValues.ImageURL;
			_lineage = _originalValues.Lineage;
			_lineageSort = _originalValues.LineageSort;
			_extendedText = _originalValues.ExtendedText;
			_inactive = _originalValues.Inactive;
			_dtAdded = _originalValues.DateAdded;
			_addedByUser = _originalValues.AddedByUser;
			_dtUpdated = _originalValues.DateUpdated;
			_updatedByUser = _originalValues.UpdatedByUser;
			_rowversion = _originalValues.Rowversion;
			
			_changedProps.Clear();		// Clear the changed properties

			this.RecordStatus = _originalValues.RecordStatus;
			this.IsLoaded = _originalValues.IsLoaded;

			// Do the sub-collections
			#region Sub Collections
			this.Coll_SecGroupToObject.Clear();		// Clear the collection
			foreach (SecGroupToObject s in _originalValues.Coll_SecGroupToObject)
			{
				this.Coll_SecGroupToObject.Add(s);
			}
			#endregion Sub Collections
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdate(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Default AddUpdate Method
		/// </summary>
		public ClassGenExceptionCollection AddUpdate(SqlConnection oConn, SqlTransaction oTrans)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Check to make sure the child collections aren't dirty and we still have a current record status
			if (_recordStatus == RecordStatus.Current)
			{
				if (Coll_SecGroupToObject.ModifiedRecords.Count > 0 || 
					Coll_SecGroupToObject.NewRecords.Count > 0 || 
					Coll_SecGroupToObject.DeletedRecords.Count > 0)
				{
					_recordStatus = RecordStatus.Modified;
				}
			}
			
			// Check to see if the record is already current - if so, don't do anything.
			if (_recordStatus == RecordStatus.Current) { return errors; }
			
			// Check to see if the record is a delete - if so, delete it from the db.
			if (_recordStatus == RecordStatus.Deleted)
			{
				try
				{
					// Delete the record and all its children
					errors.AddRange(LEAD_BaseObject.DeleteImmediate("tSecObject", "iObjectID", _objectID.ToString(), true));
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				return errors;
			}
			
			// Next, check to see if the record is new.  If so, add it to the system
			if (_recordStatus == RecordStatus.New || _recordStatus == RecordStatus.Modified)
			{
				// Check the Broken Rules collection
				errors.AddRange(BrokenRules);

				// See if you can get an updated timestamp from the table for update
				if (errors.Count == 0 &&
					_recordStatus == RecordStatus.Modified)
				{
					byte[] timeStampFromTable = DAL.GetTimeStampFromTable("tSecObject", "bRowversion",
						"iObjectID = " + this.ObjectID + "");
					if (timeStampFromTable != null && 
						DAL.GetValueForSQL(timeStampFromTable) != DAL.GetValueForSQL(_rowversion))
					{
						// Add the error to the error collection
						errors.Add(new ClassGenException("The timestamp fields don't match.", ClassGenExceptionIconType.Critical));
					}
				}

				// If the error collection is not clear, dump out of the function
				if (errors.Count > 0) { return errors; }

				// Set the person who updated/created this record
				_dtUpdated = DAL.GetSQLServerDateTime();
				if (String.IsNullOrEmpty(_addedByUser)) { AddedByUser = Security.CurrentUser.UserName; }
				UpdatedByUser = (!String.IsNullOrEmpty(Security.CurrentUser.UserName) ? Security.CurrentUser.UserName : UpdatedByUser);

				try
				{
					// Do the Exist/Insert check first
					sql = "DECLARE @return_val BIGINT " + 
						"IF NOT EXISTS (SELECT iObjectID FROM tSecObject WHERE iObjectID = @piObjectID) " + 
						"BEGIN" + 
						"    INSERT INTO tSecObject (iAgencyID, sType, iParentObjectID, sKeyName, sText, iSortOrder, sImageURL, sLineage, sLineageSort, sExtendedText, bInactive, sAddedByUser, dtUpdated, sUpdatedByUser) " + 
						"    SELECT @piAgencyID, @psType, @piParentObjectID, @psKeyName, @psText, @piSortOrder, @psImageURL, @psLineage, @psLineageSort, @psExtendedText, @pbInactive, @psAddedByUser, @pdtUpdated, @psUpdatedByUser " + 
						"    SELECT @return_val = SCOPE_IDENTITY() " + 
						"END " + 
						"ELSE " + 
						"BEGIN " + 
						"    UPDATE tSecObject SET " + 
						"        bInactive = @pbInactive" + 
						"        ,dtUpdated = @pdtUpdated" + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("AgencyID")) ? "        ,iAgencyID = @piAgencyID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Type")) ? "        ,sType = @psType" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ParentObjectID")) ? "        ,iParentObjectID = @piParentObjectID" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("KeyName")) ? "        ,sKeyName = @psKeyName" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Text")) ? "        ,sText = @psText" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("SortOrder")) ? "        ,iSortOrder = @piSortOrder" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ImageURL")) ? "        ,sImageURL = @psImageURL" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("Lineage")) ? "        ,sLineage = @psLineage" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("LineageSort")) ? "        ,sLineageSort = @psLineageSort" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("ExtendedText")) ? "        ,sExtendedText = @psExtendedText" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("AddedByUser")) ? "        ,sAddedByUser = @psAddedByUser" : "") + 
						(_recordStatus == RecordStatus.New || (_recordStatus == RecordStatus.Modified && _changedProps.Contains("UpdatedByUser")) ? "        ,sUpdatedByUser = @psUpdatedByUser" : "") + 
						"     WHERE iObjectID = @piObjectID " + 
						"     SELECT @return_val = @piObjectID " + 
						"END; SELECT @return_val AS ret_val, bRowversion FROM tSecObject WHERE iObjectID = @return_val";
					cmd = new SqlCommand(sql);

					cmd.Parameters.Add("@piObjectID", SqlDbType.BigInt).Value = _objectID;
					cmd.Parameters.Add("@piAgencyID", SqlDbType.BigInt).Value = (_agencyID == null ? (object)DBNull.Value : (object)_agencyID);
					cmd.Parameters.Add("@psType", SqlDbType.VarChar, 200).Value = (_type == null ? (object)DBNull.Value : (object)_type);
					cmd.Parameters.Add("@piParentObjectID", SqlDbType.BigInt).Value = (_parentObjectID == null ? (object)DBNull.Value : (object)_parentObjectID);
					cmd.Parameters.Add("@psKeyName", SqlDbType.VarChar, 500).Value = (_keyName == null ? (object)DBNull.Value : (object)_keyName);
					cmd.Parameters.Add("@psText", SqlDbType.VarChar, 500).Value = (_text == null ? (object)DBNull.Value : (object)_text);
					cmd.Parameters.Add("@piSortOrder", SqlDbType.Int).Value = (_sortOrder == null ? (object)DBNull.Value : (object)_sortOrder);
					cmd.Parameters.Add("@psImageURL", SqlDbType.VarChar, 500).Value = (_imageURL == null ? (object)DBNull.Value : (object)_imageURL);
					cmd.Parameters.Add("@psLineage", SqlDbType.VarChar, 2000).Value = (_lineage == null ? (object)DBNull.Value : (object)_lineage);
					cmd.Parameters.Add("@psLineageSort", SqlDbType.VarChar, 2000).Value = (_lineageSort == null ? (object)DBNull.Value : (object)_lineageSort);
					cmd.Parameters.Add("@psExtendedText", SqlDbType.VarChar, 2000).Value = (_extendedText == null ? (object)DBNull.Value : (object)_extendedText);
					cmd.Parameters.Add("@pbInactive", SqlDbType.Bit).Value = _inactive;
					cmd.Parameters.Add("@psAddedByUser", SqlDbType.VarChar, 50).Value = (_addedByUser == null ? (object)DBNull.Value : (object)_addedByUser);
					cmd.Parameters.Add("@pdtUpdated", SqlDbType.DateTime).Value = _dtUpdated;
					cmd.Parameters.Add("@psUpdatedByUser", SqlDbType.VarChar, 50).Value = (_updatedByUser == null ? (object)DBNull.Value : (object)_updatedByUser);

					cmd.Transaction = oTrans;		// Set the transaction on the command

					dt = DAL.SQLExecDataTable(cmd, oConn);
					foreach (DataRow row in dt.Rows)
					{
						// Get the old key field value to figure out if we need to update it
						long oldRecID = _objectID;

						_objectID = (long)row["ret_val"];
						_rowversion = (byte[])(row["bRowversion"]);

						// Go through the sub collections and update the records
						foreach (SecGroupToObject s in Coll_SecGroupToObject) { if (s.ObjectID == oldRecID) { s.ObjectID = _objectID; } }
					}
					dt.Dispose();		// Kill off the datatable
					
					// Add the update methods for all the sub collections
					#region Sub Collections
					errors.AddRange(Coll_SecGroupToObject.AddUpdateAll(oConn, oTrans));
					#endregion Sub Collections
				}
				catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
				catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

				if (errors.CriticalExceptionCount == 0)
				{
					_recordStatus = RecordStatus.Current;		// Set the record status to current after a successful update
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get the record specified on the Key Fields in the table.
		/// </summary>
		/// <param name="objectID">A key field used to find the correct record.</param>
		/// <param name="includeParentPopulation">Whether or not to include values derived from a parent table.</param>
		public ClassGenExceptionCollection Get(long objectID, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlCommand cmd = null;
			string sql = string.Empty;
			DataTable dt = null;
			
			try
			{
				sql = "SELECT [SO].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tSecObject [SO] " + 
					"WHERE [SO].[iObjectID] = @piObjectID " + 
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piObjectID", SqlDbType.BigInt).Value = objectID;
				dt = DAL.SQLExecDataTable(cmd);

				foreach (DataRow row in dt.Rows)
				{
					// Call the get from data row method
					errors.AddRange(this.Get(row, includeParentPopulation));
				}

				dt.Dispose();		// Dispose of the datatable
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified based on the Key Fields in the table
		/// </summary>
		/// <param name="objectID">A key field used to find the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(long objectID)
		{
			return Get(objectID, false);		// Get the item
		}

		/// <summary>
		/// Populate the object using the datarow passed in...
		/// </summary>
		/// <param name="row">The DataRow to populate the object from.</param>
		/// <param name="includeParentPopulation">Whether to include data generated from parent tables.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row, bool includeParentPopulation)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				// Enumerate through the fields and set up the object
				_recordStatus = RecordStatus.Current;
				_isLoaded = false;
				if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
				{
					_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
				}
				else
				{
					_dateTimeObjectPopulated = DateTime.Now;
				}
				DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
				
				_objectID = long.Parse(row["iObjectID"] != DBNull.Value ? row["iObjectID"].ToString() : "0");
				_agencyID = (row["iAgencyID"] != DBNull.Value ? _agencyID = long.Parse(row["iAgencyID"].ToString()) : null);
				_type = (row["sType"] != DBNull.Value ? _type = row["sType"].ToString() : null);
				_parentObjectID = (row["iParentObjectID"] != DBNull.Value ? _parentObjectID = long.Parse(row["iParentObjectID"].ToString()) : null);
				_keyName = (row["sKeyName"] != DBNull.Value ? _keyName = row["sKeyName"].ToString() : null);
				
				_text = (row["sText"] != DBNull.Value ? _text = row["sText"].ToString() : null);
				_sortOrder = (row["iSortOrder"] != DBNull.Value ? _sortOrder = int.Parse(row["iSortOrder"].ToString()) : null);
				_imageURL = (row["sImageURL"] != DBNull.Value ? _imageURL = row["sImageURL"].ToString() : null);
				_lineage = (row["sLineage"] != DBNull.Value ? _lineage = row["sLineage"].ToString() : null);
				_lineageSort = (row["sLineageSort"] != DBNull.Value ? _lineageSort = row["sLineageSort"].ToString() : null);
				
				_extendedText = (row["sExtendedText"] != DBNull.Value ? _extendedText = row["sExtendedText"].ToString() : null);
				_inactive = bool.Parse(row["bInactive"] != DBNull.Value ? row["bInactive"].ToString() : "false");
				_dtAdded = (row["dtAdded"] != DBNull.Value ? (DateTime)row["dtAdded"] : new DateTime(1900, 1, 1));
				_addedByUser = (row["sAddedByUser"] != DBNull.Value ? _addedByUser = row["sAddedByUser"].ToString() : null);
				_dtUpdated = (row["dtUpdated"] != DBNull.Value ? (DateTime)row["dtUpdated"] : new DateTime(1900, 1, 1));
				
				_updatedByUser = (row["sUpdatedByUser"] != DBNull.Value ? _updatedByUser = row["sUpdatedByUser"].ToString() : null);
				_rowversion = (byte[])(row["bRowversion"] != DBNull.Value ? (object)row["bRowversion"] : (object)null);

				_isLoaded = true;

				// Make a copy of the object with original values
				_originalValues = this.Clone();
			}
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the error collection
		}

		/// <summary>
		/// Get the record specified from the passed datarow.
		/// </summary>
		/// <param name="row">The DataRow used to determine the correct record.</param>
		/// <returns>A collection of exceptions that occurred while trying to perform the Get.</returns>
		public ClassGenExceptionCollection Get(DataRow row)
		{
			return Get(row, false);		// Get the item
		}
		
		#region Get Child Collections
		/// <summary>
		/// Get all children for the SecGroupToObject class.
		/// </summary>
		public void GetChildren_SecGroupToObject()
		{
			this.Coll_SecGroupToObject.Clear();		// SecGroupToObject
			this.Coll_SecGroupToObject.GetFromDBByObjectID(_objectID);
			foreach (SecGroupToObject item in this.Coll_SecGroupToObject)
			{
				item.SecObjectItem = this;
				item.SecObjectItem.IsLoaded = true;
				item.RecordStatus = RecordStatus.Current;
			}
		}
		#endregion Get Child Collections

		#region Child Collections

		/// <summary>
		/// Run this method to delete all the child collections.
		/// </summary>
		/// <returns>The number of records affected by the delete.</returns>
		public ClassGenExceptionCollection DeleteAllChildCollections()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Delete the record
			errors.AddRange(LEAD_BaseObject.DeleteImmediate("tSecObject", "iObjectID", _objectID.ToString(), false));
			
			return errors;
		}
		#endregion Child Collections

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="dt">The datatable to use as a template.</param>
		/// <returns>A new datarow.</returns>
		public DataRow ToDataRow(DataTable dt)
		{
			// Generate and return a data row
			return ToDataRowWithIL<SecObject>(this, dt);
		}

		#endregion Public Methods

		#region Public Static Values

		// Main Class - SecObject

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ObjectID = "ObjectID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AgencyID = "AgencyID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Type = "Type";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ParentObjectID = "ParentObjectID";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_KeyName = "KeyName";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Text = "Text";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_SortOrder = "SortOrder";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ImageURL = "ImageURL";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Lineage = "Lineage";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_LineageSort = "LineageSort";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_ExtendedText = "ExtendedText";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Inactive = "Inactive";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateAdded = "DateAdded";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_AddedByUser = "AddedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_DateUpdated = "DateUpdated";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_UpdatedByUser = "UpdatedByUser";

		/// <summary>
		/// The property's name as a static value.
		/// </summary>
		public static readonly string FN_Rowversion = "Rowversion";

		#endregion Public Static Values

		#region Public Static Methods
		/// <summary>
		/// Get a DB Field name from the field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(SecObjectField field)
		{
			string fldName = string.Empty;

			// Add the elements
			switch (field)
			{
				case SecObjectField.ObjectID: fldName = "iObjectID"; break;
				case SecObjectField.AgencyID: fldName = "iAgencyID"; break;
				case SecObjectField.Type: fldName = "sType"; break;
				case SecObjectField.ParentObjectID: fldName = "iParentObjectID"; break;
				case SecObjectField.KeyName: fldName = "sKeyName"; break;
				case SecObjectField.Text: fldName = "sText"; break;
				case SecObjectField.SortOrder: fldName = "iSortOrder"; break;
				case SecObjectField.ImageURL: fldName = "sImageURL"; break;
				case SecObjectField.Lineage: fldName = "sLineage"; break;
				case SecObjectField.LineageSort: fldName = "sLineageSort"; break;
				case SecObjectField.ExtendedText: fldName = "sExtendedText"; break;
				case SecObjectField.Inactive: fldName = "bInactive"; break;
				case SecObjectField.DateAdded: fldName = "dtAdded"; break;
				case SecObjectField.AddedByUser: fldName = "sAddedByUser"; break;
				case SecObjectField.DateUpdated: fldName = "dtUpdated"; break;
				case SecObjectField.UpdatedByUser: fldName = "sUpdatedByUser"; break;
				case SecObjectField.Rowversion: fldName = "bRowversion"; break;
			}

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// Get a field from the DB Field that's passed in.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static string GetDBFieldName(string field)
		{
			string fldName = null;

			// Add the elements
			if (field.ToLower() == "iobjectid") { fldName = SecObjectField.ObjectID.ToString(); }
			else if (field.ToLower() == "iagencyid") { fldName = SecObjectField.AgencyID.ToString(); }
			else if (field.ToLower() == "stype") { fldName = SecObjectField.Type.ToString(); }
			else if (field.ToLower() == "iparentobjectid") { fldName = SecObjectField.ParentObjectID.ToString(); }
			else if (field.ToLower() == "skeyname") { fldName = SecObjectField.KeyName.ToString(); }
			else if (field.ToLower() == "stext") { fldName = SecObjectField.Text.ToString(); }
			else if (field.ToLower() == "isortorder") { fldName = SecObjectField.SortOrder.ToString(); }
			else if (field.ToLower() == "simageurl") { fldName = SecObjectField.ImageURL.ToString(); }
			else if (field.ToLower() == "slineage") { fldName = SecObjectField.Lineage.ToString(); }
			else if (field.ToLower() == "slineagesort") { fldName = SecObjectField.LineageSort.ToString(); }
			else if (field.ToLower() == "sextendedtext") { fldName = SecObjectField.ExtendedText.ToString(); }
			else if (field.ToLower() == "binactive") { fldName = SecObjectField.Inactive.ToString(); }
			else if (field.ToLower() == "dtadded") { fldName = SecObjectField.DateAdded.ToString(); }
			else if (field.ToLower() == "saddedbyuser") { fldName = SecObjectField.AddedByUser.ToString(); }
			else if (field.ToLower() == "dtupdated") { fldName = SecObjectField.DateUpdated.ToString(); }
			else if (field.ToLower() == "supdatedbyuser") { fldName = SecObjectField.UpdatedByUser.ToString(); }
			else if (field.ToLower() == "browversion") { fldName = SecObjectField.Rowversion.ToString(); }

			// Return the field name
			return fldName;
		}

		/// <summary>
		/// The database table name.
		/// </summary>
		public static readonly string DB_TableName = "tSecObject"; 

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(SecObjectField field)
		{
			return GetDistinctFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public static List<string> GetDistinctFromDB(SecObjectField field, string whereClause)
		{
			string fldName = GetDBFieldName(field);

			if (String.IsNullOrEmpty(fldName)) { return new List<string>(); }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			List<string> rtv = new List<string>();

			try
			{
				sql = "SELECT DISTINCT LTRIM(RTRIM([" + fldName + "])) " +
						"FROM [tSecObject] " +
						"WHERE [" + fldName + "] IS NOT NULL AND LTRIM(RTRIM([" + fldName + "])) <> '' " + 
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") + 
						"ORDER BY LTRIM(RTRIM([" + fldName + "]))";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (fldName.ToLower().EndsWith("guid"))
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString().ToLower());
					}
				}
				else
				{
					foreach (DataRow row in dt.Rows)
					{
						rtv.Add(row[0].ToString());
					}
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a distinct list of values based on the elements in a database table.
		/// </summary>
		/// <param name="fields">The fields to get.</param>
		/// <param name="fieldAliases">The field aliases.</param>
		/// <param name="sortedFields">The sorted fields.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>A datatable of values from the collection (sorted by value).</returns>
		public static DataTable GetDistinctFromDBAsDataTable(SecObjectField[] fields, 
			string[] fieldAliases,
			SecObjectField[] sortedFields, 
			string whereClause)
		{
			Dictionary<SecObjectField, string> fieldNames = new Dictionary<SecObjectField, string>();
			StringBuilder sbFields = new StringBuilder();
			StringBuilder sbWhereClause = new StringBuilder();
			int fieldCount = 0;
			foreach (SecObjectField fld in fields)
			{
				if (!fieldNames.ContainsKey(fld))
				{
					fieldNames.Add(fld, GetDBFieldName(fld));
					sbWhereClause.Append((sbWhereClause.ToString().Trim().Length > 0 ? " AND " : " WHERE ") +
						fieldNames[fld] + " IS NOT NULL AND LTRIM(RTRIM(" + fieldNames[fld] + ")) <> '' ");
				}
				if (String.IsNullOrEmpty(fieldNames[fld])) { return null; }
				sbFields.Append((sbFields.ToString().Trim().Length > 0 ? "," : "") + "[" + fieldNames[fld] + "]" + 
					(fieldAliases.Length > fieldCount ? " AS [" + fieldAliases[fieldCount] + "] " : ""));
				fieldCount++;
			}

			Dictionary<SecObjectField, string> sortedFieldNames = new Dictionary<SecObjectField, string>();
			StringBuilder sbSortedFields = new StringBuilder();
			foreach (SecObjectField fld in sortedFields)
			{
				if (!sortedFieldNames.ContainsKey(fld))
				{
					sortedFieldNames.Add(fld, GetDBFieldName(fld));
				}
				if (String.IsNullOrEmpty(sortedFieldNames[fld])) { return null; }
				sbSortedFields.Append((sbSortedFields.ToString().Trim().Length > 0 ? "," : "") + sortedFieldNames[fld]);
			}

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT DISTINCT " + sbFields.ToString() + " " +
						"FROM tSecObject " +
						sbWhereClause.ToString() + " " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						(!String.IsNullOrEmpty(sbSortedFields.ToString()) ? " ORDER BY " + sbSortedFields.ToString() + "" : "");
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return dt;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(SecObjectMinMaxDateField field)
		{
			return GetMinDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single earliest DateTime from the collection.</returns>
		public static DateTime? GetMinDateFromDB(SecObjectMinMaxDateField field, string whereClause)
		{
			SecObjectField fld = (SecObjectField)Enum.Parse(typeof(SecObjectField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tSecObject] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(SecObjectMinMaxDateField field)
		{
			return GetMaxDateFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single latest DateTime from the collection.</returns>
		public static DateTime? GetMaxDateFromDB(SecObjectMinMaxDateField field, string whereClause)
		{
			SecObjectField fld = (SecObjectField)Enum.Parse(typeof(SecObjectField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tSecObject] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (DateTime)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the minimum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(SecObjectMinMaxNumberField field)
		{
			return GetMinNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the minimum based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single least value from the collection.</returns>
		public static decimal? GetMinNumberFromDB(SecObjectMinMaxNumberField field, string whereClause)
		{
			SecObjectField fld = (SecObjectField)Enum.Parse(typeof(SecObjectField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MIN([" + fldName + "]) " +
						"FROM [tSecObject] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(SecObjectMinMaxNumberField field)
		{
			return GetMaxNumberFromDB(field, string.Empty);
		}

		/// <summary>
		/// Get the maximum value based on the elements in a database table.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <param name="whereClause">The where clause to fire against the database.</param>
		/// <returns>The single greatest value from the collection.</returns>
		public static decimal? GetMaxNumberFromDB(SecObjectMinMaxNumberField field, string whereClause)
		{
			SecObjectField fld = (SecObjectField)Enum.Parse(typeof(SecObjectField),
				field.ToString(), true);
			string fldName = GetDBFieldName(fld);

			if (String.IsNullOrEmpty(fldName)) { return null; }

			// Get the datatable
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT MAX([" + fldName + "]) " +
						"FROM [tSecObject] " +
						"WHERE [" + fldName + "] IS NOT NULL " +
						(!String.IsNullOrEmpty(whereClause) ? "AND (" + whereClause + ") " : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count == 0) { return null; }
				return (decimal)dt.Rows[0][0];		// Return the value
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return null;
		}

		/// <summary>
		/// Copy the object - then change the id field to a new value
		/// </summary>
		/// <param name="source">The object to copy.</param>
		/// <returns>A copy of the object, with a new ID.</returns>
		public static SecObject CopyFrom(SecObject source)
		{
			// Make the copy of the object
			SecObject item = source.Clone();
			
			// Change the ID field
			item.ObjectID = -1;

			// Reset the record status to new
			item.RecordStatus = RecordStatus.New;

			// Do the sub-collections
			#region Sub Collections
			for (int i = item.Coll_SecGroupToObject.Count - 1; i >= 0; i--)
			{
				item.Coll_SecGroupToObject[i] = (SecGroupToObject)item.Coll_SecGroupToObject[i].CopyWithNewID();
				item.Coll_SecGroupToObject[i].ObjectID = item.ObjectID;
			}
			#endregion Sub Collections

			return item;
		}

		/// <summary>
		/// Convert the passed string into a db friendly string (one that 
		/// doesn't include the names in the object, but rather the names 
		/// from the fields from the database).
		/// </summary>
		/// <param name="dbString">The string to process.</param>
		/// <returns>The converted string.</returns>
		public static string ToDBFriendly(string dbString)
		{
			string rtv = dbString;

			rtv = rtv.Replace("[ObjectID]", "[iObjectID]");
			rtv = rtv.Replace("[AgencyID]", "[iAgencyID]");
			rtv = rtv.Replace("[Type]", "[sType]");
			rtv = rtv.Replace("[ParentObjectID]", "[iParentObjectID]");
			rtv = rtv.Replace("[KeyName]", "[sKeyName]");
			rtv = rtv.Replace("[Text]", "[sText]");
			rtv = rtv.Replace("[SortOrder]", "[iSortOrder]");
			rtv = rtv.Replace("[ImageURL]", "[sImageURL]");
			rtv = rtv.Replace("[Lineage]", "[sLineage]");
			rtv = rtv.Replace("[LineageSort]", "[sLineageSort]");
			rtv = rtv.Replace("[ExtendedText]", "[sExtendedText]");
			rtv = rtv.Replace("[Inactive]", "[bInactive]");
			rtv = rtv.Replace("[DateAdded]", "[dtAdded]");
			rtv = rtv.Replace("[AddedByUser]", "[sAddedByUser]");
			rtv = rtv.Replace("[DateUpdated]", "[dtUpdated]");
			rtv = rtv.Replace("[UpdatedByUser]", "[sUpdatedByUser]");
			rtv = rtv.Replace("[Rowversion]", "[bRowversion]");

			return rtv;
		}

		#region Json.NET Serialization
		/// <summary>
		/// Attempt to serialize the SecObject object to the server
		/// </summary>
		/// <param name="obj">The SecObject object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(SecObject obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the SecObject object from the server
		/// </summary>
		/// <param name="obj">The SecObject object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A SecObject object containing the return from the method</returns>
		public static SecObject DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			SecObject rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<SecObject>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization

		#endregion Public Static Methods

		#region IClassGenPropertyChanging Implementation

		/// <summary>
		/// Occurs when a property is about to change.
		/// </summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>
		/// Occurs when a ClassGen property is about to change.
		/// </summary>
		public event ClassGenPropertyChangingEventHandler ClassGenPropertyChanging;
		private bool NotifyPropertyChanging(string info, object oldValue, object newValue)
		{
			bool cancel = false;
			if (ClassGenPropertyChanging != null)
			{
				ClassGenPropertyChangingEventArgs e = new ClassGenPropertyChangingEventArgs(info, oldValue, newValue);
				ClassGenPropertyChanging(this, e);
				cancel = e.Cancel; 
			}
			if (!cancel && PropertyChanging != null)
			{
				PropertyChangingEventArgs e = new PropertyChangingEventArgs(info);
				PropertyChanging(this, e);
			}
			return cancel;
		}

		#endregion IClassGenPropertyChanging Implementation
		
		#region IClassGenLogXML Implementation
		/// <summary>
		/// Gets the current object as an XML object stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base properties 
		///		created as model base objects (GridCustom0-9, etc.).</param>
		/// <returns>The object as an XML string.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();

			sb.Append("<ObjectID>" + System.Security.SecurityElement.Escape(ObjectID.ToString()) + "</ObjectID>" + Environment.NewLine);
			sb.Append("<AgencyID>" + System.Security.SecurityElement.Escape(AgencyID.ToString()) + "</AgencyID>" + Environment.NewLine);
			sb.Append("<Type>" + System.Security.SecurityElement.Escape(Type) + "</Type>" + Environment.NewLine);
			sb.Append("<ParentObjectID>" + System.Security.SecurityElement.Escape(ParentObjectID.ToString()) + "</ParentObjectID>" + Environment.NewLine);
			sb.Append("<KeyName>" + System.Security.SecurityElement.Escape(KeyName) + "</KeyName>" + Environment.NewLine);
			sb.Append("<Text>" + System.Security.SecurityElement.Escape(Text) + "</Text>" + Environment.NewLine);
			sb.Append("<SortOrder>" + System.Security.SecurityElement.Escape(SortOrder.ToString()) + "</SortOrder>" + Environment.NewLine);
			sb.Append("<ImageURL>" + System.Security.SecurityElement.Escape(ImageURL) + "</ImageURL>" + Environment.NewLine);
			sb.Append("<Lineage>" + System.Security.SecurityElement.Escape(Lineage) + "</Lineage>" + Environment.NewLine);
			sb.Append("<LineageSort>" + System.Security.SecurityElement.Escape(LineageSort) + "</LineageSort>" + Environment.NewLine);
			sb.Append("<ExtendedText>" + System.Security.SecurityElement.Escape(ExtendedText) + "</ExtendedText>" + Environment.NewLine);
			sb.Append("<Inactive>" + System.Security.SecurityElement.Escape(Inactive.ToString()) + "</Inactive>" + Environment.NewLine);
			sb.Append("<DateAdded>" + DateAdded.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateAdded>" + Environment.NewLine);
			sb.Append("<AddedByUser>" + System.Security.SecurityElement.Escape(AddedByUser) + "</AddedByUser>" + Environment.NewLine);
			sb.Append("<DateUpdated>" + DateUpdated.ToString("MM/dd/yyyy hh:mm:ss.ffffff tt") + "</DateUpdated>" + Environment.NewLine);
			sb.Append("<UpdatedByUser>" + System.Security.SecurityElement.Escape(UpdatedByUser) + "</UpdatedByUser>" + Environment.NewLine);

			if (includeBaseProperties)
			{
				sb.Append("<RecordStatus>" + this.RecordStatus.ToString() + "</RecordStatus>" + Environment.NewLine);
				sb.Append("<CheckedInGrid>" + this.CheckedInGrid.ToString() + "</CheckedInGrid>" + Environment.NewLine);
				sb.Append("<IsDisposable>" + this.IsDisposable.ToString() + "</IsDisposable>" + Environment.NewLine);

				sb.Append("<GridCustom_0>" + System.Security.SecurityElement.Escape(this.GridCustom_0) + "</GridCustom_0>" + Environment.NewLine);
				sb.Append("<GridCustom_1>" + System.Security.SecurityElement.Escape(this.GridCustom_1) + "</GridCustom_1>" + Environment.NewLine);
				sb.Append("<GridCustom_2>" + System.Security.SecurityElement.Escape(this.GridCustom_2) + "</GridCustom_2>" + Environment.NewLine);
				sb.Append("<GridCustom_3>" + System.Security.SecurityElement.Escape(this.GridCustom_3) + "</GridCustom_3>" + Environment.NewLine);
				sb.Append("<GridCustom_4>" + System.Security.SecurityElement.Escape(this.GridCustom_4) + "</GridCustom_4>" + Environment.NewLine);
				sb.Append("<GridCustom_5>" + System.Security.SecurityElement.Escape(this.GridCustom_5) + "</GridCustom_5>" + Environment.NewLine);
				sb.Append("<GridCustom_6>" + System.Security.SecurityElement.Escape(this.GridCustom_6) + "</GridCustom_6>" + Environment.NewLine);
				sb.Append("<GridCustom_7>" + System.Security.SecurityElement.Escape(this.GridCustom_7) + "</GridCustom_7>" + Environment.NewLine);
				sb.Append("<GridCustom_8>" + System.Security.SecurityElement.Escape(this.GridCustom_8) + "</GridCustom_8>" + Environment.NewLine);
				sb.Append("<GridCustom_9>" + System.Security.SecurityElement.Escape(this.GridCustom_9) + "</GridCustom_9>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<SecObject>" + Environment.NewLine);
				sb.Append("</SecObject>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Get the current object as an XML object stream with all base properties included.
		/// </summary>
		/// <returns>The object as an XML string with all base properties included.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the changed elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <returns>A string value containing the XML list.</returns>
		public string GetChangedElementsAsXML()
		{
			StringBuilder sb = new StringBuilder();

			// Get the original values in relation to the new ones
			if (_originalValues.ObjectID != ObjectID)
			{
				sb.Append("\t<ObjectID>");
				sb.Append("<OldValue>" + _originalValues.ObjectID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + ObjectID.ToString() + "</NewValue>");
				sb.Append("</ObjectID>" + Environment.NewLine);
			}
			if (_originalValues.AgencyID != AgencyID)
			{
				sb.Append("\t<AgencyID>");
				sb.Append("<OldValue>" + _originalValues.AgencyID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + AgencyID.ToString() + "</NewValue>");
				sb.Append("</AgencyID>" + Environment.NewLine);
			}
			if (_originalValues.Type != Type)
			{
				sb.Append("\t<Type>");
				sb.Append("<OldValue>" + _originalValues.Type + "</OldValue>");
				sb.Append("<NewValue>" + Type + "</NewValue>");
				sb.Append("</Type>" + Environment.NewLine);
			}
			if (_originalValues.ParentObjectID != ParentObjectID)
			{
				sb.Append("\t<ParentObjectID>");
				sb.Append("<OldValue>" + _originalValues.ParentObjectID.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + ParentObjectID.ToString() + "</NewValue>");
				sb.Append("</ParentObjectID>" + Environment.NewLine);
			}
			if (_originalValues.KeyName != KeyName)
			{
				sb.Append("\t<KeyName>");
				sb.Append("<OldValue>" + _originalValues.KeyName + "</OldValue>");
				sb.Append("<NewValue>" + KeyName + "</NewValue>");
				sb.Append("</KeyName>" + Environment.NewLine);
			}
			if (_originalValues.Text != Text)
			{
				sb.Append("\t<Text>");
				sb.Append("<OldValue>" + _originalValues.Text + "</OldValue>");
				sb.Append("<NewValue>" + Text + "</NewValue>");
				sb.Append("</Text>" + Environment.NewLine);
			}
			if (_originalValues.SortOrder != SortOrder)
			{
				sb.Append("\t<SortOrder>");
				sb.Append("<OldValue>" + _originalValues.SortOrder.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + SortOrder.ToString() + "</NewValue>");
				sb.Append("</SortOrder>" + Environment.NewLine);
			}
			if (_originalValues.ImageURL != ImageURL)
			{
				sb.Append("\t<ImageURL>");
				sb.Append("<OldValue>" + _originalValues.ImageURL + "</OldValue>");
				sb.Append("<NewValue>" + ImageURL + "</NewValue>");
				sb.Append("</ImageURL>" + Environment.NewLine);
			}
			if (_originalValues.Lineage != Lineage)
			{
				sb.Append("\t<Lineage>");
				sb.Append("<OldValue>" + _originalValues.Lineage + "</OldValue>");
				sb.Append("<NewValue>" + Lineage + "</NewValue>");
				sb.Append("</Lineage>" + Environment.NewLine);
			}
			if (_originalValues.LineageSort != LineageSort)
			{
				sb.Append("\t<LineageSort>");
				sb.Append("<OldValue>" + _originalValues.LineageSort + "</OldValue>");
				sb.Append("<NewValue>" + LineageSort + "</NewValue>");
				sb.Append("</LineageSort>" + Environment.NewLine);
			}
			if (_originalValues.ExtendedText != ExtendedText)
			{
				sb.Append("\t<ExtendedText>");
				sb.Append("<OldValue>" + _originalValues.ExtendedText + "</OldValue>");
				sb.Append("<NewValue>" + ExtendedText + "</NewValue>");
				sb.Append("</ExtendedText>" + Environment.NewLine);
			}
			if (_originalValues.Inactive != Inactive)
			{
				sb.Append("\t<Inactive>");
				sb.Append("<OldValue>" + _originalValues.Inactive.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + Inactive.ToString() + "</NewValue>");
				sb.Append("</Inactive>" + Environment.NewLine);
			}
			if (_originalValues.DateAdded != DateAdded)
			{
				sb.Append("\t<DateAdded>");
				sb.Append("<OldValue>" + _originalValues.DateAdded.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateAdded.ToString() + "</NewValue>");
				sb.Append("</DateAdded>" + Environment.NewLine);
			}
			if (_originalValues.AddedByUser != AddedByUser)
			{
				sb.Append("\t<AddedByUser>");
				sb.Append("<OldValue>" + _originalValues.AddedByUser + "</OldValue>");
				sb.Append("<NewValue>" + AddedByUser + "</NewValue>");
				sb.Append("</AddedByUser>" + Environment.NewLine);
			}
			if (_originalValues.DateUpdated != DateUpdated)
			{
				sb.Append("\t<DateUpdated>");
				sb.Append("<OldValue>" + _originalValues.DateUpdated.ToString() + "</OldValue>");
				sb.Append("<NewValue>" + DateUpdated.ToString() + "</NewValue>");
				sb.Append("</DateUpdated>" + Environment.NewLine);
			}
			if (_originalValues.UpdatedByUser != UpdatedByUser)
			{
				sb.Append("\t<UpdatedByUser>");
				sb.Append("<OldValue>" + _originalValues.UpdatedByUser + "</OldValue>");
				sb.Append("<NewValue>" + UpdatedByUser + "</NewValue>");
				sb.Append("</UpdatedByUser>" + Environment.NewLine);
			}

			if (!String.IsNullOrEmpty(sb.ToString()))
			{
				sb.Insert(0, "<SecObject>" + Environment.NewLine);
				sb.Append("</SecObject>" + Environment.NewLine);
			}

			return sb.ToString();
		}

		/// <summary>
		/// Generates a new SecObject object from an XML description.
		/// </summary>
		/// <param name="xml">The string of XML to load from.</param>
		/// <returns>A new SecObject object.</returns>
		public static SecObject LoadFromXML(string xml)
		{
			SecObject item = new SecObject();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			bool propSet = false;
			doc.LoadXml(xml);

			foreach (System.Xml.XmlNode child in doc.ChildNodes[0].ChildNodes)
			{
				if (!propSet) { propSet = true; }
				switch (child.Name)
				{
					case "ObjectID": item.ObjectID = long.Parse(child.InnerText); break;
					case "AgencyID": item.AgencyID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "Type": item.Type = child.InnerText; break;
					case "ParentObjectID": item.ParentObjectID = (!String.IsNullOrEmpty(child.InnerText) ? long.Parse(child.InnerText) : (long?)null); break;
					case "KeyName": item.KeyName = child.InnerText; break;

					case "Text": item.Text = child.InnerText; break;
					case "SortOrder": item.SortOrder = (!String.IsNullOrEmpty(child.InnerText) ? int.Parse(child.InnerText) : (int?)null); break;
					case "ImageURL": item.ImageURL = child.InnerText; break;
					case "Lineage": item.Lineage = child.InnerText; break;
					case "LineageSort": item.LineageSort = child.InnerText; break;

					case "ExtendedText": item.ExtendedText = child.InnerText; break;
					case "Inactive": item.Inactive = bool.Parse(child.InnerText); break;
					case "DateAdded": item.DateAdded = DateTime.Parse(child.InnerText); break;
					case "AddedByUser": item.AddedByUser = child.InnerText; break;
					case "DateUpdated": item.DateUpdated = DateTime.Parse(child.InnerText); break;

					case "UpdatedByUser": item.UpdatedByUser = child.InnerText; break;
					case "RecordStatus": item.RecordStatus = (RecordStatus)Enum.Parse(typeof(RecordStatus), child.InnerText, true); break;
					case "CheckedInGrid": item.CheckedInGrid = bool.Parse(child.InnerText); break;
					case "IsDisposable": item.IsDisposable = bool.Parse(child.InnerText); break;
					case "GridCustom_0": item.GridCustom_0 = child.InnerText; break;

					case "GridCustom_1": item.GridCustom_1 = child.InnerText; break;
					case "GridCustom_2": item.GridCustom_2 = child.InnerText; break;
					case "GridCustom_3": item.GridCustom_3 = child.InnerText; break;
					case "GridCustom_4": item.GridCustom_4 = child.InnerText; break;
					case "GridCustom_5": item.GridCustom_5 = child.InnerText; break;

					case "GridCustom_6": item.GridCustom_6 = child.InnerText; break;
					case "GridCustom_7": item.GridCustom_7 = child.InnerText; break;
					case "GridCustom_8": item.GridCustom_8 = child.InnerText; break;
					case "GridCustom_9": item.GridCustom_9 = child.InnerText; break;
				}
			}
			return (propSet ? item : null);
		}
		#endregion IClassGenLogXML Implementation
	}
	#endregion SecObject Class

	#region SecObjectField Enum
	/// <summary>
	/// Enum for each field type in the element.
	/// </summary>
	public enum SecObjectField
	{
		/// <summary>
		/// The ObjectID element.
		/// </summary>
		ObjectID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The Type element.
		/// </summary>
		Type,
		/// <summary>
		/// The ParentObjectID element.
		/// </summary>
		ParentObjectID,
		/// <summary>
		/// The KeyName element.
		/// </summary>
		KeyName,
		/// <summary>
		/// The Text element.
		/// </summary>
		Text,
		/// <summary>
		/// The SortOrder element.
		/// </summary>
		SortOrder,
		/// <summary>
		/// The ImageURL element.
		/// </summary>
		ImageURL,
		/// <summary>
		/// The Lineage element.
		/// </summary>
		Lineage,
		/// <summary>
		/// The LineageSort element.
		/// </summary>
		LineageSort,
		/// <summary>
		/// The ExtendedText element.
		/// </summary>
		ExtendedText,
		/// <summary>
		/// The Inactive element.
		/// </summary>
		Inactive,
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The AddedByUser element.
		/// </summary>
		AddedByUser,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
		/// <summary>
		/// The UpdatedByUser element.
		/// </summary>
		UpdatedByUser,
		/// <summary>
		/// The Rowversion element.
		/// </summary>
		Rowversion,
	}
	#endregion SecObjectField Enum

	#region SecObjectMinMaxDateField Enum
	/// <summary>
	/// Enum for each DateTime field in the element that can have a minimum or maximum.
	/// </summary>
	public enum SecObjectMinMaxDateField
	{
		/// <summary>
		/// The DateAdded element.
		/// </summary>
		DateAdded,
		/// <summary>
		/// The DateUpdated element.
		/// </summary>
		DateUpdated,
	}
	#endregion SecObjectMinMaxDateField Enum

	#region SecObjectMinMaxNumberField Enum
	/// <summary>
	/// Enum for each numerical field in the element that can have a minimum or maximum.
	/// </summary>
	public enum SecObjectMinMaxNumberField
	{
		/// <summary>
		/// The ObjectID element.
		/// </summary>
		ObjectID,
		/// <summary>
		/// The AgencyID element.
		/// </summary>
		AgencyID,
		/// <summary>
		/// The ParentObjectID element.
		/// </summary>
		ParentObjectID,
		/// <summary>
		/// The SortOrder element.
		/// </summary>
		SortOrder,
	}
	#endregion SecObjectMinMaxNumberField Enum

	#region SecObject Collection
	/// <summary>
	/// A collection for SecObject objects.
	/// </summary>
	/// <remarks>
	/// This collection class is the primary way to work with SecObject objects.
	/// Most of the functionality is in this class, including the methods for creating SecObject objects from a database.
	/// </remarks>
	[Serializable]
	public partial class SecObjectCollection : ClassGenBindingList<SecObject, long>, IDisposable, 
		IClassGenLogXMLCollection, IClassGenClassGenerated, IClassGenClassUpdatable
	{
		#region Constructors
		/// <summary>
		/// Create an empty collection.
		/// </summary>
		public SecObjectCollection() 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "ObjectID";

			_rules = new ClassGenRules(this);			// Set the base collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		public SecObjectCollection(string whereClause) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "ObjectID";

			_rules = new ClassGenRules(this);			// Set the base collection
			this.GetFromDB(whereClause);			// Populate the collection
		}

		/// <summary>
		/// Create a collection and populate it with information based on the where clause.
		/// </summary>
		/// <param name="whereClause">The SQL where clause to use to populate the collection.</param>
		/// <param name="getChildren">True if the collection should populate all child collections as well.</param>
		public SecObjectCollection(string whereClause, bool getChildren) 
		{
			// The Key Field Name for the collection
			this.KeyFieldName = "ObjectID";

			_rules = new ClassGenRules(this);				// Set the base collection
			this.GetFromDB(whereClause, getChildren);		// Populate the collection
		}
		#endregion Constructors

		#region Public Properties
		/// <summary>
		/// Get a single record from the collection (not from the DB) that matches the ID.
		/// </summary>
		/// <param name="objectID">A key field used to find the correct record.</param>
		/// <returns>The SecObject object that matches the given value.</returns>
		public SecObject Get(long objectID)
		{
			SecObject val = null;
			if (KeyedCollection.ContainsKey(objectID)) { val = KeyedCollection[objectID]; }
			return val;
		}

		// Override the methods needed to do the collection thing
		#region Common Methods Override


		/// <summary>
		/// Get the next new id from the localized collection as a long.
		/// </summary>
		/// <returns>The next ID in the negative sequence of numbers.</returns>
		public long GetNextNewID()
		{
			long rtv = 0;

			// Get the next number in sequence
			for (long i = -9223372036854775808; i <= 0; i++)
			{
				if (!KeyedCollection.ContainsKey(i))
				{
					rtv = i;
					break;
				}
			}

			return rtv;		// Return the value
		}
		#endregion Common Methods Override


		/// <summary>
		/// A collection of all the active records from the collection (the ones without a status of "Deleted").
		/// </summary>
		public new SecObjectCollection ActiveRecords
		{
			get
			{
				return (SecObjectCollection)base.ActiveRecords;
			}
		}

		/// <summary>
		/// A collection of all the deleted records from the collection (the ones with a status of "Deleted").
		/// </summary>
		public SecObjectCollection DeletedRecords
		{
			get
			{
				return (SecObjectCollection)GetRecordsBasedOnStatus(RecordStatus.Deleted);
			}
		}

		/// <summary>
		/// A collection of all the modified records from the collection (the ones with a status of "Modified").
		/// </summary>
		public SecObjectCollection ModifiedRecords
		{
			get
			{
				return (SecObjectCollection)GetRecordsBasedOnStatus(RecordStatus.Modified);
			}
		}

		/// <summary>
		/// A collection of all the new records from the collection (the ones with a status of "New").
		/// </summary>
		public SecObjectCollection NewRecords
		{
			get
			{
				return (SecObjectCollection)GetRecordsBasedOnStatus(RecordStatus.New);
			}
		}

		#endregion Public Properties

		#region Collection Get Methods
		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(ref long dbCount)
		{
			dbCount = SecObjectCollection.GetCountFromDB();
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the SQL Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = SecObjectCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <param name="dbCount">A long variable (passed by reference) where this method can record the count of total records retrieved.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren, ref long dbCount)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			dbCount = SecObjectCollection.GetCountFromDB(whereClause);
			return GetFromDB();
		}

		/// <summary>
		/// Get all items from the database.
		/// Gets and populates all children objects as well.
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDBWithChildren()
		{
			this.GetCollectionConfig.WhereClause = string.Empty;
			this.GetCollectionConfig.GetChildren = true;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = false;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included.
		/// </summary>
		/// <param name="whereClause">An SQL Where clause to apply to the get.  Do not include the keyword WHERE - this method will add it for you.</param>
		/// <param name="getChildren">True if the developer wants all children collections returned as well.</param>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB(string whereClause, bool getChildren)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.GetChildren = getChildren;
			this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
			return GetFromDB();
		}

		/// <summary>
		/// Populate the collection with items, using the Where clause included
		/// </summary>
		/// <returns>A collection of any exceptions this method raises.</returns>
		public ClassGenExceptionCollection GetFromDB() 
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			SqlParameter param = null;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			
			// Reset the IsLoaded Variable before we load the collection
			this._isLoaded = false;
			
			// See if we're supposed to get this thing paged
			if (this.GetCollectionConfig.PageRecords)
			{
				_backgroundWorker = new BackgroundWorker();
				_backgroundWorker.WorkerReportsProgress = true;
				_backgroundWorker.WorkerSupportsCancellation = true;
				_backgroundWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(_backgroundWorker_RunWorkerCompleted);
				_backgroundWorker.ProgressChanged += new ProgressChangedEventHandler(_backgroundWorker_ProgressChanged);
				_backgroundWorker.DoWork += new DoWorkEventHandler(_backgroundWorker_DoWork);
				_backgroundWorker.RunWorkerAsync();
				return errors;
			}

			try
			{
				sql = "SELECT " + (this.GetCollectionConfig.TopRecords > -1 ? "TOP " + this.GetCollectionConfig.TopRecords.ToString() + " " : "") +
					" [SO].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tSecObject [SO] " + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? "WHERE " + this.GetCollectionConfig.WhereClause : "") + 
					"";
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause)
				{
					sql += (!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " AND" : " WHERE") +
						" dtUpdated > @pdtUpdated";
					param = new SqlParameter("@pdtUpdated", SqlDbType.DateTime);
					param.Value = _dateTimeObjectPopulated;
				}
				if (this.GetCollectionConfig.TopRecords > -1 &&
					!String.IsNullOrEmpty(this.GetCollectionConfig.TopSort))
				{
					sql += " ORDER BY " + this.GetCollectionConfig.TopSort;
				}
				cmd = new SqlCommand(sql);
				if (this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { cmd.Parameters.Add(param); }

				this.OnMasterPopulate("SecObject", "Retrieving Full List Of SecObjects", string.Empty);
				dt = DAL.SQLExecDataTable(cmd);

				int count = 0;
				if (!this.GetCollectionConfig.IncludeUpdateDateInWhereClause) { this.Clear(); }
				foreach (DataRow row in dt.Rows)
				{
					// Enumerate through the fields and set up the object
					if (count == 0)
					{
						if (row.Table.Columns.Contains("dateTimeObjectPopulated"))
						{
							_dateTimeObjectPopulated = (DateTime)row["dateTimeObjectPopulated"];
						}
						else
						{
							_dateTimeObjectPopulated = DateTime.Now;
						}
						DAL.EvalNumSecondsLocalMachineBehindServer(_dateTimeObjectPopulated.Value);
					}

					this.OnDetailPopulate("SecObject", 
						"Populating SecObject: " + (++count).ToString("###,###,###,##0") + " of " + dt.Rows.Count.ToString("###,###,###,##0"), 
						string.Empty, 
						dt.Rows.Count, 
						count);

					#region Fields
					SecObject item = new SecObject();
					item.Get(row);

					// Check to make sure this collection doesn't already contain this item
					if (this.Contains(item.ObjectID)) { this.Remove(item.ObjectID); }

					this.Add(item);
					#endregion Fields
				}
				
				dt.Dispose();		// Dispose of the datatable

				this._isLoaded = true;				// Set the IsLoaded Property
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <param name="whereClause">The SQL Where clause to use to get the total count.</param>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB(string whereClause)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();
			int rtv = 0;
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			try
			{
				sql = "SELECT COUNT(*) " +
						"FROM tSecObject " +
						(!String.IsNullOrEmpty(whereClause) ? "WHERE " + whereClause : "") +
						"";
				cmd = new SqlCommand(sql);
				dt = DAL.SQLExecDataTable(cmd);
				if (dt.Rows.Count > 0 &&
					dt.Rows[0][0] != DBNull.Value)
				{
					rtv = (int)dt.Rows[0][0];
				}
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return rtv;
		}

		/// <summary>
		/// Get a count from the database of the total number of records.
		/// </summary>
		/// <returns>The count of records.</returns>
		public static long GetCountFromDB()
		{
			return GetCountFromDB(string.Empty);		// Return the base method
		}
		#endregion Collection Get Methods

		#region Collection Put Methods
		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		public ClassGenExceptionCollection AddUpdateAll()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			SqlConnection oConn = null;
			SqlTransaction transaction = null;

			try
			{
				oConn = DAL.OpenConnection();

				// Start a new transaction
				transaction = oConn.BeginTransaction();

				errors.AddRange(AddUpdateAll(oConn, transaction));

				// Attempt to close the connection
				if (transaction != null)
				{
					try
					{
						transaction.Commit();		// Commit the transaction
						transaction.Dispose();		// Dispose of the transaction
						transaction = null;
					}
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
				DAL.CloseConnection(oConn);
				oConn = null;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
			finally
			{
				if (transaction != null)
				{
					try { transaction.Rollback(); }
					catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
					catch (Exception ex) { errors.Add(new ClassGenException(ex)); }
				}
			}

			return errors;		// Return the errors collection
		}

		/// <summary>
		/// Writes all records to the database that are dirty within the collection.
		/// </summary>
		/// <param name="oConn">The connection object</param>
		/// <param name="oTrans">The transaction object</param>
		public ClassGenExceptionCollection AddUpdateAll(SqlConnection oConn, SqlTransaction oTrans)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();
			if (this.Count == 0) { return errors; }

			ClassGenExceptionCollection itemErrors = new ClassGenExceptionCollection();
			int addUpdateAffected = 0, deleteAffected = 0;

			try
			{
				// Delete Method
				for (int i = this.Count - 1; i >= 0; i--)
				{
					this.OnDetailDelete("SecObject",
						"Deleting SecObject: " + (this.Count - i + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						this.Count - i + 1);
					SecObject item = this[i];
					if (item.RecordStatus == RecordStatus.Deleted)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0)
						{
							deleteAffected++;
							this.RemoveAt(i);		// Remove the item from the collection
						}
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = i + 1;
								err.RecordKey = item.ObjectID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
				}

				// Update Method
				int count = 0;
				foreach (SecObject item in this)
				{
					this.OnDetailUpdate("SecObject",
						"Updating SecObject: " + (count + 1).ToString("###,###,###,##0") +
						" of " + this.Count.ToString("###,###,###,##0"),
						string.Empty,
						this.Count,
						count + 1);
					if (item.RecordStatus == RecordStatus.Modified ||
						item.RecordStatus == RecordStatus.New)
					{
						itemErrors = item.AddUpdate(oConn, oTrans);
						if (itemErrors.Count == 0) { addUpdateAffected++; }
						else
						{
							foreach (ClassGenException err in itemErrors)
							{
								err.RecordIndex = count + 1;
								err.RecordKey = item.ObjectID.ToString();
							}
							errors.AddRange(itemErrors);
						}
					}
					count++;
				}


				// Add how many records were affected by the update
				errors.Add(new ClassGenException(addUpdateAffected.ToString("###,##0") +
					" Records affected by the update.", ClassGenExceptionIconType.System, addUpdateAffected.ToString()));
				errors[errors.Count - 1].Number = addUpdateAffected;
				errors.Add(new ClassGenException(deleteAffected.ToString("###,##0") +
					" Records affected by the delete.", ClassGenExceptionIconType.System, deleteAffected.ToString()));
				errors[errors.Count - 1].Number = deleteAffected;
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return errors;		// Return the errors collection
		}
		#endregion Collection Put Methods

		#region Clone/Copy Methods
		/// <summary>
		/// Create an exact copy of all the elements in the collection.
		/// </summary>
		/// <returns>The cloned collection.</returns>
		public new SecObjectCollection Clone()
		{
			SecObjectCollection newColl = new SecObjectCollection();
			newColl.AddRange(base.Clone());
			return newColl;
		}

		/// <summary>
		/// Copy the objects in the collection, creating a new ID for each one of them in the process.
		/// </summary>
		/// <returns>A new SecObjectCollection.</returns>
		public new SecObjectCollection CopyWithNewIDs()
		{
			return (SecObjectCollection)base.CopyWithNewIDs();
		}
		#endregion Clone/Copy Methods

		#region GetDistinct Method(s)
		/// <summary>
		/// Get a distinct list of values based on the elements in the collection.
		/// </summary>
		/// <param name="field">The field type to get.</param>
		/// <returns>A list of values from the collection (sorted by value).</returns>
		public List<string> GetDistinctFromCollection(LEAD.SecObjectField field)
		{
			if (this.Count == 0) { return new List<string>(); }
			SortedList<string, string> vals = new SortedList<string, string>();

			// Add the elements
			switch (field)
			{
				case LEAD.SecObjectField.ObjectID:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.ObjectID.ToString()) && 
							!vals.ContainsKey(item.ObjectID.ToString().Trim())) { vals.Add(item.ObjectID.ToString().Trim(), item.ObjectID.ToString().Trim()); }
					}
					break;
				case LEAD.SecObjectField.AgencyID:
					foreach (SecObject item in this)
					{
						if (item.AgencyID != null &&
							!String.IsNullOrEmpty(item.AgencyID.ToString()) && 
							!vals.ContainsKey(item.AgencyID.ToString().Trim())) { vals.Add(item.AgencyID.ToString().Trim(), item.AgencyID.ToString().Trim()); }
					}
					break;
				case LEAD.SecObjectField.Type:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.Type) && 
							!vals.ContainsKey(item.Type.Trim())) { vals.Add(item.Type.Trim(), item.Type.Trim()); }
					}
					break;
				case LEAD.SecObjectField.ParentObjectID:
					foreach (SecObject item in this)
					{
						if (item.ParentObjectID != null &&
							!String.IsNullOrEmpty(item.ParentObjectID.ToString()) && 
							!vals.ContainsKey(item.ParentObjectID.ToString().Trim())) { vals.Add(item.ParentObjectID.ToString().Trim(), item.ParentObjectID.ToString().Trim()); }
					}
					break;
				case LEAD.SecObjectField.KeyName:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.KeyName) && 
							!vals.ContainsKey(item.KeyName.Trim())) { vals.Add(item.KeyName.Trim(), item.KeyName.Trim()); }
					}
					break;
				case LEAD.SecObjectField.Text:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.Text) && 
							!vals.ContainsKey(item.Text.Trim())) { vals.Add(item.Text.Trim(), item.Text.Trim()); }
					}
					break;
				case LEAD.SecObjectField.SortOrder:
					foreach (SecObject item in this)
					{
						if (item.SortOrder != null &&
							!String.IsNullOrEmpty(item.SortOrder.ToString()) && 
							!vals.ContainsKey(item.SortOrder.ToString().Trim())) { vals.Add(item.SortOrder.ToString().Trim(), item.SortOrder.ToString().Trim()); }
					}
					break;
				case LEAD.SecObjectField.ImageURL:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.ImageURL) && 
							!vals.ContainsKey(item.ImageURL.Trim())) { vals.Add(item.ImageURL.Trim(), item.ImageURL.Trim()); }
					}
					break;
				case LEAD.SecObjectField.Lineage:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.Lineage) && 
							!vals.ContainsKey(item.Lineage.Trim())) { vals.Add(item.Lineage.Trim(), item.Lineage.Trim()); }
					}
					break;
				case LEAD.SecObjectField.LineageSort:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.LineageSort) && 
							!vals.ContainsKey(item.LineageSort.Trim())) { vals.Add(item.LineageSort.Trim(), item.LineageSort.Trim()); }
					}
					break;
				case LEAD.SecObjectField.ExtendedText:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.ExtendedText) && 
							!vals.ContainsKey(item.ExtendedText.Trim())) { vals.Add(item.ExtendedText.Trim(), item.ExtendedText.Trim()); }
					}
					break;
				case LEAD.SecObjectField.AddedByUser:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.AddedByUser) && 
							!vals.ContainsKey(item.AddedByUser.Trim())) { vals.Add(item.AddedByUser.Trim(), item.AddedByUser.Trim()); }
					}
					break;
				case LEAD.SecObjectField.UpdatedByUser:
					foreach (SecObject item in this)
					{
						if (!String.IsNullOrEmpty(item.UpdatedByUser) && 
							!vals.ContainsKey(item.UpdatedByUser.Trim())) { vals.Add(item.UpdatedByUser.Trim(), item.UpdatedByUser.Trim()); }
					}
					break;
			}

			List<string> rtv = new List<string>();
			rtv.AddRange(vals.Keys);
			return rtv;
		}
		#endregion GetDistinct Method(s)

		#region Random Methods
		#region GetLocalChildren Methods
		/// <summary>
		/// Get all the local children (not from the DB) that are of type SecGroupToObject
		/// </summary>
		/// <returns>A SecGroupToObjectCollection containing all the local children.</returns>
		public SecGroupToObjectCollection GetLocalChildren_SecGroupToObject()
		{
			SecGroupToObjectCollection rtv = new SecGroupToObjectCollection();

			foreach (SecObject parent in this)
			{
				foreach (SecGroupToObject child in parent.Coll_SecGroupToObject)
				{
					rtv.Add(child);
				}
			}

			return rtv;
		}
		#endregion GetLocalChildren Methods

		/// <summary>
		/// A collection of all broken rules associated with the collection.
		/// (Includes all the child classes validation as well.)
		/// </summary>
		public ClassGenExceptionCollection BrokenRules
		{
			get 
			{
				ClassGenExceptionCollection exceptions = new ClassGenExceptionCollection();
				foreach (SecObject item in this.ActiveRecords)
				{
					ClassGenExceptionCollection exCollection = item.BrokenRules;
					if (exCollection.Count > 0)
					{
						foreach (ClassGenException ex in exCollection)
						{
							ex.RecordIndex = (this.IndexOf(item)) + 1;
							ex.RecordKey = item.ObjectID.ToString();
						}
						exceptions.AddRange(exCollection);
					}
				}

				exceptions.AddRange(_rules.BrokenRules);

				return exceptions;
			}
		}

		/// <summary>
		/// Gets all the records that don't have a deleted status in the collection
		/// </summary>
		/// <returns>A SecObjectCollection of current records.</returns>
		public SecObjectCollection GetCurrent()
		{
			return this.ActiveRecords;
		}

		/// <summary>
		/// Checks to see if the element exists in the collection.
		/// </summary>
		/// <param name="objectID">A key field used to find the correct record.</param>
		/// <returns>A boolean indicating whether the element exists in the collection.</returns>
		public bool Exists(long objectID)
		{
			return (this.Exists(new Predicate<SecObject>(delegate (SecObject obj) 
				{ return obj.ObjectID == objectID; })));
		}

		/// <summary>
		/// Removes the element from the collection based on the argument passed.
		/// </summary>
		/// <param name="objectID">A key field used to find the correct record.</param>
		public void Remove(long objectID)
		{
			for (int i = this.Count - 1; i >= 0; i--)
			{
				if (this[i].ObjectID == objectID)
				{
					this.RemoveAt(i);
				}
			}
		}
		
		#region Refresh Collection Methods
		/// <summary>
		/// Refresh the object based on the threshhold of set minutes on the object.
		/// </summary>
		/// <param name="threshHoldInMinutes">The threshhold in minutes that is allowed before a record is marked as "old".</param>
		public ClassGenExceptionCollection RefreshCollection(int threshHoldInMinutes)
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			// Find out how far back you need to go based on the passed threshhold
			if (_dateTimeObjectPopulated == null) { return errors; }
			DateTime currentTime = DAL.GetSQLServerDateTime();
			if (((TimeSpan)currentTime.Subtract(_dateTimeObjectPopulated.Value)).TotalMinutes > threshHoldInMinutes)
			{
				// Force a refresh on the object
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = true;
				errors.AddRange(this.GetFromDB());
			}

			return errors;		// Return the collection
		}

		/// <summary>
		/// Refresh the object based on the currently set Refresh on the project.
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshCollection()
		{
			return RefreshCollection((int)_refreshRate);
		}

		/// <summary>
		/// Force a Refresh on the object based on the held Primary Key GUID
		/// </summary>
		/// <returns>A collection of any exceptions created by refreshing the object.</returns>
		public ClassGenExceptionCollection RefreshForce()
		{
			ClassGenExceptionCollection errors = new ClassGenExceptionCollection();

			if (_isLoaded)
			{
				this.GetCollectionConfig.IncludeUpdateDateInWhereClause = false;
				errors.AddRange(this.GetFromDB());	// Just do a get on the object
			}
			else
			{
				ClassGenException ex = new ClassGenException("You can't force a refresh on an object where the key field is not set.", ClassGenExceptionIconType.Critical);
			}

			return errors;		// Return the collection
		}
		#endregion Refresh Collection Methods
		#endregion Random Methods

		#region DataTable Methods
		/// <summary>
		/// Converts the object to a datatable. 
		/// Does not include deleted records. 
		/// </summary>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable()
		{
			return ToDataTable(false);
		}

		/// <summary>
		/// Converts the object to a datatable. 
		/// </summary>
		/// <param name="includeDeleted">Whether to include deleted records in the datatable.</param>
		/// <returns>The object as a DataTable.</returns>
		public DataTable ToDataTable(bool includeDeleted)
		{
			// Generate the datatable object first
			DataTable dt = this.ToEmptyDataTable();

			// Now, go through and build the data table with actual rows
			int count = 0;
			foreach (SecObject item in this)
			{
				if (item.RecordStatus == RecordStatus.Current ||
					item.RecordStatus == RecordStatus.Modified ||
					item.RecordStatus == RecordStatus.New ||
					(item.RecordStatus == RecordStatus.Deleted && includeDeleted))
				{
					dt.Rows.Add(item.ToDataRow(dt));
					this.OnDataTablePopulate(string.Empty, string.Empty, string.Empty, this.Count, count + 1);
				}
				count++;
			}
			
			// Return the data table
			return dt;
		}

		/// <summary>
		/// Creates an empty datatable with the object's structure.
		/// </summary>
		/// <returns>An empty DataTable with the object's structure.</returns>
		public DataTable ToEmptyDataTable()
		{
			// Return the data table
			return EmptyDataTableWithIL<SecObject>();
		}

		/// <summary>
		/// Event Handler to deal with populating the information
		/// </summary>
		public delegate void DataTablePopulateEventHandler(object sender, PopulateUpdateDelete_EventArgs e);
		/// <summary>
		/// Occurs when this class populates a DataTable with a row of its data.
		/// </summary>
		public event DataTablePopulateEventHandler DataTablePopulate;
		/// <summary>
		/// Calls the DataTable.Populate event.
		/// </summary>
		/// <param name="name">The name of the record in the DataRow.</param>
		/// <param name="description">A description of the record.</param>
		/// <param name="errors">The names of any exceptions that cropped up.</param>
		/// <param name="totalCount">The total number of rows in the DataTable.</param>
		/// <param name="currentIndex">The current Index the iterator has reached.</param>
		protected void OnDataTablePopulate(string name, string description, string errors, int totalCount, int currentIndex)
		{
			if (DataTablePopulate != null)
			{
				PopulateUpdateDelete_EventArgs e = new PopulateUpdateDelete_EventArgs(name, description, errors, totalCount, currentIndex);
				DataTablePopulate(this, e);
			}
		}
		#endregion DataTable Methods

		#region Static Methods
		/// <summary>
		/// Delete records from the table based on a given criteria.
		/// </summary>
		/// <remarks>
		/// The Where clause cannot be empty.
		/// To delete all the records from the table, use the LEADBaseObject.DeleteAll() method, instead.
		/// </remarks>
		/// <param name="whereClause">The SQL where clause to use on the system.</param>
		/// <param name="errors">A ClassGenExceptionCollection to add any exception reports to.</param>
		/// <returns>The number of records affected by the delete.</returns>
		public static int Delete(string whereClause, ref ClassGenExceptionCollection errors)
		{
			string sql = string.Empty;
			SqlCommand cmd = null;
			int recsAffected = 0;

			if (String.IsNullOrEmpty(whereClause))
			{
				errors.Add(new ClassGenException("The where clause cannot be empty.  " + 
					"If you want to delete all records in the table, please call " + 
					"the LEADBaseObject.DeleteAll() method.", ClassGenExceptionIconType.Critical));
				return -1;
			}

			try
			{
				sql = "DELETE FROM tSecObject " +
					"WHERE " + whereClause.Trim();
				cmd = new SqlCommand(sql);
				recsAffected = DAL.SQLExecNonQuery(cmd);
			}
			catch (SqlException sqle) { errors.Add(new ClassGenException(sqle)); }
			catch (Exception ex) { errors.Add(new ClassGenException(ex)); }

			return recsAffected;
		}
		#endregion Static Methods

		#region Json.NET Serialization Methods
		/// <summary>
		/// Attempt to serialize the SecObjectCollection object to the server
		/// </summary>
		/// <param name="obj">The SecObjectCollection object to serialize</param>
		/// <returns>A string containing the return from the method</returns>
		public static string SerializeObject(SecObjectCollection obj)
		{
			string rtv = string.Empty;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
			}
			catch (Exception ex)
			{
				rtv = "Error: " + ex.Message;
			}

			return rtv;         // Return the result
		}

		/// <summary>
		/// Attempt to Deserialize the SecObjectCollection object from the server
		/// </summary>
		/// <param name="obj">The SecObjectCollection object to deserialize</param>
		/// <param name="errors">The errors collection</param>
		/// <returns>A SecObjectCollection object containing the return from the method</returns>
		public static SecObjectCollection DeserializeObject(string obj, ref ClassGenExceptionCollection errors)
		{
			SecObjectCollection rtv = null;

			try
			{
				rtv = Newtonsoft.Json.JsonConvert.DeserializeObject<SecObjectCollection>(obj);
			}
			catch (Exception ex)
			{
				errors.Add(new ClassGenException("Error: " + ex.Message, ClassGenExceptionIconType.Critical));
			}

			return rtv;         // Return the result
		}
		#endregion Json.NET Serialization Methods

		#region DataSet Methods
		/// <summary>
		/// Converts the collection to a Dataset and passes it back.
		/// All records with a deleted status are removed from the collection before being passed back.
		/// </summary>
		/// <returns>The collection converted to a DataSet object.</returns>
		public DataSet ToDataSet()
		{
			return ToDataSet(false);
		}

		/// <summary>
		/// Converts the collection to a Dataset and passes it back.
		/// </summary>
		/// <param name="includeDeleted">False to remove all records marked for deletion before converting.</param>
		/// <returns>The collection converted to a DataSet object.</returns>
		public DataSet ToDataSet(bool includeDeleted)
		{
			// Create the DataSet you're going to send back
			DataSet ds = new DataSet();
			
			// Get the base datatable
			DataTable dt = this.ToDataTable(includeDeleted);
			ds.Tables.Add(dt);
			
			// Now get all the sub objects and link them in
			DataRow newRow = dt.NewRow();
			
			SecGroupToObjectCollection Coll_SecGroupToObject = new SecGroupToObjectCollection();
			DataTable dtSecGroupToObject = Coll_SecGroupToObject.ToEmptyDataTable();
			
			foreach (SecObject item in this)
			{
				// SecGroupToObject
				dt = item.Coll_SecGroupToObject.ToDataTable(includeDeleted);
				foreach (DataRow row in dt.Rows)
				{
					newRow = dtSecGroupToObject.NewRow();
					foreach (DataColumn col in dtSecGroupToObject.Columns)
					{
						 newRow[col.ColumnName] = row[col.ColumnName];
					}
					dtSecGroupToObject.Rows.Add(newRow);
				}
			}
			
			// Add the datatables to the dataset
			ds.Tables.Add(dtSecGroupToObject);
			ds.Relations.Add("SecObject_SecGroupToObject", ds.Tables[0].Columns["ObjectID"], ds.Tables[ds.Tables.Count - 1].Columns["ObjectID"]);
			

			// Send back the dataset
			return ds;
		}
		#endregion DataSet Methods

		#region Threaded Get
		private void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
		{
			_asyncConnection = DAL.OpenConnection();

			// Create the temp table on the connection
			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			sql = 
				"IF object_id('tempdb..#SecObject') IS NOT NULL  DROP TABLE #SecObject; " + 
					"CREATE TABLE #SecObject (iObjectID bigint, iItemIndex INT IDENTITY(1,1) PRIMARY KEY CLUSTERED);  " + 
					"INSERT INTO #SecObject (iObjectID) SELECT iObjectID FROM tSecObject" + 
					(!String.IsNullOrEmpty(this.GetCollectionConfig.WhereClause) ? " WHERE " + this.GetCollectionConfig.WhereClause : "") + ";  " + 
					"SELECT COUNT(*) AS iCount FROM #SecObject "; 
			cmd = new SqlCommand(sql);
			dt = DAL.SQLExecDataTable(cmd, _asyncConnection);

			int totalCount = int.Parse(dt.Rows[0][0].ToString());		// Get the count of records in the table

			BackgroundWorker worker = sender as BackgroundWorker;
			GetAsync(worker, e, _asyncConnection, totalCount, this.GetCollectionConfig.PageSize);		// Start the work
		}

		private void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
		{
			if (e.UserState != null)
			{
				SecObjectCollection_GetAsyncObject obj = (SecObjectCollection_GetAsyncObject)e.UserState;
				this.OnGetThreadedProgress(obj.CurrentIndex, obj.TotalCount, obj.SecObjectCollection);
			}
		}

		private void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
		{
			DAL.CloseConnection(_asyncConnection);		// Close the connection
			this.OnGetThreadedCompleted();
			this.IsLoaded = true;		// Set the IsLoaded flag
		}

		/// <summary>
		/// The method that actually does the async Get
		/// </summary>
		private void GetAsync(BackgroundWorker worker, 
			DoWorkEventArgs e, 
			SqlConnection oConn, 
			int totalCount,
			int pageSize)
		{
			int currentIndex = 0, pageStart = 0, pageEnd = 0;
			decimal totalMilleseconds = 0;

			DateTime lastGetStart = DateTime.Now;

			string sql = string.Empty;
			SqlCommand cmd = null;
			DataTable dt = new DataTable();

			SecObjectCollection coll = new SecObjectCollection();
			SecObject item = new SecObject();

			if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be

			// Run the method as long as we have records
			while (currentIndex < totalCount)
			{
				sql = string.Empty;  cmd = null;  dt = new DataTable();

				pageStart = currentIndex + 1;
				pageEnd = pageStart - 1 + pageSize;

				sql = "SELECT [SO].*, GETDATE() AS dateTimeObjectPopulated " + 
					"FROM tSecObject [SO] " + 
					"INNER JOIN #SecObject TEMP ON [SO].[iObjectID] = [TEMP].[iObjectID] " +
					"WHERE TEMP.iItemIndex BETWEEN @piStart AND @piEnd " +
					"";
				cmd = new SqlCommand(sql);
				cmd.Parameters.Add("@piStart", SqlDbType.Int).Value = pageStart;
				cmd.Parameters.Add("@piEnd", SqlDbType.Int).Value = pageEnd;
				lastGetStart = DateTime.Now;
				dt = DAL.SQLExecDataTable(cmd, oConn);

				// Populate the local SecObject collection
				coll = new SecObjectCollection();
				foreach (DataRow row in dt.Rows)
				{
					item = new SecObject();
					item.Get(row);
					coll.Add(item);
				}

				currentIndex += dt.Rows.Count;		// The current Index count of where we are in the set

				// Report the progress
				SecObjectCollection_GetAsyncObject obj = new SecObjectCollection_GetAsyncObject(currentIndex,
					totalCount, 
					coll);
				worker.ReportProgress((int)(currentIndex / totalCount), obj);

				// Reset the page size based on the number of records pulled back
				totalMilleseconds = (decimal)((TimeSpan)DateTime.Now.Subtract(lastGetStart)).TotalMilliseconds;
				if ((totalMilleseconds < 300 ||
					totalMilleseconds > 700) &&
					totalMilleseconds > 0)
				{
					// Redo the math on the page size to get it within 500 milleseconds
					pageSize = ((500 * pageSize) / (int)totalMilleseconds);
				}

				if (worker.CancellationPending) { e.Cancel = true; }		// Cancel the worker if need be
			}
		}

		// Events to raise as part of population thread
		/// <summary>
		/// The delegate for the GetThreadedProgress event.
		/// </summary>
		public delegate void GetThreadedProgressEventHandler(object sender, SecObject_GetCollection_EventArgs e);
		/// <summary>
		/// Occurs when the main thread calls an asynchronous thread to check on its progress getting data from a database.
		/// </summary>
		public event GetThreadedProgressEventHandler GetThreadedProgress;
		/// <summary>
		/// Calls the GetThreadedProgress event.
		/// </summary>
		public void OnGetThreadedProgress(int currentIndex, int totalCount, SecObjectCollection coll)
		{
			if (GetThreadedProgress != null)
			{
				// Add the items found in the collection to the current set
				foreach (SecObject a in coll)
				{
					this.Add(a);		// Add the SecObject
				}

				SecObject_GetCollection_EventArgs e = new SecObject_GetCollection_EventArgs(currentIndex, totalCount, coll);
				GetThreadedProgress(this, e);
			}
		}

		/// <summary>
		/// The delegate for the GetThreadedCompleted event.
		/// </summary>
		public delegate void GetThreadedCompletedEventHandler(object sender, EventArgs e);
		/// <summary>
		/// Occurs when an asynchronous thread finishes getting data from a database.
		/// </summary>
		public event GetThreadedCompletedEventHandler GetThreadedCompleted;
		/// <summary>
		/// Calls the GetThreadedCompleted event.
		/// </summary>
		public void OnGetThreadedCompleted()
		{
			if (GetThreadedCompleted != null)
			{
				EventArgs e = new EventArgs();
				GetThreadedCompleted(this, e);
			}
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(int pageSize, string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="whereClause">An SQL Where clause determining which records to get.</param>
		public void GetFromDBThreaded(string whereClause)
		{
			this.GetCollectionConfig.WhereClause = whereClause;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		/// <param name="pageSize">The number of records to a page.</param>
		public void GetFromDBThreaded(int pageSize)
		{
			this.GetCollectionConfig.PageSize = pageSize;
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Start the Get All Method in a threaded fashion
		/// </summary>
		public void GetFromDBThreaded()
		{
			this.GetCollectionConfig.PageRecords = true;
			GetFromDB();
		}

		/// <summary>
		/// Stop the Background worker from getting anymore
		/// </summary>
		public void GetFromDBThreadedStop()
		{
			_backgroundWorker.CancelAsync();
		}
		#endregion Threaded Get

		#region IClassGenLogXMLCollection Implementation
		/// <summary>
		/// Get the collection as an XML Stream with all base model properties included.
		/// </summary>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML()
		{
			return GetAsXML(true);
		}

		/// <summary>
		/// Get the collection as an XML Stream.
		/// </summary>
		/// <param name="includeBaseProperties">True to include the base model properties.</param>
		/// <returns>The XML Stream.</returns>
		public string GetAsXML(bool includeBaseProperties)
		{
			StringBuilder sb = new StringBuilder();
			foreach (SecObject item in this)
			{
				sb.Append(item.GetAsXML(includeBaseProperties));
			}

			// Include the header/footer for the stream
			sb.Insert(0, "<SecObjectCollection>" + Environment.NewLine);
			sb.Append("</SecObjectCollection>" + Environment.NewLine);

			return sb.ToString();
		}

		/// <summary>
		/// Get the read elements as an XML list of strings.
		/// Strings are broken at 6000 characters.
		/// </summary>
		/// <param name="newElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "new".</param>
		/// <param name="readElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "read".</param>
		/// <param name="changedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "changed".</param>
		/// <param name="deletedElements">A List&lt;&gt; of strings (passed by reference) into which the method can insert elements marked as "deleted".</param>
		public void GetXMLChanges(ref List<string> newElements,
			ref List<string> readElements,
			ref List<string> changedElements,
			ref List<string> deletedElements)
		{
			StringBuilder sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
			StringBuilder sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);

			// Clear out the collections
			newElements = new List<string>();
			readElements = new List<string>();
			changedElements = new List<string>();
			deletedElements = new List<string>();

			// Go through the records and take care of them
			foreach (SecObject item in this)
			{
				switch (item.RecordStatus)
				{
					case RecordStatus.Current:
						// Don't forget the to string
						sbRead.Append("<SecObject>" + Environment.NewLine);
						sbRead.Append("\t<ObjectID>" + item.ObjectID.ToString() + "</ObjectID>" + Environment.NewLine);
						sbRead.Append("\t<AgencyID>" + (item.AgencyID != null ? item.AgencyID.ToString() : "NULL") + "</AgencyID>" + Environment.NewLine);
						sbRead.Append("\t<Type>" + (item.Type != null ? item.Type : "NULL") + "</Type>" + Environment.NewLine);
						sbRead.Append("\t<ParentObjectID>" + (item.ParentObjectID != null ? item.ParentObjectID.ToString() : "NULL") + "</ParentObjectID>" + Environment.NewLine);
						sbRead.Append("\t<KeyName>" + (item.KeyName != null ? item.KeyName : "NULL") + "</KeyName>" + Environment.NewLine);
						sbRead.Append("</SecObject>" + Environment.NewLine);

						if (sbRead.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging) 
						{ 
							readElements.Add(sbRead.ToString());
							sbRead = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader); 
						}
						break;

					case RecordStatus.Deleted:
						sbDeleted.Append("<SecObject>" + Environment.NewLine);
						sbDeleted.Append("\t<ObjectID>" + item.ObjectID.ToString() + "</ObjectID>" + Environment.NewLine);
						sbDeleted.Append("\t<AgencyID>" + (item.AgencyID != null ? item.AgencyID.ToString() : "NULL") + "</AgencyID>" + Environment.NewLine);
						sbDeleted.Append("\t<Type>" + (item.Type != null ? item.Type : "NULL") + "</Type>" + Environment.NewLine);
						sbDeleted.Append("\t<ParentObjectID>" + (item.ParentObjectID != null ? item.ParentObjectID.ToString() : "NULL") + "</ParentObjectID>" + Environment.NewLine);
						sbDeleted.Append("\t<KeyName>" + (item.KeyName != null ? item.KeyName : "NULL") + "</KeyName>" + Environment.NewLine);
						sbDeleted.Append("</SecObject>" + Environment.NewLine);

						if (sbDeleted.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							deletedElements.Add(sbDeleted.ToString());
							sbDeleted = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.New:
						sbNew.Append("<SecObject>" + Environment.NewLine);
						sbNew.Append("\t<ObjectID>" + item.ObjectID.ToString() + "</ObjectID>" + Environment.NewLine);
						sbNew.Append("\t<AgencyID>" + (item.AgencyID != null ? item.AgencyID.ToString() : "NULL") + "</AgencyID>" + Environment.NewLine);
						sbNew.Append("\t<Type>" + (item.Type != null ? item.Type : "NULL") + "</Type>" + Environment.NewLine);
						sbNew.Append("\t<ParentObjectID>" + (item.ParentObjectID != null ? item.ParentObjectID.ToString() : "NULL") + "</ParentObjectID>" + Environment.NewLine);
						sbNew.Append("\t<KeyName>" + (item.KeyName != null ? item.KeyName : "NULL") + "</KeyName>" + Environment.NewLine);
						sbNew.Append("</SecObject>" + Environment.NewLine);

						if (sbNew.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							newElements.Add(sbNew.ToString());
							sbNew = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

					case RecordStatus.Modified:
						sbChanged.Append(item.GetChangedElementsAsXML() + Environment.NewLine);

						if (sbChanged.ToString().Trim().Length > LEAD_BaseObject.SplitOnXMLCharactersForLogging)
						{
							changedElements.Add(sbChanged.ToString());
							sbChanged = new StringBuilder(LEAD_BaseObject.SplitOnXMLHeader);
						}
						break;

				}
			}

			// Add the final strings to the list
			newElements.Add(sbNew.ToString());
			readElements.Add(sbRead.ToString());
			deletedElements.Add(sbDeleted.ToString());
			changedElements.Add(sbChanged.ToString());
		}

		/// <summary>
		/// Load the XML into a collection based on what's passed in.
		/// </summary>
		/// <param name="xml">The XML to process.</param>
		/// <returns>The completed SecObjectCollection object.</returns>
		public static SecObjectCollection LoadFromXML(string xml)
		{
			SecObjectCollection coll = new SecObjectCollection();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.LoadXml(xml);
			// <SecObjectCollection>
			foreach (System.Xml.XmlNode nodeMain in doc.ChildNodes)
			{
				// <SecObject>
				foreach (System.Xml.XmlNode node in nodeMain.ChildNodes)
				{
					// These are the elements <DetailGUID>, <UserName>, etc.
					SecObject item = SecObject.LoadFromXML(node.OuterXml);
					if (item != null) { coll.Add(item); }
				}
			}
			return coll;
		}
		#endregion IClassGenLogXMLCollection Implementation
		
		#region Mathematical Functions

		/// <summary>
		/// The number of records that have a SortOrder value.
		/// </summary>
		public decimal CountOfSortOrder
		{
			get { return this.Count; }
		}
		
		/// <summary>
		/// This collection's average SortOrder.
		/// </summary>
		public decimal AvgOfSortOrder
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SortOrder", LEAD_BaseObject.MathFunctionType.Average);
			}
		}
		
		/// <summary>
		/// The total of each record's SortOrder.
		/// </summary>
		public decimal SumOfSortOrder
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SortOrder", LEAD_BaseObject.MathFunctionType.Sum);
			}
		}
		
		/// <summary>
		/// The lowest SortOrder present in the collection.
		/// </summary>
		public decimal MinOfSortOrder
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SortOrder", LEAD_BaseObject.MathFunctionType.Min);
			}
		}
		
		/// <summary>
		/// The greatest SortOrder present in the collection.
		/// </summary>
		public decimal MaxOfSortOrder
		{
			get
			{
				return LEAD_BaseObject.Math(this.GetAsList(), "SortOrder", LEAD_BaseObject.MathFunctionType.Max);
			}
		}
		/// <summary>
		/// The earliest DateAdded present in the collection.
		/// </summary>
		public DateTime? MinOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (SecObject item in this)
				{
					if (item.DateAdded < rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateAdded present in the collection.
		/// </summary>
		public DateTime? MaxOfDateAdded
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateAdded; }
				else { return null; }
		
				foreach (SecObject item in this)
				{
					if (item.DateAdded > rtv) { rtv = item.DateAdded; }
				}
				return rtv;
			}
		}
		/// <summary>
		/// The earliest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MinOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (SecObject item in this)
				{
					if (item.DateUpdated < rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		
		/// <summary>
		/// The latest DateUpdated present in the collection.
		/// </summary>
		public DateTime? MaxOfDateUpdated
		{
			get
			{
				DateTime? rtv = null;
				if (this.Count > 0) { rtv = this[0].DateUpdated; }
				else { return null; }
		
				foreach (SecObject item in this)
				{
					if (item.DateUpdated > rtv) { rtv = item.DateUpdated; }
				}
				return rtv;
			}
		}
		#endregion Mathematical Functions

		#region Collection Disposal
		/// <summary>
		/// Implement IDisposable.
		/// Do not make this method virtual.
		/// A derived class should not be able to override this method.
		/// </summary>
		public void Dispose()
		{
			if (!this.IsDisposable) { return; }

			Dispose(true);

			// Take yourself off the Finalization queue 
			// to prevent finalization code for this object
			// from executing a second time.
			GC.SuppressFinalize(this);
		}

		/// <summary>
		/// Dispose(bool disposing) executes in two distinct scenarios.
		/// If disposing equals true, the method has been called directly
		/// or indirectly by a user's code. Managed and unmanaged resources
		/// can be disposed.
		/// If disposing equals false, the method has been called by the 
		/// runtime from inside the finalizer and you should not reference 
		/// other objects. Only unmanaged resources can be disposed.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (!this.IsDisposable) { return; }

			// Check to see if Dispose has already been called.
			if (!this._disposed)
			{
				// Set the disposed on this object to true
				this._disposed = true;

				// If disposing equals true, dispose all managed 
				// and unmanaged resources.
				if (disposing)
				{
					// Dispose managed resources.
					if (_backgroundWorker != null) { _backgroundWorker.Dispose(); _backgroundWorker = null; } 
					GetCollectionConfig = null;
					if (_rules != null) { _rules.Clear(); _rules = null; }
					if (_asyncConnection != null) { _asyncConnection.Dispose(); _asyncConnection = null; }

					// Go through and properly dispose of each object
					foreach (SecObject item in this)
					{
						if (item.IsDisposable) { item.Dispose(); }
					}

					// Deal with the keyed collections
					KeyedCollection = new Dictionary<long, SecObject>();

					// Clear out the collection
					this.Clear();
				}
				// Release unmanaged resources. If disposing is false, 
				// only the following code is executed.
				// <Enter Disposal here> 
				// Note that this is not thread safe.
				// Another thread could start disposing the object
				// after the managed resources are disposed,
				// but before the disposed flag is set to true.
				// If thread safety is necessary, it must be
				// implemented by the client.
			}
		}

		/// <summary>
		/// Use C# destructor syntax for finalization code.
		/// This destructor will run only if the Dispose method 
		/// does not get called.
		/// It gives your base class the opportunity to finalize.
		/// Do not provide destructors in types derived from this class.
		/// </summary>
		~SecObjectCollection()
		{
			if (!this.IsDisposable) { return; }

			// Do not re-create Dispose clean-up code here.
			// Calling Dispose(false) is optimal in terms of
			// readability and maintainability.
			Dispose(false);
		}
		#endregion Collection Disposal
	}
	#endregion SecObject Collection

	#region Event Handler for Async Object
	/// <summary>
	/// Custom class for SecObject event args such as population
	/// </summary>
	[Serializable]
	public class SecObject_GetCollection_EventArgs : EventArgs
	{
		private int _totalCount = 0;
		private int _currentIndex = 0;
		private SecObjectCollection _coll = new SecObjectCollection();

		/// <summary>
		/// Creates a new SecObject_GetCollection_EventArgs with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record being populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public SecObject_GetCollection_EventArgs(int currentIndex, int totalCount, SecObjectCollection coll)
		{
			_totalCount = totalCount;
			_currentIndex = currentIndex;
			_coll = coll;
		}

		/// <summary>
		/// Creates a new empty SecObject_GetCollection_EventArgs.
		/// </summary>
		public SecObject_GetCollection_EventArgs()
		{
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public SecObjectCollection SecObjectCollection
		{
			get { return _coll; }
		}
	}
	#endregion Event Handler for Async Object

	#region Async Object for the Threaded Get
	/// <summary>
	/// An object to populate a SecObjectCollection asynchronously.
	/// </summary>
	public class SecObjectCollection_GetAsyncObject
	{
		private int _currentIndex = 0;
		private int _totalCount = 0;
		private SecObjectCollection _coll = new SecObjectCollection();

		/// <summary>
		/// Creates a new SecObject_GetAsyncObject with the specified properties.
		/// </summary>
		/// <param name="currentIndex">The index of the current record to be populated.</param>
		/// <param name="totalCount">The total number of records to be collected.</param>
		/// <param name="coll">The collection holding the records.</param>
		public SecObjectCollection_GetAsyncObject(int currentIndex, int totalCount, SecObjectCollection coll)
		{
			_currentIndex = currentIndex;
			_totalCount = totalCount;
			_coll = coll;
		}

		/// <summary>
		/// The index of the current record being populated.
		/// </summary>
		public int CurrentIndex
		{
			get { return _currentIndex; }
		}

		/// <summary>
		/// The total number of records to be collected.
		/// </summary>
		public int TotalCount
		{
			get { return _totalCount; }
		}

		/// <summary>
		/// The collection holding the records.
		/// </summary>
		public SecObjectCollection SecObjectCollection
		{
			get { return _coll; }
		}
	}
	#endregion Async Object for the Threaded Get

}

